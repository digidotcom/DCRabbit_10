/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __UTIL_LIB
#define __UTIL_LIB
/*** EndHeader */


// Contains utility functions used by Rabbit targets
// Group functions by type/attribute so that watch expressions have access


/*** Beginheader _flag_prot16, _ptr_prot16, _prot16_save, _flag_prot32,
                 _ptr_prot32, _prot32_save, _flag_pvalid */
extern __bbram char _flag_prot16;
extern __bbram int *_ptr_prot16;
extern __bbram int  _prot16_save;
extern __bbram char _flag_prot32;
extern __bbram long *_ptr_prot32;
extern __bbram long  _prot32_save;
extern __bbram unsigned long _flag_pvalid;
/*** Endheader */

// Ensure all protected variables' information is in battery-backed RAM,
//  just in case there is a choice!  (EG:  RCM3200)
__bbram char _flag_prot16;
__bbram int *_ptr_prot16;
__bbram int  _prot16_save;
__bbram char _flag_prot32;
__bbram long *_ptr_prot32;
__bbram long  _prot32_save;
__bbram unsigned long _flag_pvalid;

/*** BeginHeader _switch */
/*** EndHeader _switch */

#asm __nodebug __root
// input arguments: HL = switch value, BC = last element index, PX = address of table
   align even ; Maximises even instructions in loop for R5000/R6000
_switch::
   ex		de', hl					; de' = switch value
   ld		de, 0                ; j = size (bc), i = 0
   ld		py, bcde             ; py = j:i
.trycase:
	ld		hl, bc               ; bcde will have been loaded from py in all cases
   cp 	hl, de               ; j < i ?
   jr	   lt, .return		      ; No case found, exit
   add	hl, de               ; hl = j+i
;
; for any reasonable values of i and j, carry should be clear after the add...
;
   rr		hl                   ; hl /= 2 = (j+i)/2
   ld		bc, hl               ; p = hl (in bc)
   sll 2, jkhl
   add	hl, bc
   ld		de, (px+hl)
   ex		de', hl              ; Recall value
   cp		hl, de               ;
   ex		de', hl
   ld		hl, bc					; Recall p
   ld		bcde, py             ; Recall j and i
   jr		c, .is_greater
   jr		eq, .is_equal
//is_less:                    ; This label isn't needed, fall-through case...
   ld		de, hl
   inc	de                   ; If less, i = p+1
   ld		py, bcde
   jr .trycase
.is_greater:
	ld		bc, hl
   dec	bc                   ; If greater, j = p-1
   ld		py, bcde
	jr	.trycase
.is_equal:                    ; Found the case
   ld		de, hl					; hl still has the index
   ; Why recalculate? Make the common case fast.
   sll 2, jkhl
   add	hl, de
   inc	hl
   inc	hl
   ld		jkhl, (px+hl)
   ld		a, h
   cp		a, 0xE0
   jr		c, .noxpcchange
   ex		jk, hl
   ld		a, L
   ld		xpc, a
   ex		jk, hl
.noxpcchange:
	add	sp, 2
   jp		(hl)
.return:
	ret
#endasm

/*** Beginheader sspixffn_,rspixffn_ */
/*** EndHeader */

#asm __nodebug

; sspixffn_ (correlate with rspixffn_)
; FEATURES:
;               No    Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               No    Function call tracing
; CALLING :
;    > DC5  exx ;preserve first argument
;           ld    hl,-<local variable byte usage>
;               call    <thisfunction>
; INPUT  :
;           HL = Space Required for Locals As Negative Value
; OUTPUT :
;           None

sspixffn_::
	pop 	iy          		; Ret Addr
	add 	hl,sp
	ld    sp,hl       		; Adjust Stack
	push  iy          		; Restore Ret Addr
	exx             			; restore first argument to user's function
	ret

; rspixffn_ (correlate with sspixffn_)
; FEATURES:
;               No    Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               No    Function call tracing
; CALLING :
;           exx ;preserve any function return value
;           ld    hl,<local variable byte usage>
;           call    <thisfunction> for F80
;           jump    <thisfunction> for Z180
; INPUT   :
;           HL = Space Required for Locals
; OUTPUT  :
;           None

rspixffn_::
	pop   iy            		; return address
	add 	hl,sp
	ld    sp,hl    			; Adjust Stack
	push  iy          		; return address
	exx             			; Restore any function return value
	ret

#endasm

/*** Beginheader sspixffndbg_,rspixffndbg_ */
/*** EndHeader */
#ifdef _C_DBG_FN_ENTRY
int	_c_dbg_fn_level = 0;	// Prevent infinite recursion of debugging
#endif

#asm __nodebug

; sspixffndbg_ (correlate with rspixffndbg_)
; FEATURES:
;               No    Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;    > DC5  exx ;preserve first argument
;           ld    hl,-<local variable byte usage>
;               call    <thisfunction>
; INPUT  :
;           HL = Space Required for Locals As Negative Value
; OUTPUT :
;           None
   align even
sspixffndbg_::
	pop 	iy          		; Ret Addr
	add 	hl,sp
	ld    sp,hl       		; Adjust Stack
	push  iy          		; Restore Ret Addr
#ifdef _C_DBG_FN_ENTRY
	ld		hl,(_c_dbg_fn_level)
   test	hl
   exx
   jp		nz,_fentry			; Bypass if already running fn entry function
   								; This only works with single threading!
   exx
   inc	hl
   ld		(_c_dbg_fn_level),hl
   exx
   push	px						; Save caller's first arg (pointer) - 5th parm
   push	bcde					; Save caller's first arg (long) - 4th parm
   push	hl						; Save caller's first arg (short) - 3rd parm
   clr	hl
   add	hl,sp
   push	hl						; Push current SP as 2ng arg for debug fn
   ld		hl,lxpc
   push	hl						; LXPC (high half of 1st arg to debug fn)
   ld		hl,iy
	push	hl						; Push proper function start addr as 1st arg
   call	_C_DBG_FN_ENTRY	; This *must* be a root function (preferably nodebug)
   add	sp,6					; Dump first 2 args
	ld		hl,(_c_dbg_fn_level)
	dec	hl
   ld		(_c_dbg_fn_level),hl
   pop	hl						; restore short first argument to user's function
   pop	bcde					; restore long first argument to user's function
   pop	px						; restore pointer first argument to user's function
#else
	exx             			; restore first argument to user's function
#endif
	jp    _fentry 				; track function nesting for debugging

; rspixffndbg_ (correlate with sspixffndbg_)
; FEATURES:
;               No    Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;           exx ;preserve any function return value
;           ld    hl,<local variable byte usage>
;           call    <thisfunction> for F80
;           jump    <thisfunction> for Z180
; INPUT   :
;           HL = Space Required for Locals
; OUTPUT  :
;           None

rspixffndbg_::
#ifdef _C_DBG_FN_EXIT
	push	hl						; Save stack frame size
	ld		hl,(_c_dbg_fn_level)
   test	hl
   jp		nz,.rspixffndbg	; Bypass if already running fn entry/exit function
   								; This only works with single threading!
	inc	hl
   ld		(_c_dbg_fn_level),hl

   exx
   push	px						; Save pointer return value as 5th arg
   push	bcde					; Save long return value as 4th arg
   push	hl						; Save short return value as 3rd arg
   ld		hl,2					; Add 2 to current SP value to make it balance with entry
   add	hl,sp
   push	hl						; Push current SP as 2ng arg for debug fn
   ld		hl,lxpc
   push	hl						; LXPC (high half of 1st arg to debug fn)
   ld		hl,(sp+16)			; Return address (RET or LRET insn in called fn)
	push	hl						; Push it as 1st arg
   call	_C_DBG_FN_EXIT		; This *must* be a root function (preferably nodebug)
   add	sp,6					; Dump first 2 args
	pop	hl						; Restore short return value
	pop	bcde					; Restore long return value
	pop	px						; Restore pointer return value
   exx
	ld		hl,(_c_dbg_fn_level)
	dec	hl
   ld		(_c_dbg_fn_level),hl
.rspixffndbg:
	pop	hl						; Restore stack frame size
#endif
	pop   iy            		; return address
	add 	hl,sp
	ld    sp,hl    			; Adjust Stack
	push  iy          		; return address
	exx             			; Restore any function return value
	jp    _fexit  				; Allow F8 Key to Function
#endasm

/*** Beginheader sspixrff_ */
/*** EndHeader */

#asm __nodebug

; sspixrff_ (correlate with rspixrff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               Yes   Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;    > DC5  exx ;preserve first argument
;           ld    hl,stack_change   -- amount to add to stack pointer
;           ld    de,register_base  -- address to save-restore registers
;           ld    bc,count -- count of register bytes to move
;               call    <thisfunction>
; INPUT   :
;           HL = Local & Register Variable Stack Usage As Negative Value
;           DE = Address to Save Registers
;           BC = Size of Register Block
; OUTPUT  :
;           None

sspixrff_::
	pop   iy            		; Ret Addr
	push  ix
	ld    ix,0
	add   ix,sp    			; Set Frame Pointer
	add   hl,sp
	ld    sp,hl    			; Adjust Stack
	ex    de,hl    			; DE = Target Stack
	ldir                		; Save Registers
	push  iy            		; Restore Ret Addr
	exx             			; restore first argument to user's function
	jp    _fentry 				; track function nesting for debugging

#endasm

/*** Beginheader sspixrffw_ */
/*** EndHeader */

#asm __nodebug
; sspixrffw_ (correlate with rspixrff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               Yes   Save/Restore register variables
;               No    Stack overflow & corruption
;               No    Function call tracing
; CALLING :
;    > DC5  exx ;preserve first argument
;           ld    hl,stack_change   -- amount to add to stack pointer
;           ld    de,register_base  -- address to save-restore registers
;           ld    bc,count -- count of register bytes to move
;               call    <thisfunction>
; INPUT   :
;           HL = Local & Register Variable Stack Usage As Negative Value
;           DE = Address to Save Registers
;           BC = Size of Register Block
; OUTPUT  :
;           None

sspixrffw_::
	pop   iy            		; Ret Addr
	push  ix
	ld    ix,0
	add   ix,sp    			; Set Frame Pointer
	add   hl,sp
	ld    sp,hl    			; Adjust Stack
	ex    de,hl    			; DE = Target Stack
	ldir                		; Save Registers
	exx             			; restore first argument to user's function
	jp    (iy)     			;return

#endasm

/*** Beginheader rspixrff_ */
/*** EndHeader */

#asm __nodebug

; rspixrff_ (correlate with sspixrff_,sspixrffw_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               Yes   Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;           exx ;preserve any function return value
;           ld    hl,stack_adj
;           ld    de,regdest
;           ld    bc,count of reg bytes
;           call    <thisfunction> for F80
;           jump    <thisfunction> for Z180
; INPUT   :
;           HL = Local & Register Variable Stack Usage
; OUTPUT  :
;           None

rspixrff_::
	pop   iy            		; return address
	push  hl            		; Save Stack Adjustment
	ld    hl,2
	add   hl,sp     			; Source of Move
	ldir            			; Restore Registers
	pop   hl        			; Stack Adjustment
	add   hl,sp
	ld    sp,hl       		; Adjust Stack
	pop   ix            		; Restore IX
	push  iy          		; return address
	exx             			; Restore any function return value
	jp    _fexit  				; Allow F8 Key to Function

#endasm


/*** Beginheader sspixff_,rspixff_ */
/*** Endheader */

#asm __nodebug

; sspixff_ (correlate with rspixff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               No    Function call tracing
; CALLING :
;              exx  ;preserve first argument
;           ld    hl,-<local variable byte usage>
;               call    <thisfunction>
; INPUT   :
;           HL = Space Required for Locals As Negative Value
; OUTPUT  :
;           None

sspixff_::
	pop   iy            		; Ret Addr
	push  ix
	ld    ix,0
	add   ix,sp    			; Set Frame Pointer
	add   hl,sp
	ld    sp,hl    			; Adjust Stack
	push  iy            		; Restore Ret Addr
	exx             			; restore first argument to user's function
	ret

; rspixff_ (correlate with sspixff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               No    Function call tracing
; CALLING :
;           exx ;preserve any function return value
;           ld    hl,<local variable byte usage>
;           call    <thisfunction> for Rabbit
; INPUT   :
;           HL = Space Required for Locals
; OUTPUT  :
;           None

rspixff_::
	pop   iy            		; return address
	add   hl,sp
	ld    sp,hl       		; Adjust Stack
	pop   ix
	push  iy          		; return address
	exx             			; Restore any function return value
	ret
#endasm

/*** Beginheader sspixffdbg_,rspixffdbg_ */
/*** Endheader */

#asm __nodebug

; sspixffdbg_ (correlate with rspixff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;              exx  ;preserve first argument
;           ld    hl,-<local variable byte usage>
;               call    <thisfunction>
; INPUT   :
;           HL = Space Required for Locals As Negative Value
; OUTPUT  :
;           None

sspixffdbg_::
	pop   iy            		; Ret Addr
	push  ix
	ld    ix,0
	add   ix,sp    			; Set Frame Pointer
	add   hl,sp
	ld    sp,hl    			; Adjust Stack
	push  iy            		; Restore Ret Addr
	exx             			; restore first argument to user's function
	jp    _fentry 				; track function nesting for debugging

; rspixffdbg_ (correlate with sspixff_)
; FEATURES:
;               Yes   Use IX as frame pointer
;               No    Save/Restore register variables
;               No    Stack overflow & corruption
;               Yes   Function call tracing
; CALLING :
;           exx ;preserve any function return value
;           ld    hl,<local variable byte usage>
;           call    <thisfunction> for Rabbit
; INPUT   :
;           HL = Space Required for Locals
; OUTPUT  :
;           None

rspixffdbg_::
	pop   iy            		; return address
	add   hl,sp
	ld    sp,hl       		; Adjust Stack
	pop   ix
	push  iy          		; return address
	exx             			; Restore any function return value
	jp    _fexit  				; Allow F8 Key to Function
#endasm


/*** BeginHeader intr */
/*** EndHeader */
#asm
intr::
   _EXP_IF_RAB6K        ; Try to keep p/p' relationship constant
	pop pz
   pop py
   pop px
   pop pw
   exp
   pop pz
   pop py
   pop px
   pop pw
	pop iy
   pop ix
   pop jkhl
   pop bcde
   exx
   pop hl
   ex jk, hl
   pop bcde
   pop af
   ex af, af'
   pop hl
   ld lxpc, hl
   pop ip
   pop hl
   pop af
   ipres
   ret
#endasm

/*** BeginHeader entint_ */
/*** EndHeader */
#asm
entint_::
	pop af ; Tricky but necessary since hl must be used for other purposes.
          ; af now has the return address.
   push ip    ; (-1)
   ld hl,lxpc
   push hl    ; (-3) Saves lxpc
   ex af, af'
   push af    ; (-5) Saves af'
   push bcde  ; (-9)
   ex jk, hl
   push hl    ; (-11) Saves jk
   exx
   push bcde  ; (-15) Saves bcde'
   push jkhl  ; (-19) Saves jkhl'
   push ix    ; (-21)
   push iy    ; (-23)
   push pw    ; (-27)
   push px    ; (-31)
   push py    ; (-35)
   push pz    ; (-39)
   exp
   push pw    ; (-43)
   push px    ; (-47)
   push py    ; (-51)
   push pz    ; (-55)
   _EXP_IF_RAB6K        ; Try to keep p/p' relationship constant
   exx
   ex af, af'
   push af
   pop hl

   jp (hl)

#endasm

/*** Beginheader sser3,sser2,sser1 */
/*** Endheader */

#asm __nodebug
sser3::
	ld 	hl,-ERR_STACKCORRUPTED	  		; Stack Corrupted Runtime Error
	jp 	.sser1a
sser2::
	ld 	hl,-ERR_AUXSTACKOVERFLOW		; AUX_STACK Overflow
	jr 	.sser1a
sser1::
	ld 	hl,-ERR_STACKOVERFLOW   		; Stack Overflow Runtime Error
.sser1a:
	push	hl
	call	exception
	add	sp, 2
	call	exit				; if return from runtime err handler, exit out!
#endasm


/*** Beginheader _param2, _param3  */
/*** Endheader */
#asm __nodebug
; _param2: Read Two Parameters on Stack
;		HL = First Parameter
;		DE = Second Parameter
;		BC = (junk)
;
; _param3: Read Three Parameters on Stack
;		HL = First Parameter
;		DE = Second Parameter
;		BC = Third Parameter
;
;    deprecated: Replace with "ld bcde, (sp+4)" in calling routine.
;						first parameter should still be in register HL.

_param2::
	; fall through to common code in _param3
_param3::
	ld		hl, (sp+4)			; only necessary if caller trashed HL
	ld		bcde, (sp+6)
	ret
#endasm

/*** beginheader flt_0, cf_le, cf_lt, cf_ge, cf_gt */
// float comparisons
/*** endheader */

#asm __nodebug
; floating comparision routines
flt_0::
	pop   iy 					;return address
	ld 	a,b   				;exp
	rl 	c
	rla      					;a has exponent
	or 	a  					; zero exponent is zero floating number
	jp 	nz,.tru
	jp 	.fals
cf_ge::
	pop   iy 					;return address
	pop   hl 					;least sig
	or 	a  					;clear carry
	sbc   hl,de 				;stack least -de
	ex 	de,hl 				;save least result
	pop   hl 					;most sig stack
	ld 	a,h   				;save sign
	sbc   hl,bc 				;most sig dif
	ld 	c,a   				;save sign
	jr 	nz,.cfgt1		;cant be zero
	ex 	af,af'   			;save carry
	ld 	a,d
	or 	e  					;see if zero
	jp 	z,.tru 		;ok
	jr 	.cfgt1a
; stack>bcde
cf_gt::
	pop   iy 					;return address
	pop   hl 					;least sig
	or 	a  					;clear carry
	sbc   hl,de 				;stack least -de
	ex 	de,hl 				;save least result
	pop   hl 					;most sig stack
	ld 	a,h   				;save sign
	sbc   hl,bc 				;most sig dif
; result in hlde carry set if stack less
	ld 	c,a   				;save sign of stack in c
.cfgt1:
	ex 	af,af'   			;save carry
.cfgt1a:
	ld 	a,b
	or 	c  					;if both signs neg or signs dif reverse
	jp 	m,.cfgt2  	;reverse sense
	ex 	af,af'   			;get carry
	jp 	c,.fals   	;stack less
	ld 	a,h
	or 	l
	or 	d
	or 	e  					;zero in a
	jp 	z,.fals   	;stack not greater
	jp 	.tru
.cfgt2:
	ex 	af,af'   			;get carry
	jp 	c,.tru 				;stack less for negs means is greater
	jp 	.fals
.tru:
	ld 	hl,1
	or 	l
	jp 	(iy)  				;return
.fals:
	clr	hl
	and   l
	jp 	(iy)
cf_le::
	pop   iy 					;return address
	pop   hl 					;least
	or 	a  					;clc
	sbc   hl,de 				;stack - bcde least
	ex 	de,hl 				;save least result
	pop   hl						;most
	ld 	a,h   				;save sign
	sbc   hl,bc 				;most result
	ld 	c,a   				;save sign
	jr 	nz,.cflt1 	;not zero
	ex 	af,af'   			;save carry
	ld 	a,d
	or 	e
	jp 	z,.tru
	jr 	.cflt1a
; stack<bcde
cf_lt::
	pop   iy 					;return address
	pop   hl 					;least
	or 	a  					;clc
	sbc   hl,de 				;stack - bcde least
	ex 	de,hl 				;save least result
	pop   hl 					;most
	ld 	a,h   				;save sign
	sbc   hl,bc 				;most result
; result in hlde carry set if stack less
	ld		c,a   				;save signs in b and c
.cflt1:
	ex 	af,af'   			;save carry
.cflt1a:
	ld 	a,b
	or 	c  					;if both neg or dif signs reverse
	jp 	m,.cflt2		; go reverse sense
	ex 	af,af'
	jp 	c,.tru 		;if stack<bcde
	jp 	.fals
; case of both neg, revers sense
.cflt2:
	ld 	a,h
	or 	l
	or 	d
	or 	e
	jr 	z,.fals		;not greater
	ex 	af,af'   			;get carry
	jp 	c,.fals
	jp 	.tru
#endasm

/*** beginheader cf_eq, cf_ne */
// comparisons for float
/*** endheader */
#asm __nodebug
; Test equality of 32 bit float BCDE vs. top 2 words of stack under ret
; We can improve on this by having the compiler inline this or pass values
; in jkhl and bcde (instead of bcde and on the stack and expect us to pop it)
; Generated code may use HL or Z flag as result of test and expects us to
; remove the second float from the stack.
; equal if (F1 == F2 || ((F1 | F2) == 0x80000000))
cf_ne::
	pop	af					; temp holding spot for return address
	pop	jkhl				; 32-bit float to test against bcde
	push	af					; push return address back to stack
	xor	a					; if equal, return 0
	jr 	.ftest
cf_eq::
	pop	af					; temp holding spot for return address
	pop	jkhl				; 32-bit float to test against bcde
	push	af					; push return address back to stack
	ld		a, 1				; if equal, return 1

.ftest:
	cp		jkhl, bcde
	jr		eq, .feq

	; now test for (0.0 == -0.0) or (-0.0 == 0.0)
	or		jkhl, bcde
	ld		bcde, 1
	rrc	1, bcde			; load 0x80000000 into bcde and compare to (F1 | F2)
	cp		jkhl, bcde
	jr		eq, .feq

.fneq:
	xor	0x01				; toggle result

.feq:
	clr	hl
	ld		l, a
	test	hl				; set Z flag
	ret
#endasm

/*** beginheader swap4_ */
/*** endheader */
#asm __nodebug
; swap bcde and stack
swap4_::
	exx
	pop   hl 					;ret address
	pop   bcde
	exx
	push  bcde
	exx
	jp 	(hl)  				;return
#endasm

/*** beginheader swaps_ */
/*** endheader */
#asm __nodebug
; swap bcde with double pointed to by (hl+sp)
swaps_::
	add   hl,sp
	ld 	a,(hl)
	ld 	(hl),e
	ld 	e,a   				; swap e and (hl)
	inc   hl
	ld 	a,(hl)
	ld 	(hl),d
	ld 	d,a   				; swap d and (hl+1)
	inc   hl
	ld 	a,(hl)
	ld 	(hl),c
	ld 	c,a   				; swap c and (hl+2)
	inc   hl
	ld 	a,(hl)
	ld 	(hl),b
	ld 	b,a   				; swap b and (hl+3)
	ret
#endasm

/*** beginheader Hi_Bl, Hs_Bl */
// char/int to long conversions for value in registers
/*** endheader */

#asm __nodebug
; convert hl signed to bcde long
; DEVNOTE: consider modifying compiler to always inline this (5 opcode bytes)
;		call Hi_Bl is 3 opcode bytes -- inlining will allow for optimizations
Hs_Bl::
Hi_Bl::
	ld		de, hl		; load lower 16-bits of bcde
	rl		hl				; load sign bit into carry
	sbc	hl, hl		; sign-extend hl
	ld		bc, hl		; and store in upper 16-bits of bcde
	ret
#endasm

/*** beginheader  c_asr, c_usr */
/* Rabbit Optimized versions of left and right shift
 *  c_asr - signed right shift (preserves sign)
 *  c_usr - unsigned right shift
 * in:    de - number to shift
 *        hl - amount of shift
 * out:   hl - shifted number
 *
 * Note that 0<=hl<=15 or else hl result is undefined.
 * ANSI spec states that shifts (hl values) equal
 * to or greater than the
 * number of bits in the word(de length) or undefined.
 *
 */
/*** endheader ***/
#asm __nodebug
c_asr::
	bit 	7, d    				; test sign
	jr 	z, c_usr     		; jump to handle positive case (i.e., unsigned)
	ld 	a, l
	ex 	de, hl
	rra
	jr 	nc, .utl_asr2
	scf                 		; set carry (unfortunately, rr preserves carry)
	rr 	hl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_asr2:
	rra
	jr 	nc,.utl_asr3
	scf             			; set carry
	rr 	hl
	scf                 		; set carry
	rr 	hl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_asr3:
	rra
	jr 	nc, .utl_asr4
	rr 	hl
	rr 	hl
	rr 	hl
	rr 	hl
	ld 	de, 0xF000   		; 6 clocks (using "scf" per rr would be no better faster)
	or 	hl, de       		; sets upper part of high byte
.utl_asr4:
	rra
	ret 	nc
	ld 	l,h
	ld 	h,0XFF
	ret
c_usr::
	ld 	a, l 					; unsigned right shift
	ex 	de, hl
	rra
	jr 	nc, .utl_usr2
	or 	a                	; clear carry
	rr 	hl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_usr2:
	rra
	jr 	nc,.utl_usr3
	or 	a                	; clear carry
	rr 	hl
	or 	a                	; clear carry
	rr 	hl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_usr3:
	rra
	jr		nc, .utl_usr4
	rr 	hl
	rr 	hl
	rr 	hl
	rr 	hl
	ld 	de, 0x0FFF   		; 6 clocks (using "or a" per rr would be no better faster)
	and 	hl, de      		; clears upper part of high byte
.utl_usr4:
	rra        					; test for shift 8
	ret 	nc
	ld 	l,h          		; shift 8
	ld 	h,0
	ret

#endasm

/*** beginheader c_asl ***/
/* Rabbit Optimized versions of left and right shift
 *  c_asl - signed and unsigned left shift
 * in:    de - number to shift
 *        hl - amount of shift
 * out:   hl - shifted number
 *
 */
/*** endheader ***/
#asm __nodebug
   align odd
c_asl::
	ld 	a,l     				; left shift (sign doesn't matter)
	ex 	de,hl
	rra
	jr 	nc,.utl_asl2
	add 	hl,hl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_asl2:
	rra
	jr 	nc,.utl_asl3
 	sll     2, jkhl
	or 	a            		; test for zero
	ret 	z           		; return if zero to make small shifts faster
.utl_asl3:
	rr a                   ; 2 byte to preserve alignment for 5K/6K
	jr 	nc,.utl_asl4
	sll     4, jkhl
.utl_asl4:
	rra
	ret 	nc
	ld 	h,l
	ld 	l,0
	ret
#endasm

/*** beginheader Bf_Hc, Bf_Hu, Bf_Hi */
/*** endheader */
#asm __nodebug
; convert floating to integer, character
Bf_Hc::
Bf_Hs::
Bf_Hu::
Bf_Hi::
	call  Bf_Bl 				;convert tolong
	ex 	de,hl 				;put least in hl
	ret
#endasm

/*** Beginheader bound_e */
/*** Endheader */

#asm __nodebug
; BOUND.E : Out of Bounds on Pointer Store
;
; INPUT  :
;          HL = Pointer
; OUTPUT :
;          None ( Does Not Return )

bound_e::
	ld		hl, -ERR_BADPOINTER
	push	hl
	call	exception
	add	sp, 2
	call	exit				; if return from runtime err handler, exit out!
#endasm

/*** Beginheader abound_e */
/*** Endheader */

#asm __nodebug
; ABOUND.E : Check for Array Index in Range
;
; INPUT  :
;          None
; OUTPUT :
;          None

abound_e::
	ld		hl, -ERR_BADARRAYINDEX
	push	hl
	call	exception
	add	sp, 2
	call	exit
#endasm


/*** Beginheader BIT, bit */
// if bitnum is not a constant value use this function
// otherwise generate inline code
// use C wrapper because of conflict when defining a label
// with same name as the assembly instruction
__root unsigned BIT(void *address, unsigned int bitnum);
__root unsigned bit(void *address, unsigned int bitnum);
/*** Endheader */

__nouseix __nodebug __root unsigned BIT(void *address, unsigned int bitnum)
{
#asm
	call   __getmask__
	and   (hl)
	clr	hl
	ret   z
	inc   hl
#endasm
}

#asm
   bit:: equ BIT
#endasm

/******************************************************************************/

/*** BeginHeader _disable_peripheral_interrupts */
void _disable_peripheral_interrupts(void);
/*** EndHeader */

#asm
_disable_peripheral_interrupts::
   ; disable slave port interrupt
   ioi	ld a,(SPCR)
   and	0xfc
   ioi   ld (SPCR),a

   ; disable all timer A interrupts
   ld		a,(TACSRShadow)
   and	0x01
   ld		(TACSRShadow),a
   ioi 	ld (TACSR),a

   ; disable timer B interrupt
   ld		a,(TBCRShadow)
   and   0xfc
   ld		(TBCRShadow),a
   ioi	ld (TBCR),a

	xor	a
   ld		(TBCSRShadow),a
   ioi	ld (TBCSR),a

   ; disable external interrupt 0
   ld		a,(I0CRShadow)
   and	0xfc
   ld		(I0CRShadow),a
   ioi	ld (I0CR),a

   ; disable external interrupt 1
   ld		a,(I1CRShadow)
   and	0xfc
   ld		(I1CRShadow),a
   ioi	ld (I1CR),a

	; disable PWM interrupt
   ld		a,(PWL0RShadow)
   and	0xf1
   ld		(PWL0RShadow),a
   ioi	ld (PWL0R),a

   ; disable quadrature decoder interrupt
   ld		a,(QDCRShadow)
   and	0xfc
   ld		(QDCRShadow),a
   ioi	ld (QDCR),a

   ; disable input capture interrupt
   ld		a,(ICCRShadow)
   and	0xfc
   ld		(ICCRShadow),a
   ioi	ld (ICCR),a
	ret
#endasm

/*** BeginHeader _disable_stack_limit_interrupt */
void _disable_stack_limit_interrupt(void);
/*** EndHeader */

#asm
_disable_stack_limit_interrupt::
   ; disable stack limit checking
	xor	a
   ld		(STKCRShadow),a
   ioi	ld (STKCR),a
	ret
#endasm

/*** BeginHeader _disable_serial_interrupt */
void _disable_serial_interrupt(char *shadow, int port);
/*** EndHeader */

__nodebug void _disable_serial_interrupt(char *shadow, int port)
{
#asm
   ld		a,(hl)
   and	0xfc
   ld		(hl),a
   ld		hl,(sp+@sp+port)
   ioi	ld (hl),a
#endasm
}

/******************************************************************************/

/*** BeginHeader _disable_all_interrupts */
void _disable_all_interrupts(void);
/*** EndHeader */
#asm

_disable_all_interrupts::
	; disable periodic interrupt
   ioi	ld	a,(GCSR)
   and	0xfc
   ioi	ld (GCSR),a

   ; disable secondary watchdog interrupt
   ld		a,0x5a
   ioi	ld (SWDTR), a
   ld		a,0x52
   ioi	ld (SWDTR), a
   ld		a,0x44
   ioi	ld (SWDTR), a

	call	_disable_peripheral_interrupts
	call	_disable_stack_limit_interrupt
c	_disable_serial_interrupt(&SACRShadow, SACR);
c	_disable_serial_interrupt(&SBCRShadow, SBCR);
c	_disable_serial_interrupt(&SCCRShadow, SCCR);
c	_disable_serial_interrupt(&SDCRShadow, SDCR);
c	_disable_serial_interrupt(&SECRShadow, SECR);
c	_disable_serial_interrupt(&SFCRShadow, SFCR);

   ret
#endasm

/*** BeginHeader _unexp_interrupt */
__root void _unexp_interrupt(void);
/*** EndHeader */

#asm __nodebug __root
_unexp_interrupt::
	; runtime error # for unexpected interrupt loaded into hl in vector code
	push	hl
	clr	hl
	push	hl
	call	_init_bad_interrupts
   add	sp,2
	ld		hl,(sp+0)

   push	ip
   push	ip
   pop	de
   ld		a,e
   and	3
   jr		z,.ip_level0
	ipres
.ip_level0:
	call	exception
	add	sp, 2				; if runtime error handler returns, continue on!

	ret
#endasm

/*** Beginheader SET, set */
// if bitnum is not a constant value use this function
// otherwise generate inline code
// use C wrapper because of conflict when defining a label
// with same name as the assembly instruction
void SET(void *address, unsigned int bitnum);
void set(void *address, unsigned int bitnum);
/*** Endheader */

__nouseix __nodebug __root void SET(void *address, unsigned int bitnum)
{
#asm
	call  __getmask__
	or    (hl)
	ld    (hl),a
#endasm
}

#asm
   set:: equ SET
#endasm

/*** Beginheader RES */
// if bitnum is not a constant value use this function
// otherwise generate inline code
// use C wrapper because of conflict when defining a label
// with same name as the assembly instruction
void RES(void *address, unsigned int bitnum);
void res(void *address, unsigned int bitnum);
/*** Endheader */

__nouseix __nodebug __root void RES(void *address, unsigned int bitnum)
{
#asm
	call  __getmask__
	cpl
	and   (hl)
	ld    (hl),a
#endasm
}

#asm
   res:: equ RES
#endasm

/*** Beginheader ipset */
void ipset(int);
/*** Endheader */
#fatal "ipset() is always inlined.  It cannot be used as a reference."

/*** Beginheader ipres */
void ipres(void);
/*** Endheader */
#fatal "ipres() is always inlined.  It cannot be used as a reference."

/*** Beginheader __getmask__ */
/*** Endheader */

// helper function for BIT, SET, RES
// INPUT:
// register HL:  address of field containing desired bit
// has a hidden pseudo-argument return address as the calling
// function's parameters are not repushed; remaining parameters
// same as calling function's parameters
// OUTPUT:
// register A:   mask based upon bitnum % 8
// register HL:  bit address adjusted for modulo of bitnum
__nouseix __nodebug char __getmask__(void *retaddr, void *bitaddr, unsigned int bitnum)
{
	static const char mask[] = {1,2,4,8,16,32,64,128};
#asm
	ld    iy,bitnum
	add   iy,sp     			;point to bit number
	ld    a,(iy)   			;bit num
.utl_bit1:
	cp    8
	jr    c,.utl_bit2   			; if less than 8 jr
	inc   hl            		; next byte
	sub   a,8
	jr    .utl_bit1
.utl_bit2:
	ld    e,a     				;bit num
	ld    d,0
	ld    iy,mask
	add   iy,de
	ld    a,(iy)   			;mask
#endasm
}

/*** beginheader S_right */
/*** endheader */

#asm __nodebug
; Unbiased rounding: If less than an infinite number of
; bits is lost as a result of shifting to right, adding last bit lost
; to remaining number produces a biased result because the average
; amount added is +1/2 but the average amount lost is -1/2 only if
; a very large number of bits was shifted off. Or'ing all bits lost
; into least bit retained is unbiased regardless of number of bits lost.
; Additional advantage is that no overflow can happen as a result of the
; round operation. Disadvantage is that standard deviation is larger.


; shift right (lde- 24 bits) up to 23 counts per C register
; 298 clocks worst case HD64180, shift right 23 positions
; returns A non zero if any bits shifted off end to right
S_right::      ;ext entry, c is positive or zero, h undisturbed
.utl_shrpc:
	xor   a  					; .keep memory if any bits lost to right
	ld 	b,a   				; .b is zero
	bit   4,c   				; .test for 16
	jr 	z,.utl_shrpa1 		; .
	or 	d  					; .
	or 	e  					; .remember if any 1's in 16 bits lost
	ld 	e,l   				; .
	ld 	l,b   				; .zero, shifting right 16 positions
	ld 	d,b   				; .zero
	jr 	.utl_shrpa5   	  	; .continue, 8 and 16 both not possible
.utl_shrpa1:  bit   3,c   	; test for 8
	jr 	z,.utl_shrp5a 	  	;.
	or 	e  					; remember if any 1's in bits shifted off
	ld 	e,d   				; shift right 8 bits
	ld 	d,l   				; shift right 8 positions
	ld 	l,b   				; zero
.utl_shrpa5:
	or 	a  					; .see if anything in a
	jr 	z,.utl_shrp5a		; .
	or 	80h   				; .set high bit to perserve nonzero state of A
.utl_shrp5a:
	bit   2,c   				; .test for 4
	jr 	z,.utl_shrpa6		;.
; shift 4 right keeping track of any 1's shifted off in a
	srl   l  					; .
	rr 	de
	rra
	srl   l
	rr 	de
	rra
	srl   l
	rr 	de
	rra
	srl   l
	rr 	de
	rra      					; .
.utl_shrpa6:
	bit   1,c   				; .test for 2
	jr 	z,.utl_shrpa7 		; .
	srl   l  					; .
	rr 	de
	rra
	srl   l
	rr 	de
	rra      					; .
.utl_shrpa7:
	bit   0,c   				; .test for 1 more shift
	jr 	z,.utl_shrpa8 		; .
	srl   l  					; .
	rr 	de
	rra      					; .
.utl_shrpa8:
; now if A is non zero a 1 bit was lost at right at some point
	ret      					; . 298 (no less) clocks worst case shift right 23 positions
#endasm


/*** Beginheader 	RevBitTable */
extern const char RevBitTable[];
#define BIT_REVERSE_TABLE
/*** Endheader */


// Lookup table for bit reversal of SPI data
const char RevBitTable[] = {
0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

/*** BeginHeader */
#endif
/*** EndHeader */


