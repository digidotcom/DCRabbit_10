/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __SYSIODEFS_LIB
#define __SYSIODEFS_LIB
/*** EndHeader */

   /*** BeginHeader  */

#define 	R2000		0x0
#define	R3000		0x0100
#define	R4000		0x0200
#define  R5000    0x0300
#define  R6000    0x0400
#define REV0		0x0
#define REV1		0x1
#define REV2		0x2
#define REV3		0x3				// Rabbit Processor		Code(s) printed on chip
#define R2000_R0 (R2000|REV0)		// 2000 						IQ2T
#define R2000_R1 (R2000|REV1)		// 2000						IQ3T
#define R2000_R2 (R2000|REV2)		// 2000						IQ4T
#define R2000_R3 (R2000|REV3)		// 2000						IQ5T
#define R3000_R0 (R3000|REV0)		// 3000						IL1T or IZ1T
#define R3000_R1 (R3000|REV1)		// 3000A						IL2T or IZ2T
#define R4000_R0 (R4000|REV0)		// 4000						????
#define R5000_R0 (R5000|REV0)		// 5000						????
#define R6000_R0 (R6000|REV0)		// 6000
// Masks to retrieve CPU ID or Revision number
#define CPU_ID_MASK(x) (x & 0x1f00)
#define CPU_REV_MASK(x) (x & 0x1f)

// The _RAB4K macro is intended to be used for code which uses Rabbit 4000/5000 instructions
// _RAB4KPERI is intended for when a Rabbit4000 is being used just for its peripherals
// i.e. it _may_ be running in R3000 compatibility mode.  Generally, if _RAB4KPERI is
// used for conditional compilation, then tests for _RAB4K should be _within_ those sections
// (the other way around is pretty useless).
// For Rabbit5000 (Piper), we always define _RAB4K as well as _RAB5K since there were no
// instruction set differences.
#if CPU_ID_MASK(_CPU_ID_) >= R4000
	#define _RAB4K 1
   #if CPU_ID_MASK(_CPU_ID_) >= R6000
		#define _RAB6K 4
		#define _RAB5K 0
  		#define _RAB6KPERI 4
		#define _RAB5KPERI 2
	   #define _RAB4KPERI 0
   #elif CPU_ID_MASK(_CPU_ID_) >= R5000
	   #define _RAB5K 2
	   #define _RAB6K 0
	   #define _RAB6KPERI 0
	   #define _RAB5KPERI 2
	   #define _RAB4KPERI 0
   #else
		#define _RAB6K 0
		#define _RAB5K 0
	   #define _RAB6KPERI 0
	   #define _RAB5KPERI 0
	   #define _RAB4KPERI 1
   #endif
#else //Rabbit 3000
	#define _RAB4K 0
	#define _RAB5K 0
	#define _RAB6K 0
   #define _RAB4KPERI 0    // Default to assuming is not a Rabbit 4000.
   #define _RAB5KPERI 0    // Default to assuming is not a Rabbit 5000.
   #define _RAB6KPERI 0    // Default to assuming is not a Rabbit 6000.
#endif

/*** #defines for the registers ***/
#define GCSR      0x00  // global control/status register
#define RTCCR     0x01  // real time clock control register
#define RTC0R     0x02  // real time clock register 0
#define RTC1R     0x03  // real time clock register 0
#define RTC2R     0x04  // real time clock register 0
#define RTC3R     0x05  // real time clock register 0
#define RTC4R     0x06  // real time clock register 0
#define RTC5R     0x07  // real time clock register 0
#define WDTCR     0x08  // watch-dog timer control register
#define WDTTR     0x09  // watch-dog timer test register
#define GCM0R     0x0A  // global clock modulator register 0
#define GCM1R     0x0B  // global clock modulator register 1
#define SWDTR     0x0C  // secondary watchdog timer register
#define GPSCR     0x0D  // global power save control register
#define GOCR      0x0E  // global output control register
#define GCDR      0x0F  // global clock double register

#define MMIDR     0x10  // MMU program offset register
#define STACKSEG  0x11  // MMU stack base register
#define STACKSEGL 0x1A  // MMU stack base register - equates to 0x11
#define STACKSEGH 0x1B  // MMU stack base register - high 8 bits (4 valid)
#define DATASEG   0x12  // MMU data base register
#define DATASEGL  0x1E  // MMU data base register - equates to 0x12
#define DATASEGH  0x1F  // MMU data base register - high 8 bits (4 valid)
#define SEGSIZE   0x13  // MMU common bank area register
#define MB0CR     0x14  // memory bank 0 control register
#define MB1CR     0x15  // memory bank 1 control register
#define MB2CR     0x16  // memory bank 2 control register
#define MB3CR     0x17  // memory bank 3 control register
#define MECR      0x18  // MMU expanded code register
#define MTCR      0x19  // memory timing control register
#define STKSEGL   0x1A  // stack seg low register
#define STKSEGH   0x1B  // stack seg high register
#define BDCR      0x1C  // breakpoint/debug control register
#define MACR      0x1D  // memory alternate control register
#define DATSEGL   0x1E  // data seg low register
#define DATSEGH   0x1F  // data seg high register

#define SPD0R     0x20  // slave port data 0 register
#define SPD1R     0x21  // slave port data 1 register
#define SPD2R     0x22  // slave port data 2 register
#define SPSR      0x23  // slave port status register
#define SPCR      0x24  // slave port control register
#define IHCR      0x28  // I/O handshake control register
#define IHSR      0x29  // I/O handshake select register
#define IHTR      0x2A  // I/O handshake timeout register
#define GROM      0x2C  // global ROM configuration register
#define GRAM      0x2D  // global RAM configuration register
#define GCPU      0x2E  // global CPU configuration register
#define GREV      0x2F  // global revision register

#define PADR      0x30  // port A data register

#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define PHPER  0x31  // port H pullup enable register
	#define PHALR  0x32  // port H alternate low register
	#define PHAHR  0x33  // port H alternate high register
	#define PHDR   0x34  // port H data register
	#define PHFR   0x35  // port H function register
	#define PHDCR  0x36  // port H drive control register
	#define PHDDR  0x37  // port H data direction register
#endif

#if _RAB6K
	#define PFDR   0x38  // port F data register
	#define PFALR  0x3A  // port F alternate low register
	#define PFAHR  0x3B  // port F alternate high register
	#define PFCR   0x3C  // port F control register
	#define PFFR   0x3D  // port F function register
	#define PFDCR  0x3E  // port F drive control register
	#define PFDDR  0x3F  // port F data direction register
#endif

#define PBDR      0x40  // port B data register
#define PBDDR     0x47  // port B data direction register

#if _RAB6K
	#define PGDR   0x48  // port G data register
	#define PGALR  0x4A  // port G alternate low register
	#define PGAHR  0x4B  // port G alternate high register
	#define PGCR   0x4C  // port G control register
	#define PGFR   0x4D  // port G function register
	#define PGDCR  0x4E  // port G drive control register
	#define PGDDR  0x4F  // port G data direction register
#endif

#define PCDR      0x50  // port C data register
#define PCDDR     0x51  // port C data direction register
#define PCALR     0x52  // port C alternate low register
#define PCAHR     0x53  // port C alternate high register
#define PCDCR     0x54  // port C drive control register
#define PCFR      0x55  // port C function register

#define ICCSR     0x56  // Input Capture Control/Status Register
#define ICCR      0x57  // Input Capture Control Register
#define ICT1R     0x58  // Input Capture Channel 1 Trigger Register
#define ICS1R     0x59  // Input Capture Channel 1 Source Register
#define ICL1R     0x5A  // Input Capture Channel 1 LSB
#define ICM1R     0x5B  // Input Capture Channel 1 MSB
#define ICT2R     0x5C  // Input Capture Channel 2 Trigger Register
#define ICS2R     0x5D  // Input Capture Channel 2 Source Register
#define ICL2R     0x5E  // Input Capture Channel 2 LSB
#define ICM2R     0x5F  // Input Capture Channel 2 MSB

#define PDDR      0x60  // port D data register
#define PDALR     0x62  // port D alternate low register
#define PDAHR     0x63  // port D alternate high register
#define PDCR      0x64  // port D control register
#define PDFR      0x65  // port D function register
#define PDDCR     0x66  // port D drive control register
#define PDDDR     0x67  // port D data direction register
#define PDB0R     0x68  // port D bit 0 register
#define PDB1R     0x69  // port D bit 1 register
#define PDB2R     0x6A  // port D bit 2 register
#define PDB3R     0x6B  // port D bit 3 register
#define PDB4R     0x6C  // port D bit 4 register
#define PDB5R     0x6D  // port D bit 5 register
#define PDB6R     0x6E  // port D bit 6 register
#define PDB7R     0x6F  // port D bit 7 register

#define PEDR      0x70  // port E data register
#define PEALR     0x72	// port E alternate low register
#define PEAHR     0x73  // port E alternate high register
#define PECR      0x74  // port E control register
#define PEFR      0x75  // port E function register
#define PEDCR     0x76  // port E drive control register
#define PEDDR     0x77  // port E data direction register
#define PEB0R     0x78  // port E bit 0 register
#define PEB1R     0x79  // port E bit 1 register
#define PEB2R     0x7A  // port E bit 2 register
#define PEB3R     0x7B  // port E bit 3 register
#define PEB4R     0x7C  // port E bit 4 register
#define PEB5R     0x7D  // port E bit 5 register
#define PEB6R     0x7E  // port E bit 6 register
#define PEB7R     0x7F  // port E bit 7 register

#define IB0CR     0x80  // I/O bank 0 control register
#define IB1CR     0x81  // I/O bank 1 control register
#define IB2CR     0x82  // I/O bank 2 control register
#define IB3CR     0x83  // I/O bank 3 control register
#define IB4CR     0x84  // I/O bank 4 control register
#define IB5CR     0x85  // I/O bank 5 control register
#define IB6CR     0x86  // I/O bank 6 control register
#define IB7CR     0x87  // I/O bank 7 control register

#define PWL0R     0x88  // PWM channel 0 LSB register
#define PWM0R     0x89  // PWM channel 0 MSB register
#define PWL1R     0x8A  // PWM channel 1 LSB register
#define PWM1R     0x8B  // PWM channel 1 MSB register
#define PWL2R     0x8C  // PWM channel 2 LSB register
#define PWM2R     0x8D  // PWM channel 2 MSB register
#define PWL3R     0x8E  // PWM channel 3 LSB register
#define PWM3R     0x8F  // PWM channel 3 MSB register

#define QDCSR     0x90  // quadrature decode control/status register
#define QDCR      0x91  // quadrature decode control register
#define QDC1R     0x94  // quadrature decode channel 1 count
#define QDC1HR    0x95  // quadrature decode channel 1 count
#define QDC2R     0x96  // quadrature decode channel 2 count
#define QDC2HR    0x97  // quadrature decode channel 2 count

#define I0CR      0x98  // interrupt 0 control register
#define I1CR      0x99  // interrupt 1 control register

#define TACSR     0xA0  // timer A control/status register
#define TAPR      0xA1  // timer A prescale register
#define TAT1R     0xA3  // timer A time constant 1 register
#define TACR      0xA4  // timer A control register
#define TAT2R     0xA5  // timer A time constant 2 register
#define TAT8R     0xA6  // timer A time constant 8 register
#define TAT3R     0xA7  // timer A time constant 3 register
#define TAT9R     0xA8  // timer A time constant 9 register
#define TAT4R     0xA9  // timer A time constant 4 register
#define TAT10R    0xAA  // timer A time constant 10 register
#define TAT5R     0xAB  // timer A time constant 5 register
#define TAT6R     0xAD  // timer A time constant 6 register
#define TAT7R     0xAF  // timer A time constant 7 register

#if CPU_ID_MASK(_CPU_ID_) >= R6000
	#define TAT11R 0xAC  // timer A time constant 11 register
	#define TAT12R 0xAE  // timer A time constant 12 register
#endif

#define TBCSR     0xB0  // timer B control/status register
#define TBCR      0xB1  // timer B control register
#define TBM1R     0xB2  // timer B match B1 register, MSB
#define TBL1R     0xB3  // timer B match B1 register, LSB
#define TBM2R     0xB4  // timer B match B2 register, MSB
#define TBL2R     0xB5  // timer B match B2 register, LSB
#define TBSL1R    0xBA  // timer B step 1 register, LSB
#define TBSM1R    0xBB  // timer B step 1 register, MSB
#define TBSL2R    0xBC	// timer B step 2 register, LSB
#define TBSM2R    0xBD  // timer B step 2 register, MSB
#define TBCMR     0xBE  // timer B current count register, MSB
#define TBCLR     0xBF  // timer B current count register, LSB

#define SADR      0xC0  // serial port A data register
#define SAAR      0xC1  // serial port A address register
#define SALR      0xC2  // serial port A long stop register
#define SASR      0xC3  // serial port A status register
#define SACR      0xC4  // serial port A control register
#define SAER      0xC5  // serial port A extended register
#define SADLR     0xC6  // serial port A divider low register
#define SADHR     0xC7  // serial port A divider high register

#define SEDR      0xC8  // serial port E data register
#define SEAR      0xC9  // serial port E address register
#define SELR      0xCA  // serial port E long stop register
#define SESR      0xCB  // serial port E status register
#define SECR      0xCC  // serial port E control register
#define SEER      0xCD  // serial port E extended register
#define SEDLR     0xCE  // serial port E divider low register
#define SEDHR     0xCF  // serial port E divider high register

#define SBDR      0xD0  // serial port B data register
#define SBAR      0xD1  // serial port B address register
#define SBLR      0xD2  // serial port B long stop register
#define SBSR      0xD3  // serial port B status register
#define SBCR      0xD4  // serial port B control register
#define SBER      0xD5  // serial port B extended register
#define SBDLR     0xD6  // serial port B divider low register
#define SBDHR     0xD7  // serial port B divider high register

#define SFDR      0xD8  // serial port F data register
#define SFAR      0xD9  // serial port F address register
#define SFLR      0xDA  // serial port F long stop register
#define SFSR      0xDB  // serial port F status register
#define SFCR      0xDC  // serial port F control register
#define SFER      0xDD  // serial port F extended register
#define SFDLR     0xDE  // serial port F divider low register
#define SFDHR     0xDF  // serial port F divider high register

#define SCDR      0xE0  // serial port C data register
#define SCAR      0xE1  // serial port C address register
#define SCLR      0xE2  // serial port C long stop register
#define SCSR      0xE3  // serial port C status register
#define SCCR      0xE4  // serial port C control register
#define SCER      0xE5  // serial port C extended register
#define SCDLR     0xE6  // serial port C divider low register
#define SCDHR     0xE7  // serial port C divider high register

#define PWBAR     0xE8  // PWM Block Access Register
#define PWBPR     0xE9  // PWM Block Pointer Register

#define SDDR      0xF0  // serial port D data register
#define SDAR      0xF1  // serial port D address register
#define SDLR      0xF2  // serial port D long stop register
#define SDSR      0xF3  // serial port D status register
#define SDCR      0xF4  // serial port D control register
#define SDER      0xF5  // serial port D extended register
#define SDDLR     0xF6  // serial port D divider low register
#define SDDHR     0xF7  // serial port D divider high register

#define TCBAR     0xF8  // Timer C Block Access Register
#define TCBPR     0xF9  // Timer C Block Pointer Register

#define RTUER     0x300 // Real Time Clock User Enable Register
#define SPUER     0x320 // Slave Port User Enable Register
#define PAUER     0x330 // Parallel Port A User Enable Register
#define PBUER     0x340 // Parallel Port B User Enable Register
#define PCUER     0x350 // Parallel Port C User Enable Register
#define PDUER     0x360 // Parallel Port D User Enable Register
#define PEUER     0x370 // Parallel Port E User Enable Register
#define PHUER     0x332	// Parallel Port H User Enable Register
#define ICUER     0x358 // Input Capture User Enable Register
#define IBUER     0x380 // I/O Bank User Enable Register
#define PWUER     0x388 // PWM User Enable Register
#define QDUER     0x390 // Quad Decode User Enable Register
#define IUER      0x398 // External Interrupt User Enable Register
#define TAUER     0x3A0 // Timer A User Enable Register
#define TBUER     0x3B0 // Timer B User Enable Register
#define TCUER   	0x3F8 // Timer C User Enable Register

#if CPU_ID_MASK(_CPU_ID_) >= R5000
   #define AUER	0x3A8 // Analog User Enable Register
#endif

#define SAUER     0x3C0 // Serial Port A User Enable Register
#define SBUER     0x3D0 // Serial Port B User Enable Register
#define SCUER     0x3E0 // Serial Port C User Enable Register
#define SDUER     0x3F0 // Serial Port D User Enable Register
#define SEUER     0x3C8 // Serial Port E User Enable Register
#define SFUER     0x3D8 // Serial Port F User Enable Register

#if _RAB6K
	#define MB0LCR	0x400 // Memory Bank 0 Low control register
	#define MB0HCR	0x401 // Memory Bank 0 High control register
	#define MB1LCR	0x402 // Memory Bank 1 Low control register
	#define MB1HCR	0x403 // Memory Bank 1 High control register
	#define MB2LCR	0x404 // Memory Bank 2 Low control register
	#define MB2HCR	0x405 // Memory Bank 2 High control register
	#define MB3LCR	0x406 // Memory Bank 3 Low control register
	#define MB3HCR	0x407 // Memory Bank 3 High control register
#endif

#define ACS0CR    0x410 // Advanced Chip Select 0 control register
#define ACS1CR    0x411 // Advanced Chip Select 0 control register

#if CPU_ID_MASK(_CPU_ID_) >= R5000
   #define ACS2CR 0x412 // Advanced Chip Select 0 control register
#endif

#define EDMR      0x420 // Enable Dual-Mode Register

#if _RAB6K
	// USB wait stated
	#define NDWR   0x0433

	#define MSCR   0x434 // Master System Configuration Register
	#define MSSR   0x435 // Master System Status Register
	#define POCR   0x438 // Port Overide Control Register
#endif

#define WPCR      0x440 // Write Protect Control Register

#define STKCR     0x444 // Stack Limit Control Register
#define STKLLR    0x445 // Stack Low Limit Register
#define STKHLR    0x446 // Stack High Limit Register

#define RAMSR     0x448 // RAM Segment Register

// WP0R - WP31R, 0x460 to 0x47F, defined later in this file
#define WPLR      0x460 // Write Protect Low Register (old name)
#define WPHR      0x461 // Write Protect High Register (old name)

#define WPSAR     0x480 // Write Protect Segment A Register
#define WPSALR    0x481 // Write Protect Segment A Low Register
#define WPSAHR    0x482 // Write Protect Segment A High Register
#define WPSBR     0x484 // Write Protect Segment B Register
#define WPSBLR    0x485 // Write Protect Segment B Low Register
#define WPSBHR    0x486 // Write Protect Segment B High Register

#if _RAB6K
   #define PA0CR	0x4B0   // port A pin 0 control register
   #define PA1CR	0x4B1   // port A pin 1 control register
   #define PA2CR	0x4B2   // port A pin 2 control register
   #define PA3CR	0x4B3   // port A pin 3 control register
   #define PA4CR	0x4B4   // port A pin 4 control register
   #define PA5CR	0x4B5   // port A pin 5 control register
   #define PA6CR	0x4B6   // port A pin 6 control register
   #define PA7CR	0x4B7   // port A pin 7 control register

	#define PF0CR  0x4B8   // port F pin 0 control register
	#define PF1CR  0x4B9   // port F pin 1 control register
	#define PF2CR  0x4BA   // port F pin 2 control register
	#define PF3CR  0x4BB   // port F pin 3 control register
	#define PF4CR  0x4BC   // port F pin 4 control register
	#define PF5CR  0x4BD   // port F pin 5 control register
	#define PF6CR  0x4BE   // port F pin 6 control register
	#define PF7CR  0x4BF   // port F pin 7 control register

	#define PB0CR  0x4C0   // port B pin 0 control register
	#define PB1CR  0x4C1   // port B pin 1 control register
	#define PB2CR  0x4C2   // port B pin 2 control register
	#define PB3CR  0x4C3   // port B pin 3 control register
	#define PB4CR  0x4C4   // port B pin 4 control register
	#define PB5CR  0x4C5   // port B pin 5 control register
	#define PB6CR  0x4C6   // port B pin 6 control register
	#define PB7CR  0x4C7   // port B pin 7 control register

	#define PG0CR  0x4C8   // port G pin 0 control register
	#define PG1CR  0x4C9   // port G pin 1 control register
	#define PG2CR  0x4CA   // port G pin 2 control register
	#define PG3CR  0x4CB   // port G pin 3 control register
	#define PG4CR  0x4CC   // port G pin 4 control register
	#define PG5CR  0x4CD   // port G pin 5 control register
	#define PG6CR  0x4CE   // port G pin 6 control register
	#define PG7CR  0x4CF   // port G pin 7 control register

	#define PC0CR  0x4D0   // port C pin 0 control register
	#define PC1CR  0x4D1   // port C pin 1 control register
	#define PC2CR  0x4D2   // port C pin 2 control register
	#define PC3CR  0x4D3   // port C pin 3 control register
	#define PC4CR  0x4D4   // port C pin 4 control register
	#define PC5CR  0x4D5   // port C pin 5 control register
	#define PC6CR  0x4D6   // port C pin 6 control register
	#define PC7CR  0x4D7   // port C pin 7 control register

	#define PH0CR  0x4D8   // port H pin 0 control register
	#define PH1CR  0x4D9   // port H pin 1 control register
	#define PH2CR  0x4DA   // port H pin 2 control register
	#define PH3CR  0x4DB   // port H pin 3 control register
	#define PH4CR  0x4DC   // port H pin 4 control register
	#define PH5CR  0x4DD   // port H pin 5 control register
	#define PH6CR  0x4DE   // port H pin 6 control register
	#define PH7CR  0x4DF   // port H pin 7 control register

	#define PD0CR  0x4E0   // port D pin 0 control register
	#define PD1CR  0x4E1   // port D pin 1 control register
	#define PD2CR  0x4E2   // port D pin 2 control register
	#define PD3CR  0x4E3   // port D pin 3 control register
	#define PD4CR  0x4E4   // port D pin 4 control register
	#define PD5CR  0x4E5   // port D pin 5 control register
	#define PD6CR  0x4E6   // port D pin 6 control register
	#define PD7CR  0x4E7   // port D pin 7 control register

	#define PE0CR  0x4F0   // port E pin 0 control register
	#define PE1CR  0x4F1   // port E pin 1 control register
	#define PE2CR  0x4F2   // port E pin 2 control register
	#define PE3CR  0x4F3   // port E pin 3 control register
	#define PE4CR  0x4F4   // port E pin 4 control register
	#define PE5CR  0x4F5   // port E pin 5 control register
	#define PE6CR  0x4F6   // port E pin 6 control register
	#define PE7CR  0x4F7   // port E pin 7 control register
#endif


#define VRAM00  0x0600
#define VRAM01  0x0601
#define VRAM02  0x0602
#define VRAM03  0x0603
#define VRAM04  0x0604
#define VRAM05  0x0605
#define VRAM06  0x0606
#define VRAM07  0x0607
#define VRAM08  0x0608
#define VRAM09  0x0609
#define VRAM0A  0x060A
#define VRAM0B  0x060B
#define VRAM0C  0x060C
#define VRAM0D  0x060D
#define VRAM0E  0x060E
#define VRAM0F  0x060F
#define VRAM10  0x0610
#define VRAM11  0x0611
#define VRAM12  0x0612
#define VRAM13  0x0613
#define VRAM14  0x0614
#define VRAM15  0x0615
#define VRAM16  0x0616
#define VRAM17  0x0617
#define VRAM18  0x0618
#define VRAM19  0x0619
#define VRAM1A  0x061A
#define VRAM1B  0x061B
#define VRAM1C  0x061C
#define VRAM1D  0x061D
#define VRAM1E  0x061E
#define VRAM1F  0x061F

#define B0M0R           0x0308
#define B0M1R           0x0309
#define B0M2R           0x030A
#define B0CR            0x030B
#define B0A0R           0x030C
#define B0A1R           0x030D
#define B0A2R           0x030E
#define B1M0R           0x0318
#define B1M1R           0x0319
#define B1M2R           0x031A
#define B1CR            0x031B
#define B1A0R           0x031C
#define B1A1R           0x031D
#define B1A2R           0x031E
#define B2M0R           0x0328
#define B2M1R           0x0329
#define B2M2R           0x032A
#define B2CR            0x032B
#define B2A0R           0x032C
#define B2A1R           0x032D
#define B2A2R           0x032E
#define B3M0R           0x0338
#define B3M1R           0x0339
#define B3M2R           0x033A
#define B3CR            0x033B
#define B3A0R           0x033C
#define B3A1R           0x033D
#define B3A2R           0x033E
#define B4M0R           0x0348
#define B4M1R           0x0349
#define B4M2R           0x034A
#define B4CR            0x034B
#define B4A0R           0x034C
#define B4A1R           0x034D
#define B4A2R           0x034E
#define B5M0R           0x0368
#define B5M1R           0x0369
#define B5M2R           0x036A
#define B5CR            0x036B
#define B5A0R           0x036C
#define B5A1R           0x036D
#define B5A2R           0x036E
#define B6M0R           0x0378
#define B6M1R           0x0379
#define B6M2R           0x037A
#define B6CR            0x037B
#define B6A0R           0x037C
#define B6A1R           0x037D
#define B6A2R           0x037E

#define WP0R            0x0460          // renamed from WPLR
#define WP1R            0x0461          // renamed from WPHR
#define WP2R            0x0462
#define WP3R            0x0463
#define WP4R            0x0464
#define WP5R            0x0465
#define WP6R            0x0466
#define WP7R            0x0467
#define WP8R            0x0468
#define WP9R            0x0469
#define WP10R           0x046A
#define WP11R           0x046B
#define WP12R           0x046C
#define WP13R           0x046D
#define WP14R           0x046E
#define WP15R           0x046F
#define WP16R           0x0470
#define WP17R           0x0471
#define WP18R           0x0472
#define WP19R           0x0473
#define WP20R           0x0474
#define WP21R           0x0475
#define WP22R           0x0476
#define WP23R           0x0477
#define WP24R           0x0478
#define WP25R           0x0479
#define WP26R           0x047A
#define WP27R           0x047B
#define WP28R           0x047C
#define WP29R           0x047D
#define WP30R           0x047E
#define WP31R           0x047F


#define TCCSR   0x0500
#define TCCR    0x0501
#define TCDLR   0x0502
#define TCDHR   0x0503
#define TCS0LR  0x0508
#define TCS0HR  0x0509
#define TCR0LR  0x050A
#define TCR0HR  0x050B
#define TCS1LR  0x050C
#define TCS1HR  0x050D
#define TCR1LR  0x050E
#define TCR1HR  0x050F
#define TCS2LR  0x0518
#define TCS2HR  0x0519
#define TCR2LR  0x051A
#define TCR2HR  0x051B
#define TCS3LR  0x051C
#define TCS3HR  0x051D
#define TCR3LR  0x051E
#define TCR3HR  0x051F


// DMA (a whole mess of registers)
#if _RAB6K //Rabbit 6000 changed/added a lot of DMA registers
	#define DMA_CHAN_CNT 16
	#define DMCSLR	 0x0100 //DMA Master Control/Status LSB Register
	#define DMCSMR	 0x0101 //DMA Master Control/Status MSB Register
	#define DMALLR	 0x0110 //DMA Master Auto-load LSB Register
	#define DMALMR	 0x0111 //DMA Master Auto-load MSB Register
	#define DMHLR	 0x0120 //DMA Master Halt LSB Register
	#define DMHMR	 0x0121 //DMA Master Halt MSB Register
	#define DCSTCR	 0x0125 //DMA Cycle-Steal Timing Control Register
#else //its a Rabbit 4000/5000
	#define DMA_CHAN_CNT 8
	#define DMCSR	 0x0100
	#define DMALR   0x0101
	#define DMHR    0x0102
#endif
#define DMCR    0x0104 //DMA Master Control Register
#define DMTCR	 0x0105 //DMA Master Timing Control Register
//#warnt Must Deal with Bit Changes from here
#define DMR0CR  0x0106 //DMA Master Request 0 Control Register
#define DMR1CR  0x0107 //DMA Master Request 1 Control Register
#define DTRCR   0x0115 //DMA Timed Request Control Register
//#warnt To Here
#define DTRDLR  0x0116 //DMA Timed Request Divider Low Register
#define DTRDHR  0x0117 //DMA Timed Request Divider High Register

//DMA Channel 0 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D0SMR   0x0102
#else
	#define D0SMR   0x0180
#endif
#define D0BCR   0x0103
#define D0TBR   0x0108
#define D0TMR   0x0109
#define D0BU0R  0x010A
#define D0BU1R  0x010B
#define D0IA0R  0x010C
#define D0IA1R  0x010D
#define D0IA2R  0x010E
#if _RAB6K
	#define D0SCR	 0x0180
#endif
#define D0CR    0x0181
#define D0L0R   0x0182
#define D0L1R   0x0183
#define D0SA0R  0x0184
#define D0SA1R  0x0185
#define D0SA2R  0x0186
#define D0DA0R  0x0188
#define D0DA1R  0x0189
#define D0DA2R  0x018A
#define D0LA0R  0x018C
#define D0LA1R  0x018D
#define D0LA2R  0x018E

//DMA Channel 1 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D1SMR   0x0112
#else
	#define D1SMR   0x0190
#endif
#define D1BCR   0x0113
#define D1TBR   0x0118
#define D1TMR   0x0119
#define D1BU0R  0x011A
#define D1BU1R  0x011B
#define D1IA0R  0x011C
#define D1IA1R  0x011D
#define D1IA2R  0x011E
#if _RAB6K
	#define D1SCR	 0x0190
#endif
#define D1CR    0x0191
#define D1L0R   0x0192
#define D1L1R   0x0193
#define D1SA0R  0x0194
#define D1SA1R  0x0195
#define D1SA2R  0x0196
#define D1DA0R  0x0198
#define D1DA1R  0x0199
#define D1DA2R  0x019A
#define D1LA0R  0x019C
#define D1LA1R  0x019D
#define D1LA2R  0x019E

//DMA Channel 2 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D2SMR   0x0122
#else
	#define D2SMR   0x01A0
#endif
#define D2BCR   0x0123
#define D2TBR   0x0128
#define D2TMR   0x0129
#define D2BU0R  0x012A
#define D2BU1R  0x012B
#define D2IA0R  0x012C
#define D2IA1R  0x012D
#define D2IA2R  0x012E
#if _RAB6K
	#define D2SCR	 0x01A0
#endif
#define D2CR    0x01A1
#define D2L0R   0x01A2
#define D2L1R   0x01A3
#define D2SA0R  0x01A4
#define D2SA1R  0x01A5
#define D2SA2R  0x01A6
#define D2DA0R  0x01A8
#define D2DA1R  0x01A9
#define D2DA2R  0x01AA
#define D2LA0R  0x01AC
#define D2LA1R  0x01AD
#define D2LA2R  0x01AE

//DMA Channel 3 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D3SMR   0x0132
#else
	#define D3SMR   0x01B0
#endif
#define D3BCR   0x0133
#define D3TBR   0x0138
#define D3TMR   0x0139
#define D3BU0R  0x013A
#define D3BU1R  0x013B
#define D3IA0R  0x013C
#define D3IA1R  0x013D
#define D3IA2R  0x013E
#if _RAB6K
	#define D3SCR	 0x01B0
#endif
#define D3CR    0x01B1
#define D3L0R   0x01B2
#define D3L1R   0x01B3
#define D3SA0R  0x01B4
#define D3SA1R  0x01B5
#define D3SA2R  0x01B6
#define D3DA0R  0x01B8
#define D3DA1R  0x01B9
#define D3DA2R  0x01BA
#define D3LA0R  0x01BC
#define D3LA1R  0x01BD
#define D3LA2R  0x01BE

//DMA Channel 4 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D4SMR   0x0142
#else
	#define D4SMR   0x01C0
#endif
#define D4BCR   0x0143
#define D4TBR   0x0148
#define D4TMR   0x0149
#define D4BU0R  0x014A
#define D4BU1R  0x014B
#define D4IA0R  0x014C
#define D4IA1R  0x014D
#define D4IA2R  0x014E
#if _RAB6K
	#define D4SCR	 0x01C0
#endif
#define D4CR    0x01C1
#define D4L0R   0x01C2
#define D4L1R   0x01C3
#define D4SA0R  0x01C4
#define D4SA1R  0x01C5
#define D4SA2R  0x01C6
#define D4DA0R  0x01C8
#define D4DA1R  0x01C9
#define D4DA2R  0x01CA
#define D4LA0R  0x01CC
#define D4LA1R  0x01CD
#define D4LA2R  0x01CE

//DMA Channel 5 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D5SMR   0x0152
#else
	#define D5SMR   0x01D0
#endif
#define D5BCR   0x0153
#define D5TBR   0x0158
#define D5TMR   0x0159
#define D5BU0R  0x015A
#define D5BU1R  0x015B
#define D5IA0R  0x015C
#define D5IA1R  0x015D
#define D5IA2R  0x015E
#if _RAB6K
	#define D5SCR	 0x01D0
#endif
#define D5CR    0x01D1
#define D5L0R   0x01D2
#define D5L1R   0x01D3
#define D5SA0R  0x01D4
#define D5SA1R  0x01D5
#define D5SA2R  0x01D6
#define D5DA0R  0x01D8
#define D5DA1R  0x01D9
#define D5DA2R  0x01DA
#define D5LA0R  0x01DC
#define D5LA1R  0x01DD
#define D5LA2R  0x01DE

//DMA Channel 6 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D6SMR   0x0162
#else
	#define D6SMR   0x01E0
#endif
#define D6BCR   0x0163
#define D6TBR   0x0168
#define D6TMR   0x0169
#define D6BU0R  0x016A
#define D6BU1R  0x016B
#define D6IA0R  0x016C
#define D6IA1R  0x016D
#define D6IA2R  0x016E
#if _RAB6K
	#define D6SCR	 0x01E0
#endif
#define D6CR    0x01E1
#define D6L0R   0x01E2
#define D6L1R   0x01E3
#define D6SA0R  0x01E4
#define D6SA1R  0x01E5
#define D6SA2R  0x01E6
#define D6DA0R  0x01E8
#define D6DA1R  0x01E9
#define D6DA2R  0x01EA
#define D6LA0R  0x01EC
#define D6LA1R  0x01ED
#define D6LA2R  0x01EE

//DMA Channel 7 Specific Registers
#if CPU_ID_MASK(_CPU_ID_) >= R5000
	#define D7SMR   0x0172
#else
	#define D7SMR   0x01F0
#endif
#define D7BCR   0x0173
#define D7TBR   0x0178
#define D7TMR   0x0179
#define D7BU0R  0x017A
#define D7BU1R  0x017B
#define D7IA0R  0x017C
#define D7IA1R  0x017D
#define D7IA2R  0x017E
#if _RAB6K
	#define D7SCR	 0x01F0
#endif
#define D7CR    0x01F1
#define D7L0R   0x01F2
#define D7L1R   0x01F3
#define D7SA0R  0x01F4
#define D7SA1R  0x01F5
#define D7SA2R  0x01F6
#define D7DA0R  0x01F8
#define D7DA1R  0x01F9
#define D7DA2R  0x01FA
#define D7LA0R  0x01FC
#define D7LA1R  0x01FD
#define D7LA2R  0x01FE

#if _RAB6K
	//DMA Channel 8 Specific Registers
	#define D8SMR   0x0902
	#define D8BCR	 0x0903
	#define D8TBR	 0x0908
	#define D8TMR	 0x0909
	#define D8BU0R	 0x090A
	#define D8BU1R	 0x090B
	#define D8IA0R	 0x090C
	#define D8IA1R	 0x090D
	#define D8IA2R	 0x090E
	#define D8SCR	 0x0980
	#define D8CR	 0x0981
	#define D8L0R   0x0982
	#define D8L1R   0x0983
	#define D8SA0R  0x0984
	#define D8SA1R  0x0985
	#define D8SA2R  0x0986
	#define D8DA0R  0x0988
	#define D8DA1R  0x0989
	#define D8DA2R  0x098A
	#define D8LA0R  0x098C
	#define D8LA1R  0x098D
	#define D8LA2R  0x098E
	//DMA Channel 9 Specific Registers
	#define D9SMR   0x0912
	#define D9BCR	 0x0913
	#define D9TBR	 0x0918
	#define D9TMR	 0x0919
	#define D9BU0R	 0x091A
	#define D9BU1R	 0x091B
	#define D9IA0R	 0x091C
	#define D9IA1R	 0x091D
	#define D9IA2R	 0x091E
	#define D9SCR	 0x0990
	#define D9CR	 0x0991
	#define D9L0R   0x0992
	#define D9L1R   0x0993
	#define D9SA0R  0x0994
	#define D9SA1R  0x0995
	#define D9SA2R  0x0996
	#define D9DA0R  0x0998
	#define D9DA1R  0x0999
	#define D9DA2R  0x099A
	#define D9LA0R  0x099C
	#define D9LA1R  0x099D
	#define D9LA2R  0x099E
	//DMA Channel 10 Specific Registers
	#define D10SMR   0x0922
	#define D10BCR	  0x0923
	#define D10TBR	  0x0928
	#define D10TMR   0x0929
	#define D10BU0R  0x092A
	#define D10BU1R  0x092B
	#define D10IA0R  0x092C
	#define D10IA1R  0x092D
	#define D10IA2R  0x092E
	#define D10SCR   0x09A0
	#define D10CR    0x09A1
	#define D10L0R   0x09A2
	#define D10L1R   0x09A3
	#define D10SA0R  0x09A4
	#define D10SA1R  0x09A5
	#define D10SA2R  0x09A6
	#define D10DA0R  0x09A8
	#define D10DA1R  0x09A9
	#define D10DA2R  0x09AA
	#define D10LA0R  0x09AC
	#define D10LA1R  0x09AD
	#define D10LA2R  0x09AE
	//DMA Channel 11 Specific Registers
	#define D11SMR   0x0932
	#define D11BCR	  0x0933
	#define D11TBR	  0x0938
	#define D11TMR   0x0939
	#define D11BU0R  0x093A
	#define D11BU1R  0x093B
	#define D11IA0R  0x093C
	#define D11IA1R  0x093D
	#define D11IA2R  0x093E
	#define D11SCR   0x09B0
	#define D11CR    0x09B1
	#define D11L0R   0x09B2
	#define D11L1R   0x09B3
	#define D11SA0R  0x09B4
	#define D11SA1R  0x09B5
	#define D11SA2R  0x09B6
	#define D11DA0R  0x09B8
	#define D11DA1R  0x09B9
	#define D11DA2R  0x09BA
	#define D11LA0R  0x09BC
	#define D11LA1R  0x09BD
	#define D11LA2R  0x09BE
	//DMA Channel 12 Specific Registers
	#define D12SMR   0x0942
	#define D12BCR	  0x0943
	#define D12TBR	  0x0948
	#define D12TMR   0x0949
	#define D12BU0R  0x094A
	#define D12BU1R  0x094B
	#define D12IA0R  0x094C
	#define D12IA1R  0x094D
	#define D12IA2R  0x094E
	#define D12SCR   0x09C0
	#define D12CR    0x09C1
	#define D12L0R   0x09C2
	#define D12L1R   0x09C3
	#define D12SA0R  0x09C4
	#define D12SA1R  0x09C5
	#define D12SA2R  0x09C6
	#define D12DA0R  0x09C8
	#define D12DA1R  0x09C9
	#define D12DA2R  0x09CA
	#define D12LA0R  0x09CC
	#define D12LA1R  0x09CD
	#define D12LA2R  0x09CE
	//DMA Channel 13 Specific Registers
	#define D13SMR   0x0952
	#define D13BCR	  0x0953
	#define D13TBR	  0x0958
	#define D13TMR   0x0959
	#define D13BU0R  0x095A
	#define D13BU1R  0x095B
	#define D13IA0R  0x095C
	#define D13IA1R  0x095D
	#define D13IA2R  0x095E
	#define D13SCR   0x09D0
	#define D13CR    0x09D1
	#define D13L0R   0x09D2
	#define D13L1R   0x09D3
	#define D13SA0R  0x09D4
	#define D13SA1R  0x09D5
	#define D13SA2R  0x09D6
	#define D13DA0R  0x09D8
	#define D13DA1R  0x09D9
	#define D13DA2R  0x09DA
	#define D13LA0R  0x09DC
	#define D13LA1R  0x09DD
	#define D13LA2R  0x09DE
	//DMA Channel 14 Specific Registers
	#define D14SMR   0x0962
	#define D14BCR	  0x0963
	#define D14TBR	  0x0968
	#define D14TMR   0x0969
	#define D14BU0R  0x096A
	#define D14BU1R  0x096B
	#define D14IA0R  0x096C
	#define D14IA1R  0x096D
	#define D14IA2R  0x096E
	#define D14SCR   0x09E0
	#define D14CR    0x09E1
	#define D14L0R   0x09E2
	#define D14L1R   0x09E3
	#define D14SA0R  0x09E4
	#define D14SA1R  0x09E5
	#define D14SA2R  0x09E6
	#define D14DA0R  0x09E8
	#define D14DA1R  0x09E9
	#define D14DA2R  0x09EA
	#define D14LA0R  0x09EC
	#define D14LA1R  0x09ED
	#define D14LA2R  0x09EE
	//DMA Channel 15 Specific Registers
	#define D15SMR   0x0972
	#define D15BCR	  0x0973
	#define D15TBR	  0x0978
	#define D15TMR   0x0979
	#define D15BU0R  0x097A
	#define D15BU1R  0x097B
	#define D15IA0R  0x097C
	#define D15IA1R  0x097D
	#define D15IA2R  0x097E
	#define D15SCR   0x09F0
	#define D15CR    0x09F1
	#define D15L0R   0x09F2
	#define D15L1R   0x09F3
	#define D15SA0R  0x09F4
	#define D15SA1R  0x09F5
	#define D15SA2R  0x09F6
	#define D15DA0R  0x09F8
	#define D15DA1R  0x09F9
	#define D15DA2R  0x09FA
	#define D15LA0R  0x09FC
	#define D15LA1R  0x09FD
	#define D15LA2R  0x09FE
#endif

// network

#if (CPU_ID_MASK(_CPU_ID_) == R4000)

#define NADR    0x0200
#define NALDR   0x0201
#define NATSR   0x0202
#define NARSR   0x0203
#define NACSR   0x0204
#define NASR    0x0205
#define NARR    0x0206
#define NACR    0x0207
#define NAPCR   0x0208
#define NATCR   0x020A
#define NARCR   0x020B

#define NAPA0R  0x0210
#define NAPA1R  0x0211
#define NAPA2R  0x0212
#define NAPA3R  0x0213
#define NAPA4R  0x0214
#define NAPA5R  0x0215

#define NAMF0R  0x0218
#define NAMF1R  0x0219
#define NAMF2R  0x021A
#define NAMF3R  0x021B
#define NAMF4R  0x021C
#define NAMF5R  0x021D
#define NAMF6R  0x021E
#define NAMF7R  0x021F

#define NAMHR   0x0220
#define NACDR   0x0221
#define NAAER   0x0222
#define NACER   0x0223
#define NAC0R   0x0224
#define NAC1R   0x0225
#define NAMFR   0x0226

#else

// ADC I/Q Channel 0 control registers
#define A0ILR	0x0800
#define A0QLR	0x0802
#define A0IMR	0x0801
#define A0QMR	0x0803
#define A0CR	0x0804
#define A0SCR	0x0805

// DAC I/Q Channel 1 control registers
#define A1ILR	0x0810
#define A1QLR	0x0812
#define A1IMR	0x0811
#define A1QMR	0x0813
#define A1CR	0x0814
#define A1SCR	0x0815

// ADC Channel 2 control registers
#define A2LR	0x0820
#define A2MR	0x0821
#define A2CR	0x0824

// Enable Network Port Register
#define ENPR	 0x0430	// Used to enable 10/100 or WiFi

// Network Port C Wait Register
#define NCCWR	0x0431	// Wait states for CPU
#define NCDWR  0x0432	// Wait states for DMA

// Register addresses for R5000 10/100 interface
#define  NBDR 	 0x0200
#define  NBLDR  0x0201
#define  NBTSR  0x0202
#define  NBCSR  0x0204
#define  NBCR   0x0206
#define  NBTPLR 0x0208
#define  NBTPMR 0x0209
#define  NBTCR  0x020A
#define  NBRCR  0x020B
#define  NBTESR 0x020C

#define  NBPA0R 0x0210
#define  NBPA1R 0x0211
#define  NBPA2R 0x0212
#define  NBPA3R 0x0213
#define  NBPA4R 0x0214
#define  NBPA5R 0x0215

#define  NBMF0R 0x0218
#define  NBMF1R 0x0219
#define  NBMF2R 0x021A
#define  NBMF3R 0x021B
#define  NBMF4R 0x021C
#define  NBMF5R 0x021D
#define  NBMF6R 0x021E
#define  NBMF7R 0x021F

#define  NBCF0R 0x0240
#define  NBCF1R 0x0241
#define  NBCF2R 0x0242
#define  NBCF3R 0x0243
#define  NBG0R  0x0244
#define  NBG2R  0x0246
#define  NBG1R  0x0247
#define  NBRMR  0x0248
#define  NBCWR  0x0249
#define  NBFLLR 0x024A
#define  NBFLMR 0x024B
#define  NBMCFR 0x0250
#define  NBMRR  0x0251
#define  NBMCR  0x0252
#define  NBMRAR 0x0254
#define  NBMPAR 0x0255
#define  NBMWLR 0x0256
#define  NBMWMR 0x0257
#define  NBMRLR 0x0258
#define  NBMRMR 0x0259
#define  NBMSR  0x025A
#define  NBSA0R 0x0260
#define  NBSA1R 0x0261
#define  NBSA2R 0x0262
#define  NBSA3R 0x0263
#define  NBSA4R 0x0264
#define  NBSA5R 0x0265

	// Must be Rabbit5000 or above


#endif //(CPU_ID_MASK(_CPU_ID_) == R4000 or not)


#if (CPU_ID_MASK(_CPU_ID_) > R5000)
	// I2C (serial port G) registers
	// Serial Port G Control Register
	#define  SGCR  0x0580
	#define  SGC0R 0x0580
	#define  SGC1R 0x0581
	#define  SGC2R 0x0582
	#define  SGC3R 0x0583

	// Serial Port G Status Register
	#define  SGSR  0x0584
	#define  SGS0R 0x0584
	#define  SGS1R 0x0585
	#define  SGS2R 0x0586
	#define  SGS3R 0x0587

	// Serial Port G Clock Division Register
	#define  SGCDR  0x0588
	#define  SGCD0R 0x0588
	#define  SGCD1R 0x0589
	#define  SGCD2R 0x058A
	#define  SGCD3R 0x058B

	// Serial Port G Data Register
	#define  SGDR 0x058C

	// Serial Port G Slave Address Register
	#define  SGSAR  0x0590
	#define  SGSA0R 0x0590
	#define  SGSA1R 0x0591
	#define  SGSA2R 0x0592
	#define  SGSA3R 0x0593

	// Serial Port G Timing Control Register
	#define  SGTCR  0x0594
	#define  SGTC0R 0x0594
	#define  SGTC1R 0x0595
	#define  SGTC2R 0x0596
	#define  SGTC3R 0x0597

	// Serial Port G Bus Monitor Register
	#define  SGBMR  0x0598
	#define  SGBM0R 0x0598
	#define  SGBM1R 0x0599
	#define  SGBM2R 0x059A
	#define  SGBM3R 0x059B

	// Serial Port G Main Control Register
	#define  SGMCR 0x059F

#endif


#define SS_RRDY_BIT  7  // serial port status read buffer ready bit
#define SS_ADDR_BIT  6  // serial port status address byte in buffer bit
#define SS_OVRN_BIT  5  // serial port status overrun bit
#define SS_TFULL_BIT 3  // serial port status transmit buffer full bit
#define SS_TPRG_BIT  2  // serial port status transmit in progress bit

// Internal interrupts and their offset from INTVEC_BASE
#define PERIODIC_OFS 0x0
#define SECWD_OFS    0x10
#define RST10_OFS    0x20
#define RST18_OFS    0x30
#define RST20_OFS    0x40
#define RST28_OFS    0x50
#define SYSCALL_OFS  0x60
#define RST38_OFS    0x70
#define SLAVE_OFS    0x80
#define WPV_OFS      0x90  // Write Protect Violation
#define TIMERA_OFS   0xA0
#define TIMERB_OFS   0xB0
#define SERA_OFS     0xC0
#define SERB_OFS     0xD0
#define SERC_OFS     0xE0
#define SERD_OFS     0xF0
#if _RAB6K //External Interrupts that were added for the RCM6000
	#define NCW_OFS	0x100 // Net C (Wifi)
	#define USB_OFS    0x110// (Net D)
	#define FIMA_OFS  0x130 // FIM A
	#define FIMB_OFS	0x140 // FIM B
	#define I2C_OFS	0x150	// I2C
	#define ADC_OFS	0x160 // ADC
#endif
// The following can be co-located in the same 256 byte block as external interrupts
#define PWM_OFS      0x170
#define SMV_OFS      0x180 // System Mode Violation
#define QUAD_OFS     0x190
#define INPUTCAP_OFS 0x1A0
#if _RAB6K //External Interrupts that were added for the RCM6000
  #define NETB_OFS   0x1E0 // 10/100 Ethernet
#endif
#define SLV_OFS      0x1B0 // Stack Limit Violation
#define SERE_OFS     0x1C0
#define SERF_OFS     0x1D0

#define NETA_OFS		0x1E0
#define TIMERC_OFS	0x1F0

// External interrupts and their offset from XINTVEC_BASE
#define EXT0_OFS     0x0
#define EXT1_OFS     0x10

#if _RAB6K //External Interrupts that were added for the RCM6000
	#define EXT2_OFS		0x20
	#define EXT3_OFS		0x30
	#define EXT4_OFS		0x40
	#define EXT5_OFS		0x50
	#define EXT6_OFS		0x60
	#define EXT7_OFS		0x70
#else
	#define BKPT_OFS		0x040 //Rabbit 4000/5000 location for hw breakpoints
#endif
#define DMA0_OFS		0x80
#define DMA1_OFS		0x90
#define DMA2_OFS		0xA0
#define DMA3_OFS		0xB0
#define DMA4_OFS		0xC0
#define DMA5_OFS		0xD0
#define DMA6_OFS		0xE0
#define DMA7_OFS		0xF0

#if _RAB6K //External Interrupts that were added for the RCM6000
	#define BKPT_OFS		0x140 //Rabbit 6000 location for hw breakpoints
	#define DMA8_OFS     0x180
	#define DMA9_OFS     0x190
	#define DMA10_OFS    0x1A0
	#define DMA11_OFS    0x1B0
	#define DMA12_OFS    0x1C0
	#define DMA13_OFS    0x1D0
	#define DMA14_OFS    0x1E0
	#define DMA15_OFS    0x1F0
#endif

#define _OP_JP       0xC3
#define _OP_RET      0xC9
//FIM Defines
//FIM A
#if _RAB6K
	#define FIMA_RTD_FIFO      0x6000 //FIM A Rx/Tx Data FIFO
	#define FIMA_RS_FIFO       0x6001 //FIM A Rx Status FIFO
	#define FIMA_FIFO_STATUS   0x6002 //FIM A FIFO STATUS
	#define FIMA_GCR0          0x6003 //FIM A General Control Register 0
	#define FIMA_GCR1          0x6004 //FIM A General Control Register 1
	#define FIMA_GCR2          0x6005 //FIM A General Control Register 2
	#define FIMA_GCR3          0x6006 //FIM A General Control Register 3
	#define FIMA_CB0           0x6007 //FIM A Control Byte 0
	#define FIMA_CB1           0x6008 //FIM A Control Byte 1
	#define FIMA_CB2           0x6009 //FIM A Control Byte 2
	#define FIMA_CB3           0x600A //FIM A Control Byte 3
	#define FIMA_CB4           0x600B //FIM A Control Byte 4
	#define FIMA_CB5           0x600C //FIM A Control Byte 5
	#define FIMA_CB6           0x600D //FIM A Control Byte 6
	#define FIMA_CB7           0x600E //FIM A Control Byte 7
	#define FIMA_CB8           0x600F //FIM A Control Byte 8
	#define FIMA_CB9           0x6010 //FIM A Control Byte 9
	#define FIMA_CB10          0x6011 //FIM A Control Byte 10
	#define FIMA_CB11          0x6012 //FIM A Control Byte 11
	#define FIMA_CB12          0x6013 //FIM A Control Byte 12
	#define FIMA_CB13          0x6014 //FIM A Control Byte 13
	#define FIMA_CB14          0x6015 //FIM A Control Byte 14
	#define FIMA_CB15          0x6016 //FIM A Control Byte 15
	#define FIMA_PEB0          0x6017 //FIM A Port Expansion Byte 0
	#define FIMA_PEB1          0x6018 //FIM A Port Expansion Byte 1
	#define FIMA_PEB2          0x6019 //FIM A Port Expansion Byte 1
	#define FIMA_PEB3          0x601A //FIM A Port Expansion Byte 2
	#define FIMA_PEB4          0x601B //FIM A Port Expansion Byte 3
	#define FIMA_PEB5          0x601C //FIM A Port Expansion Byte 4
	#define FIMA_PEB6          0x601D //FIM A Port Expansion Byte 5
	#define FIMA_PEB7          0x601E //FIM A Port Expansion Byte 6
	#define FIMA_PEB8          0x601F //FIM A Port Expansion Byte 7
	#define FIMA_PEB9          0x6020 //FIM A Port Expansion Byte 8
	#define FIMA_PEB10         0x6021 //FIM A Port Expansion Byte 9
	#define FIMA_PEB11         0x6022 //FIM A Port Expansion Byte 10
	#define FIMA_PEB12         0x6023 //FIM A Port Expansion Byte 11
	#define FIMA_PEB13         0x6024 //FIM A Port Expansion Byte 12
	#define FIMA_PEB14         0x6025 //FIM A Port Expansion Byte 13
	#define FIMA_PEB15         0x6026 //FIM A Port Expansion Byte 14
	#define FIMA_HAGC          0x6027 //FIM A Hardware Assist General Config
	#define FIMA_S0ML          0x6028 //FIM A Signal 0 Mode Low
	#define FIMA_S0MH          0x6029 //FIM A Signal 0 Mode High
	#define FIMA_S1ML          0x602A //FIM A Signal 1 Mode Low
	#define FIMA_S1MH          0x602B //FIM A Signal 1 Mode High
	#define FIMA_S2ML          0x602C //FIM A Signal 2 Mode Low
	#define FIMA_S2MH          0x602D //FIM A Signal 2 Mode High
	#define FIMA_S3ML          0x602E //FIM A Signal 3 Mode Low
	#define FIMA_S3MH          0x602F //FIM A Signal 3 Mode High
	#define FIMA_S4ML          0x6030 //FIM A Signal 4 Mode Low
	#define FIMA_S4MH          0x6031 //FIM A Signal 4 Mode High
	#define FIMA_S5ML          0x6032 //FIM A Signal 5 Mode Low
	#define FIMA_S5MH          0x6033 //FIM A Signal 5 Mode High
	#define FIMA_S6ML          0x6034 //FIM A Signal 6 Mode Low
	#define FIMA_S6MH          0x6035 //FIM A Signal 6 Mode High
	#define FIMA_S7ML          0x6036 //FIM A Signal 7 Mode Low
	#define FIMA_S7MH          0x6037 //FIM A Signal 7 Mode High
	#define FIMA_C0ML				0x6038 //FIM A Control 0 Mode Low
	#define FIMA_C0MH				0x6039 //FIM A Control 0 Mode High
	#define FIMA_C1ML				0x603A //FIM A Control 1 Mode Low
	#define FIMA_C1MH				0x603B //FIM A Control 1 Mode High
	#define FIMA_C2ML				0x603C //FIM A Control 2 Mode Low
	#define FIMA_C2MH				0x603D //FIM A Control 2 Mode High
	#define FIMA_C3ML				0x603E //FIM A Control 3 Mode Low
	#define FIMA_C3MH				0x603F //FIM A Control 3 Mode High
	#define FIMA_B0ML				0x6040 //FIM A Bus 0 Mode Low
	#define FIMA_B0MH				0x6041 //FIM A Bus 0 Mode High
	#define FIMA_B1ML				0x6042 //FIM A Bus 1 Mode Low
	#define FIMA_B1MH				0x6043 //FIM A Bus 1 Mode High
	//0x6044 - 0x63FF is Reserved
	#define FIMA_IOCR0			0x6400 //FIM A I/O Configuration Register 0
	#define FIMA_IOCR1			0x6401 //FIM A I/O Configuration Register 1

	// Following are applicable to both FIMs (even though they are all in
	// FIM A's address range).  They select whether the primary (0) or
	// secondary (1) signal applies when the FIM is controlling the parallel
	// port bit.  Consult the documentation for which FIM controls which bit
	// in which mode (pri or sec).
	#define FIM_PAIOCR			0x6402 //FIM Auxilary I/O Config Register 0
	#define FIM_PBIOCR			0x6403 //FIM Auxilary I/O Config Register 1
	#define FIM_PCIOCR			0x6404 //FIM Auxilary I/O Config Register 2
	#define FIM_PDIOCR			0x6405 //FIM Auxilary I/O Config Register 3
	#define FIM_PEIOCR			0x6406 //FIM Auxilary I/O Config Register 4
	#define FIM_PFIOCR			0x6407 //FIM Auxilary I/O Config Register 5
	#define FIM_PGIOCR			0x6408 //FIM Auxilary I/O Config Register 6
	#define FIM_PHIOCR			0x6409 //FIM Auxilary I/O Config Register 7
	//0x640A - 0x67FF is Reserved
	//0x6800 - 0x6BFF	= FIM A IRAM, bits 7:0
	//0x6C00 - 0x6FFF = FIM A IRAM, bits 13:8

	//FIM B Defines
	#define FIMB_RTD_FIFO      0x7000 //FIM B Rx/Tx Data FIFO
	#define FIMB_RS_FIFO       0x7001 //FIM B Rx Status FIFO
	#define FIMB_FIFO_STATUS   0x7002 //FIM B FIFO STATUS
	#define FIMB_GCR0          0x7003 //FIM B General Control Register 0
	#define FIMB_GCR1          0x7004 //FIM B General Control Register 1
	#define FIMB_GCR2          0x7005 //FIM B General Control Register 2
	#define FIMB_GCR3          0x7006 //FIM B General Control Register 3
	#define FIMB_CB0           0x7007 //FIM B Control Byte 0
	#define FIMB_CB1           0x7008 //FIM B Control Byte 1
	#define FIMB_CB2           0x7009 //FIM B Control Byte 2
	#define FIMB_CB3           0x700A //FIM B Control Byte 3
	#define FIMB_CB4           0x700B //FIM B Control Byte 4
	#define FIMB_CB5           0x700C //FIM B Control Byte 5
	#define FIMB_CB6           0x700D //FIM B Control Byte 6
	#define FIMB_CB7           0x700E //FIM B Control Byte 7
	#define FIMB_CB8           0x700F //FIM B Control Byte 8
	#define FIMB_CB9           0x7010 //FIM B Control Byte 9
	#define FIMB_CB10          0x7011 //FIM B Control Byte 10
	#define FIMB_CB11          0x7012 //FIM B Control Byte 11
	#define FIMB_CB12          0x7013 //FIM B Control Byte 12
	#define FIMB_CB13          0x7014 //FIM B Control Byte 13
	#define FIMB_CB14          0x7015 //FIM B Control Byte 14
	#define FIMB_CB15          0x7016 //FIM B Control Byte 15
	#define FIMB_PEB0          0x7017 //FIM B Port Expansion Byte 0
	#define FIMB_PEB1          0x7018 //FIM B Port Expansion Byte 1
	#define FIMB_PEB2          0x7019 //FIM B Port Expansion Byte 1
	#define FIMB_PEB3          0x701A //FIM B Port Expansion Byte 2
	#define FIMB_PEB4          0x701B //FIM B Port Expansion Byte 3
	#define FIMB_PEB5          0x701C //FIM B Port Expansion Byte 4
	#define FIMB_PEB6          0x701D //FIM B Port Expansion Byte 5
	#define FIMB_PEB7          0x701E //FIM B Port Expansion Byte 6
	#define FIMB_PEB8          0x701F //FIM B Port Expansion Byte 7
	#define FIMB_PEB9          0x7020 //FIM B Port Expansion Byte 8
	#define FIMB_PEB10         0x7021 //FIM B Port Expansion Byte 9
	#define FIMB_PEB11         0x7022 //FIM B Port Expansion Byte 10
	#define FIMB_PEB12         0x7023 //FIM B Port Expansion Byte 11
	#define FIMB_PEB13         0x7024 //FIM B Port Expansion Byte 12
	#define FIMB_PEB14         0x7025 //FIM B Port Expansion Byte 13
	#define FIMB_PEB15         0x7026 //FIM B Port Expansion Byte 14
	#define FIMB_HAGC          0x7027 //FIM B Hardware Assist General Config
	#define FIMB_S0ML          0x7028 //FIM B Signal 0 Mode Low
	#define FIMB_S0MH          0x7029 //FIM B Signal 0 Mode High
	#define FIMB_S1ML          0x702A //FIM B Signal 1 Mode Low
	#define FIMB_S1MH          0x702B //FIM B Signal 1 Mode High
	#define FIMB_S2ML          0x702C //FIM B Signal 2 Mode Low
	#define FIMB_S2MH          0x702D //FIM B Signal 2 Mode High
	#define FIMB_S3ML          0x702E //FIM B Signal 3 Mode Low
	#define FIMB_S3MH          0x702F //FIM B Signal 3 Mode High
	#define FIMB_S4ML          0x7030 //FIM B Signal 4 Mode Low
	#define FIMB_S4MH          0x7031 //FIM B Signal 4 Mode High
	#define FIMB_S5ML          0x7032 //FIM B Signal 5 Mode Low
	#define FIMB_S5MH          0x7033 //FIM B Signal 5 Mode High
	#define FImB_S6ML          0x7034 //FIM B Signal 6 Mode Low
	#define FIMB_S6MH          0x7035 //FIM B Signal 6 Mode High
	#define FIMB_S7ML          0x7036 //FIM B Signal 7 Mode Low
	#define FIMB_S7MH          0x7037 //FIM B Signal 7 Mode High
	#define FIMB_C0ML				0x7038 //FIM B Control 0 Mode Low
	#define FIMB_C0MH				0x7039 //FIM B Control 0 Mode High
	#define FIMB_C1ML				0x703A //FIM B Control 1 Mode Low
	#define FIMB_C1MH				0x703B //FIM B Control 1 Mode High
	#define FIMB_C2ML				0x703C //FIM B Control 2 Mode Low
	#define FIMB_C2MH				0x703D //FIM B Control 2 Mode High
	#define FIMB_C3ML				0x703E //FIM B Control 3 Mode Low
	#define FIMB_C3MH				0x703F //FIM B Control 3 Mode High
	#define FIMB_B0ML				0x7040 //FIM B Bus 0 Mode Low
	#define FIMB_B0MH				0x7041 //FIM B Bus 0 Mode High
	#define FIMB_B1ML				0x7042 //FIM B Bus 1 Mode Low
	#define FIMB_B1MH				0x7043 //FIM B Bus 1 Mode High
	//0x7044 - 0x73FF is Reserved
	#define FIMB_IOCR0			0x7400 //FIM B I/O Configuration Register 0
	#define FIMB_IOCR1			0x7401 //FIM B I/O Configuration Register 1
	#define FIMB_AIOCR0			0x7402 //FIM Auxilary I/O Config Register 0
	#define FIMB_AIOCR1			0x7403 //FIM Auxilary I/O Config Register 1
	#define FIMB_AIOCR2  		0x7404 //FIM Auxilary I/O Config Register 2
	#define FIMB_AIOCR3			0x7405 //FIM Auxilary I/O Config Register 3
	#define FIMB_AIOCR4			0x7406 //FIM Auxilary I/O Config Register 4
	#define FIMB_AIOCR5			0x7407 //FIM Auxilary I/O Config Register 5
	#define FIMB_AIOCR6			0x7408 //FIM Auxilary I/O Config Register 6
	#define FIMB_AIOCR7			0x7409 //FIM Auxilary I/O Config Register 7
#endif
	//0X7402 - 0X77ff
	//0x7800 - 0x7BFF	= FIM B IRAM, bits 7:0
	//0x7C00 - 0x7FFF = FIM B IRAM, bits 13:8

/*
	On the Rabbit 6000, if you are using AES and multitasking then
	it is important to maintain the parity of EXP switches or it
	may cause data corruption issues as some of the new instructions
	rely on the currently selected pointer register set being the
	original "non alternate" set.
	Assembly code can use this macro to perform an EXP on Rabbit 6000 targets,
	but not 4000/5000 (where it's unnecessary).
*/
#if _RAB6K
	#define _EXP_IF_RAB6K		exp
#else
	#define _EXP_IF_RAB6K
#endif
/*** EndHeader */

/*** BeginHeader */
#endif
/*** EndHeader */

