/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __STACK_LIB
#define __STACK_LIB

#ifndef _stack_debug
#define _stack_debug __nodebug
#endif

#define Get_Stack_Size _Get_Stack_Size

/*** EndHeader */


/*
 * The default physical RAM memory map for an application running in
 * flash with separate I&D space disabled looks like this:
 *
 *	Address													Size of region (bytes)
 *
 *										----------------
 *	RAMEND (top of RAM)			|					|
 *										~					~
 *										possible				_RAM_SIZE_ / 2
 *										xalloc region		(only if 512K SRAM)
 *										~					~
 *										|					|
 *										----------------
 *	DATAEND (top of data)		|					|
 *										~					~
 *										flash transfer		FLASH_BUF_SIZE
 *										buffer
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_TCSYSBUF					|					|
 *										~					~
 *										target				TC_SYSBUF_BLOCK
 *										communication
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ERRLOG						|					|
 *										~					~
 *										optional				ERRLOG_NBLOCKS*0x1000
 *										error logging
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_FS2RAM						|					|
 *										~					~
 *										optional				FS2_RAM_RESERVE*0x1000
 *										RAM file system
 *										reserve store
 *										~					~
 *	FS2_RAM_PHYS					|					|
 *										----------------
 *	_TOS_ROOTDATA					|					|
 *										~					~
 *										vectors, watch		DATASIZE
 *										code, root data
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_USERDATA					|					|
 *										~					~
 *										optional				_SOS_USERDATA
 *										user data
 *										reserve store
 *										~					~
 *	_BOS_USERDATA					|					|
 *										----------------
 *	_TOS_WATCH_MEM					|					|
 *										~					~
 *										possible				_SOS_WATCH_MEM
 *										watch data
 *										reserve store
 *										~					~
 *	_BOS_WATCH_MEM					|					|
 *										----------------
 *										|					|
 *										~					~	min(_TOS_USERDATA+1,
 *										xalloc region		    _BOS_USERDATA,
 *										~					~	    _BOS_WATCH_MEM)
 *	RAM_START*0x1000				|					|	- (RAM_START*0x1000)
 *										----------------
 *
 *
 * The default physical RAM memory map for an application running in
 * flash with separate I&D space enabled looks like this:
 *
 *	Address													Size of region (bytes)
 *
 *										----------------
 *	RAMEND (top of RAM)			|					|
 *										~					~
 *										possible				_RAM_SIZE_ / 2
 *										xalloc region		(only if 512K SRAM)
 *										~					~
 *										|					|
 *										----------------
 *	DATAEND (top of data)		|					|
 *										~					~
 *										flash transfer		FLASH_BUF_SIZE
 *										buffer
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_TCSYSBUF					|					|
 *										~					~
 *										target				TC_SYSBUF_BLOCK
 *										communication
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ERRLOG						|					|
 *										~					~
 *										optional				ERRLOG_NBLOCKS*0x1000
 *										error logging
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_FS2RAM						|					|
 *										~					~
 *										optional				FS2_RAM_RESERVE*0x1000
 *										RAM file system
 *										reserve store
 *										~					~
 *	FS2_RAM_PHYS					|					|
 *										----------------
 *	_TOS_USERDATA					|					|
 *										~					~
 *										optional				_SOS_USERDATA
 *										user data
 *										reserve store
 *										~					~
 *	_BOS_USERDATA					|					|
 *										----------------
 *	_TOS_WATCH_MEM					|					|
 *										~					~
 *										possible				_SOS_WATCH_MEM
 *										watch data
 *										reserve store
 *										~					~
 *	_BOS_WATCH_MEM					|					|
 *										----------------
 *										|					|	min(_TOS_ERRLOG+1,
 *										~					~	    _TOS_FS2RAM+1,
 *										xalloc region		    FS2_RAM_PHYS,
 *										~					~	    _BOS_USERDATA,
 *										|					|	    _BOS_WATCH_MEM)
 *										----------------	- (_TOS_WATCHCODE+1)
 *	_TOS_WATCHCODE					|					|
 *										~					~
 *										watch code			WATCHCODESIZE
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ROOTDATA					|					|
 *										~					~
 *										root variables		DATASIZE
 *										(includes vector
 *										relays which
 *										execute in xmem)
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *										|					|
 *										~					~
 *										xalloc region		DATAORG (ie:  size of
 *										~					~	the root constants area)
 *	RAM_START*0x1000				|					|
 *										----------------
 *
 *
 * Changes:
 *   2003/04/10  SJH  Added flags to xalloc region record to indicate whether the region
 *                    is in battery-backed RAM.  This is only set for the RCM3200 2nd RAM
 *                    at present.  xalloc() is now a wrapper for _xalloc(), which takes
 *                    additional parameters to specify the type and alignment of the
 *                    returned memory.  xavail() is also a wrapper for _xavail().
 *
 *                    NOTE: xavail, _xavail and xrelease have been moved to XMEM.LIB
 *                    since they are not used by the BIOS.
 *
 */


/*** BeginHeader xalloc */
long xalloc(long);

// 'type' parameter for _xalloc():
#define XALLOC_ANY	0		// Return any type of RAM
#define XALLOC_BB		1		// Return only battery-backed (2nd RAM, RCM3200 only)
#define XALLOC_NOTBB	2		// Return only non-BB RAM.
#define XALLOC_MAYBBB 3		// Return non-BB RAM first, and only return BB RAM if no non-BB RAM remains.
#if _RAB6K
#define XALLOC_URAM  4		// Return internal RAM only (Rabbit 6000 only)
#endif

// Note:  The following macros that begin with _BOS_ or _SOS_ or _TOS_
//        indicate "Bottom Of Store" or "Size Of Store" or "Top Of
//        Store" respectively.

// macro definitions that are independent of compile mode (when making any
//  change in this area, be sure to recheck all compile modes!)

// end of (lowest-mapped) RAM (top; may be different from DATAEND)
#define RAMEND ((RAM_START+_RAM_SIZE_)*0x1000L-1L)
// target communication buffers (top)
#define _TOS_TCSYSBUF (DATAEND-FLASH_BUF_SIZE)
// FS2 RAM file system (bottom)
#define FS2_RAM_PHYS (_TOS_FS2RAM-FS2_RAM_RESERVE*4096L+1L)
// user data (size rounded up to an even 4 KB block)
#define _SOS_USERDATABLOCK (0xFFFFF000&(_SOS_USERDATA+0xFFF))
// root data (size; used in flash compile modes, shared I&D RAM compile mode)
#define DATASIZE (STACKORG-DATAORG)

// macro definitions that are dependant on compile mode (when making any
//  change in these areas, be sure to recheck the specific compile mode!)

/*
** Note that these macro definitions are often dependent on the immediately
** preceding macro definition.  See comments at the top of each compile mode's
** section of macro defintions for more information and the reasoning behind the
** relative placement of each reserve store.
**
** Also note that enabling, disabling or changing the size of any reserve store
** affects the placement of most of the subsequent (lower physical address)
** reserve stores.  Minimizing or eliminating such changes goes a long way
** toward making file system using applications as robust as possible in terms
** of recovery from an ill-timed power cycle followed by update sequence.
*/


/*** EndHeader */




/* START FUNCTION DESCRIPTION ********************************************
xalloc                         <STACK.LIB>

SYNTAX: long xalloc(long sz);

DESCRIPTION: Allocates memory in extended memory.  If xalloc() fails,
a run-time error will occur.  This is a wrapper function for _xalloc(),
for backwards compatibility.  It is the same as
  _xalloc(&sz, 1, XALLOC_MAYBBB)
except that the actual allocated amount is not returned since the parameter
is not a pointer.  The returned address is always even (word) aligned.

NOTE: xalloc is not thread safe, since it accesses a global static structure
with no locking.

PARAMETER1: sz: The number of bytes to allocate.  This is rounded up
to the next higher even number.

RETURN VALUE: The 20-bit physical address of the allocated data.

KEYWORDS: xalloc, premain
END DESCRIPTION **********************************************************/
_stack_debug
long xalloc(long sz)
{
	return _xalloc(&sz, 1, XALLOC_MAYBBB);
}




/*** BeginHeader _Init_Stacks, _Alloc_Stack, _Dealloc_Stack, _Get_Stack_Size, freeStacks */
void _Init_Stacks(void);
long _Alloc_Stack(unsigned);
int _Dealloc_Stack(long);
unsigned _Get_Stack_Size(long ptr);
extern unsigned long BaseOfStacks1;
extern unsigned long SizeOfStacks1;
extern long freeStacks[];
#define STACKPOOLCOUNT 5

/*** EndHeader */

// If not using U/COS, then default to using only one 4K stack.
#ifndef MCOS
	#ifndef STACK_CNT_256
		#define STACK_CNT_256	0
	#endif
	#ifndef STACK_CNT_512
		#define STACK_CNT_512	0
	#endif
	#ifndef STACK_CNT_1K
		#define STACK_CNT_1K		0
	#endif
	#ifndef STACK_CNT_2K
		#define STACK_CNT_2K		0
	#endif
	#ifndef STACK_CNT_4K
		#define STACK_CNT_4K		1
	#endif
#endif

// If using uC/OS-II and default stack sizes need to be changed
// redefine stack counts as necessary.  Defining these
// at the top of your program will override these values.
#ifndef STACK_CNT_256
#define STACK_CNT_256	3	// number of 256 byte stacks
#endif
#ifndef STACK_CNT_512
#define STACK_CNT_512	3	// number of 512 byte stacks
#endif
#ifndef STACK_CNT_1K
#define STACK_CNT_1K		2	// number of 1K stacks
#endif
#ifndef STACK_CNT_2K
#define STACK_CNT_2K		2	// number of 2K stacks
#endif
#ifndef STACK_CNT_4K
#define STACK_CNT_4K		2	// number of 4K stacks
#endif

#define TOTAL_STACK_CNT STACK_CNT_256 + STACK_CNT_512 + STACK_CNT_1K + STACK_CNT_2K + STACK_CNT_4K


long freeStacks[TOTAL_STACK_CNT];
const unsigned stackSizes[STACKPOOLCOUNT] = {0x100, 0x200, 0x400, 0x800, 0x1000};
unsigned long BaseOfStacks1;
unsigned long SizeOfStacks1;

/* START _FUNCTION DESCRIPTION ********************************************
_Init_Stacks                         <STACK.LIB>

SYNTAX: void _Init_Stacks(void);

DESCRIPTION: Reserves memory for stacks space using xalloc.  Before using
this function you must call _init_xalloc().  Individual stacks are to be
allocated by calling _Alloc_Stack() after the call to _Init_Stacks.
If _Init_Stacks
fails, a run-time error will occur.

Memory for stacks is divided into 256, 512, 1024, 2048, and 4096 byte
units of allocation defined by the macros STACK_CNT_256, STACK_CNT_512,
STACK_CNT_1K, STACK_CNT_2K, and STACK_CNT_4K, respectively.  To customize
the total number of allocable stacks, modify these macros in STACK.LIB.

WARNING: This function is normally called from premain.
Do not call this function from main because it will clobber
data allocated by stack allocation in premain!

RETURN VALUE: None.

KEYWORDS: _init_xalloc, xalloc, _Alloc_Stack, premain
END DESCRIPTION **********************************************************/

_stack_debug
void _Init_Stacks(void)
{
	auto long allocatedForStacks;
	auto long stacksTop;
	auto int i;
	auto unsigned locCounts[STACKPOOLCOUNT];
	auto unsigned allocIndex;
	auto unsigned totalStackCounts;

	locCounts[0] = STACK_CNT_256;
	locCounts[1] = STACK_CNT_512;
	locCounts[2] = STACK_CNT_1K;
	locCounts[3] = STACK_CNT_2K;
	locCounts[4] = STACK_CNT_4K;
	totalStackCounts = TOTAL_STACK_CNT;
	SizeOfStacks1 = 0;
	allocIndex    = TOTAL_STACK_CNT - 1u;

	for (i = 0; i < STACKPOOLCOUNT; ++i)
	{
		SizeOfStacks1 += locCounts[i]*(unsigned long)stackSizes[i];
	}

	// Use allocatedForStacks as the total size of stack(s) to be allocated, to
	//  prevent _xalloc() from altering the value in SizeOfStacks1.
	allocatedForStacks = SizeOfStacks1;
	// Allocate required stack size plus possible additional size due to the
	//  4 KByte (i.e 2^^12 byte) boundary alignment requirement for STACKSEG.
	BaseOfStacks1 = _xalloc(&allocatedForStacks, 12, XALLOC_MAYBBB);
	// Calculate the uppermost allocated stack address (which is one less than
	//  the sum of BaseOfStacks1 plus SizeOfStacks1).
	stacksTop = BaseOfStacks1 + SizeOfStacks1 - 1L;

	while (totalStackCounts)
	{
		for (i = 0; i < STACKPOOLCOUNT; ++i)
		{
			/*
				Stack sizes are powers of two ranging from 256 bytes to 4096 bytes.
				Because _xalloc() has allocated the total stack(s) storage memory
				starting on a 4K (0x1000) address boundary, allocating the smallest
				stack(s) first from the top down to the base guarantees that each
				stack fits completely within its 4KB (0x1000 byte) memory block. The
				freeStacks[] array is filled in reverse index order to maintain the
				requirements of sorting stacks of decreasing size by ascending
				physical address.
			*/
			while (locCounts[i])
			{
				--locCounts[i];
				--totalStackCounts;
				freeStacks[allocIndex] = ((long) i << 24) + stacksTop;
				--allocIndex;
				stacksTop -= stackSizes[i];
			}
		}
	}
}


/* START FUNCTION DESCRIPTION ********************************************
Get_Stack_Size                         <STACK.LIB>

SYNTAX: unsigned Get_Stack_Size(long pointer);

DESCRIPTION: Get_Stack_Size returns the size of the stack identified by
the pointer parameter.  Get_Stack_Size assumes that pointer is a
a valid address inside a stack allocated by _Alloc_Stack.

If the value of pointer has overflowed or underflowed its stack, the
return value is be unpredictable.

PARAMETER1: pointer: a long of the form 0x0SSSDYYY where SS denotes the
12 bit stack segment register value and DYYY denotes the 16-bit
logical address in the range 0xD000-0xDFFF.

RETURN VALUE: An unsigned integer containing the total stack size.  Returns
0 if the stack cannot be identified.

KEYWORDS: _Init_Stack, _Alloc_Stack
END DESCRIPTION **********************************************************/

_stack_debug
unsigned _Get_Stack_Size(long ptr) {
	auto int i;
	auto long stack_top;
	auto unsigned stack_size;

	/* Get_Stack_Size algorithm assumes that the stack addresses
		in freeStacks are ordered consecutively. */
	// Convert address from ss:dyyy to 20 bit physical address.
	#asm
		ld hl, (sp+@sp+ptr)
		ex de, hl
		ld hl, (sp+@sp+ptr+2)
		xor a
		ld b, e
		ld e, d
		ld d, a
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, de
		ld d, l
		ld e, b
		ld l, h
		ld h, a  ;zero
		ld (sp+@sp+ptr+2), hl
		ex de, hl
		ld (sp+@sp+ptr), hl
	#endasm
	for (i = 0; i < TOTAL_STACK_CNT; i++) {
		stack_top = freeStacks[i] & 0xffffffL;
		if (ptr <= stack_top) {
			stack_size = stackSizes[(unsigned)(freeStacks[i]>>24) & 0x7f];
#if (DK_ENABLE_STACK_TRACING == 1) && defined(MCOS)
			stack_size -= 3;
#endif
			if (ptr <= stack_top - stack_size) {
				// stack isn't large enough to include ptr
				break;
			}
			
			return stack_size;
		}
	}
	return 0;
}

/* START FUNCTION DESCRIPTION ********************************************
_Alloc_Stack                         <STACK.LIB>

SYNTAX:  long _Alloc_Stack(unsigned sz);

DESCRIPTION: _Alloc_Stack() allocates a stack for tasking/slicing use.
The stack is allocated from space setup by _Init_Stack().  The return
value is the stack segment register/logical address encoded in a long.

The stack returned will be greater than or equal to the parameter sz
and can be retrieved via Get_Stack_Size().  Upon failure,
_Alloc_Stack() returns 0.

PARAMETER1: sz: Requested size for the stack.

RETURN VALUE: A long (xmem pointer) of the form 0SSSDYYY where SSS
denotes the 12 bit stack segment register value and DYYY denotes the
16-bit logical address in the range 0xD000-0xDFFF.  If _Alloc_Stack fails,
the return value is 0;

KEYWORDS: _Init_Stack, Get_Stack_Size, premain
END DESCRIPTION **********************************************************/


_stack_debug
long _Alloc_Stack(unsigned int sz)
{
	auto long retval;
	auto int i, i2;
	auto char *fsPtr;

#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
	sz -= 3;
	#endif
#endif

	for (i = 0; i < STACKPOOLCOUNT; ++i)
	{
		if (sz <= stackSizes[i])
		{
			sz = i;
			break;
		}
	}

	if (i == STACKPOOLCOUNT)
	{
		return 0;
	}
	fsPtr = (char *) freeStacks;
	/*
		Step through freeStacks[] in reverse index order to find an available
		stack of the smallest suitable size. Note that the _Init_Stacks() function
		populates the freeStacks[] array with allocated stacks sorted in
		descending size order.
	*/
	for (i = TOTAL_STACK_CNT - 1; i >= 0; --i)
	{
		// calculate offset to (long) freeStacks[i] entry's MSB
		i2 = i * sizeof (long) + sizeof (long) - 1;
		// test for available (high bit reset) stack entry
		if (!(fsPtr[i2] & 0x80))
		{
			// test for suitable (same or larger) stack size
			if (fsPtr[i2] >= sz)
			{
				// allocate the available, suitable stack entry
				fsPtr[i2] |= 0x80;
				break;
			}
		}
	}

	if (i < 0)
	{
		// no suitable stack is available
		return 0;
	}
	retval = freeStacks[i] & 0xffffff; // get the physical address
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
	dkUCos = 1;
	retval -= 3;
	*(int __far *) (retval + 2) = 0xdbbd;	// v = 0xdbbd; root2xmem(retval + 2, &v, 2);
	#endif
#endif

	// convert return value into form bc:de
	// where bc is STACKSEGH:STACKSEGL and de is 0xDyyy logical address
	_gen_lin2seg(&retval, 0xd);
	return retval;
}

/* START FUNCTION DESCRIPTION ********************************************
_Dealloc_Stack                         <STACK.LIB>

SYNTAX:  int _Dealloc_Stack(long ptr);

DESCRIPTION: _Dealloc_Stack() deallocates a stack for tasking reuse.
The ptr value must be equal to the return value of a previous call
to _Alloc_Stack.  Otherwise, _Dealloc_Stack will fail.

If the stack address is valid the stack is marked as deallocated
and; multiple calls on the same valid address have no effect.
If the deallocation fails, _Dealloc_Stack returns 0; failure indicates
that the parameter ptr is an invalid stack address.


PARAMETER1: ptr: valid stack address returned from call to _Alloc_Stack

RETURN VALUE:	1: if ptr is valid stack address
				 	0: if ptr is an invalid stack address

KEYWORDS: _Init_Stack, Get_Stack_Size, premain, _Alloc_Stack
END DESCRIPTION **********************************************************/


_stack_debug
int _Dealloc_Stack(long ptr)
{
	auto int i, i2;
	static char *fsPtr;
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
   ptr += 3;
   #endif
#endif
	#asm
		ld hl, (sp+@sp+ptr)
		ex de, hl
		ld hl, (sp+@sp+ptr+2)
		xor a
		ld b, e
		ld e, d
		ld d, a
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, de
      ld a, h
      and 0xf
		ld d, l
		ld e, b
		ld l, a
		ld h, 0  ;zero
		ld (sp+@sp+ptr+2), hl
		ex de, hl
		ld (sp+@sp+ptr), hl
	#endasm
	fsPtr = (char *) freeStacks;
	for(i = TOTAL_STACK_CNT-1; i >= 0; i--) {
		if((freeStacks[i]&0xfffff) == ptr) {
			i2 = i*sizeof(long)+sizeof(long)-1;
			fsPtr[i2] &= 0x7f;
			return TRUE;
		}
	}
	return FALSE;
}

/*** BeginHeader _ProgStkSwitch,	_BiosStkSwitch */
__root void _ProgStkSwitch(long);
__root void _BiosStkSwitch();
extern int biossp, biossr;
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_ProgStkSwitch                         <STACK.LIB>

SYNTAX: void _ProgStkSwitch(long newstack);

DESCRIPTION: Assembly function that switches between the BIOS stack and
the default program stack.  This function must be from the same function
(i.e., premain) as _BiosStkSwitch or else the result is unpredictable.
Also, the function that calls _ProgStkSwitch() should not have any auto
parameters since auto parameters in the calling function
will not be accessible after calling _ProgStkSwitch().

PARAMETER1: newstack: Physical address encoded as 0x00SSXXXX, where SS is the
new 8-bit stack segment register value and XXXX is the logical address
to the initial stack pointer value (i.e., top of the stack).

RETURN VALUE: None.

KEYWORDS: _Init_Stack, Alloc_Stack, premain
END _DESCRIPTION **********************************************************/
int biossp, biossr;

#asm __root
_ProgStkSwitch::
   xor a
   ld (dkInBiosStack),a
	pop iy 				; remove return address from bios stack & save
	pop hl 				; new sp value
	ld de, -4
	add hl, de

	ioi	ld	bc, (STACKSEGL)
	ld		(biossr), bc
	pop bc 				; get the new STACKSEG value from c
	ld (biossp), sp 	; save the stack pointer
	ld sp,hl
   ioi ld (STACKSEGL), bc
   jp (iy)
#endasm


/* START _FUNCTION DESCRIPTION ********************************************
_BiosStkSwitch                         <STACK.LIB>

SYNTAX: void _BiosStkSwitch();

DESCRIPTION: Assembly function that switches back from the default program
stack to the BIOS stack.  This function must be from the same function
(i.e., premain) as _BiosStkSwitch or else the result is unpredictable.

RETURN VALUE: None.

KEYWORDS: _Init_Stack, Alloc_Stack, premain
END _DESCRIPTION **********************************************************/

#asm __root
_BiosStkSwitch::
   ld a,1
   ld (dkInBiosStack),a
	pop iy
	ld	hl,(biossr)
	ioi	ld	(STACKSEGL),hl
	ld sp, (biossp)   ; don't need to change since in data seg
	jp (iy)
#endasm

/*** BeginHeader */
#endif
/*** EndHeader */