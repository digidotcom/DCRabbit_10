/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader  ********************************************/
#ifndef __ERRORS_LIB
#define __ERRORS_LIB
/*** EndHeader ***********************************************/

/* START LIBRARY DESCRIPTION *********************************
ERRORS.LIB

DESCRIPTION:
	Runtime error support.

SUPPORT LIB'S:
END DESCRIPTION **********************************************/

/*** BeginHeader */
/*** EndHeader */

/*** BeginHeader exception */
__root int exception(int errCode);
/*** EndHeader */

/* START FUNCTION DESCRIPTION **************************************************
exception							<ERRORS.LIB>

SYNTAX:			int exception(int errCode)

DESCRIPTION:	This function is called by Rabbit libraries when a
runtime error occurs.  It puts information relevant to the runtime
error on the stack and calls the default runtime error handler
pointed to by the ERROR_EXIT macro.  To define your own error
handler, see the defineErrorHandler() function.

When the error handler is called, the following information will
be on the stack:
			SP+0	return adress for error handler call
			SP+2	runtime error code
			SP+4	0x0000 (can be used for additional information)
			SP+6	LXPC when exception() was called
			SP+8	address where exception() was called

RETURN VALUE:	Runtime error code passed to it.

SEE ALSO:		defineErrorHandler

END DESCRIPTION ***************************************************************/

#asm __nodebug __root
; Dynamic C Exception Handler
;
; int   exception ( int errCode );
; error code should be passed to this function in hl (and on stack)
; returns error code passed to it
;
; Pushes the following on the stack before jumping to (ERROR_EXIT)
;		SP+0	- return address for _EH_exceptionRet
;		SP+2	- Error code
;		SP+4	- 0x0000 (can be used for additional information)
;		SP+6	- LXPC when error occurred
;		SP+8	- address where exception() was called
;

exception::
	exx
	ld		hl, (sp)				; ret addr to after error line, used in db_adj_pc()
	exx

	ld		de, hl
	ld		hl, (sp)				; get return addr for exception() call
	ld		bc, -3				; adjust for "CALL mn" opcode
	add	hl, bc
	push	hl						; push return address onto stack

	ld		hl, lxpc
	push	hl

	push	0x0000				; push 0x0000 onto stack (user-defined word)

	ex		de, hl				; put error code back into HL
	push	hl						; push error code onto stack

	push	_EH_exceptionRet	; push return address on stack

	; a has xpc, hl has error code, hl' has return address
	ld		a, xpc
_EH_errexit:
	ld		iy, (ERROR_EXIT)
	jp		(iy)					; jump to runtime error handler (error code in HL)

;; if (ERROR_EXIT) returns, execution continues here
_EH_exceptionRet:
	; clean up stack
	pop	hl						; return value = error code
	add	sp, 6
_EH_exceptionDone:
	ret
#endasm

/*** BeginHeader */

/*
   The following EXCEPTION(x) parameterized macro definition is deprecated and
   will be removed in a future version of Dynamic C. In particular, note that
   the above exception() function no longer loads into HL' the assumed return
   address of the caller of a utility function. All uses of the EXCEPTION(x)
   macro in standard Dynamic C release code have been replaced with calls to the
   exception() function.
*/

#define	EXCEPTION(x)	$\
	push	hl					$\
	ld		hl, @SP			$\
	add	hl, sp			$\
	ld		hl, (hl+2)		$\
	push	hl					$\
	ld		hl, x				$\
	push	hl					$\
	call	exception		$\
	add	sp, 4				$\
	pop	hl

/*** EndHeader */

/*** BeginHeader defineErrorHandler *******/
void defineErrorHandler(void *errfcn);
/*** EndHeader ***************************/

/* START FUNCTION DESCRIPTION ********************************************
defineErrorHandler              <ERRORS.LIB>

SYNTAX: void defineErrorHandler(void *errfcn)

PARAMETER1:		pointer to user-defined runtime error handler.

DESCRIPTION:	Sets the BIOS function pointer for runtime errors to
the function pointed to by errfcn.  When a runtime error occurs, the
following information is passed to the error handler on the stack:
			SP+0	- return address for _EH_exceptionRet
			SP+2	- Error code
			SP+4	- 0x0000 (can be used for additional information)
			SP+6	- LXPC when exception() was called
			SP+8	- address where exception() was called

The user-defined function should ALWAYS be in root memory.  Specify
'root' at the start of the function definition to ensure this.

RETURN VALUE: None.
END DESCRIPTION **********************************************************/

__nodebug
void defineErrorHandler(void *errfcn)
{
   DCParam.errorExit = (unsigned int)errfcn;
}

/* START FUNCTION DESCRIPTION ********************************************
error_message                             <ERRORS.LIB>

SYNTAX: unsigned long error_message(int message_index);

DESCRIPTION: Returns a physical pointer to a descriptive string for
             an error code listed in errno.h.

             Consider using strerror() instead, as it will always return a
             printable string (and is therefore appropriate for passing to
             one of the printf() functions).

PARAMETER 1: Positive or negative value of error return code.

RETURN VALUE: Physical address of string, or zero if error code is not
              listed.  Do not pass the return value of error_message()
              directly to a printf() function -- if the error isn't found,
              printf() will dereference a NULL pointer and display whatever
              is stored at address 0.

SEE ALSO:	strerror, perror

END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
_error_message                             <ERRORS.LIB>

SYNTAX:	char far *_error_message( int error, char far buffer[40]);

DESCRIPTION:	Returns a descriptive string for an error code listed in errno.h.

PARAMETER 1:	Positive or negative value of error return code.

PARAMETER 2:	Buffer to store a generic message (Unknown error #12345) if a
					descriptive string is not available.  Buffer should be large
					enough to hold at least 40 bytes.

RETURN VALUE:	Descriptive string from constant table or buffer passed in
					as parameter 2.

SEE ALSO:	strerror, perror

END DESCRIPTION **********************************************************/

/*** BeginHeader error_message *******************************************/
unsigned long error_message(int);
#define error_message(err)		((unsigned long)_error_message( err, NULL))
/*** EndHeader ***********************************************************/
unsigned long (error_message)( int error)
{
	return (unsigned long)_error_message( error, NULL);
}

/*** BeginHeader _error_message */
char __far *_error_message( int error, char __far buffer[40]);
/*** EndHeader */
// Note: Be sure to update errno.h and errmsg.ini for any new error codes
//  added.
// The errmsg_xstrings and errmsg_indices arrays should match and be in
// increasing order, otherwise the error_message function may not operate
// correctly.
__xstring errmsg_xstrings
{
/*0*/ "Program terminated",
/*1*/ "Operation not permitted",
/*2*/ "No such file or directory",
/*5*/ "I/O error",
/*6*/ "No such device or address",
/*7*/ "Arg list too long or something else is too big like a string parameter",
/*9*/ "Bad file number",
/*11*/ "Operation would block try again",
/*12*/ "Out of memory",
/*13*/ "Permission denied",
/*14*/ "Bad address",
/*15*/ "Block device required",
/*16*/ "Device or resource busy",
/*17*/ "File exists",
/*19*/ "No such device",
/*20*/ "Not a directory",
/*21*/ "Is a directory",
/*22*/ "Invalid argument",
/*23*/ "File table overflow",
/*24*/ "Too many open files",
/*25*/ "Lost I2C arbitration dispute",
/*26*/ "I2C Bus or NACK error",
/*27*/ "File too large",
/*28*/ "No space left on device",
/*29*/ "Invalid I2C slave address",
/*30*/ "Read-only file system",
/*36*/ "File name too long",
/*38*/ "Function not implemented",
/*39*/ "Directory not empty",
/*41*/ "End of file or directory",
/*61*/ "No data available",
/*62*/ "Timer expired",
/*64*/ "Machine is not on the network",
/*67*/ "Link has been severed",
/*70*/ "Communication error on send",
/*71*/ "Protocol error",
/*72*/ "Multihop attempted",
/*74*/ "Not a data message",
/*75*/ "Value too large for defined data type",
/*76*/ "Name not unique on network",
/*77*/ "File descriptor in bad state",
/*84*/ "Illegal byte sequence",
/*85*/ "Interrupted system call should be restarted",
/*87*/ "Too many users",
/*88*/ "Socket operation on non-socket",
/*89*/ "Destination address required",
/*90*/ "Message too long",
/*91*/ "Protocol wrong type for socket",
/*92*/ "Protocol not available",
/*93*/ "Protocol not supported",
/*94*/ "Socket type not supported",
/*95*/ "Operation not supported on transport endpoint",
/*96*/ "Protocol family not supported",
/*97*/ "Address family not supported by protocol",
/*98*/ "Address already in use",
/*99*/ "Cannot assign requested address",
/*100*/ "Network is down",
/*101*/ "Network is unreachable",
/*102*/ "Network dropped connection because of reset",
/*103*/ "Software caused connection abort",
/*104*/ "Connection reset by peer",
/*105*/ "No buffer space available",
/*106*/ "Transport endpoint is already connected",
/*107*/ "Transport endpoint is not connected",
/*108*/ "Cannot send after transport endpoint shutdown",
/*109*/ "Too many references: cannot splice",
/*110*/ "Connection timed out",
/*111*/ "Connection refused",
/*112*/ "Host is down",
/*113*/ "No route to host",
/*114*/ "Operation already in progress",
/*115*/ "Operation now in progress",
/*122*/ "Quota exceeded",
/*123*/ "No medium found",
/*124*/ "Wrong medium type",
/*201*/ "Bad sequence number in file",
/*202*/ "Unexpected end-of-chain in file",
/*203*/ "Not a data block (B-block)",
/*204*/ "Bad file number in file",
/*240*/ "Shared port is not available",
/*300*/ "FAT mutex error",
/*301*/ "Root directory full",
/*302*/ "Not partitioned",
/*303*/ "Partition bad or unrecognized",
/*304*/ "Partition or volume not formatted",
/*305*/ "Bad type",
/*306*/ "Bad file/dir path string",
/*307*/ "Block marked bad on the device",
/*308*/ "Error detected in read data",
/*309*/ "Driver level is busy new write not started",
/*310*/ "Cannot flush enough entries from cache to perform next read.",
/*311*/ "Parameter mismatch when registering a device.",
/*312*/ "Device not registered when _fatftc_devwrite called.",
/*313*/ "Not writing full physical sector in _fatftc_devwrite.",
/*314*/ "Rollback journal overflow.  Transaction requires too much data to be stored.",
/*315*/ "fatrj_transtart() called with transaction already open.",
/*316*/ "Internal error: a tied cache group is in an inconsistent state.",
/*317*/ "fatrj_setchk() called without transaction being open.",
/*318*/ "Transaction cannot contain both checkpoint and marker data.",
/*319*/ "File is in an invalid state.  Probably because the FATfile structure was not zero when opened for the first time.",
/*320*/ "Partition is in an invalid state.  This occurs if you are trying to delete a file when another file is being allocated or vice versa",
/*321*/ "FAT filesystem appears to be corrupted",
/*322*/ "FAT write operation failed",
/*323*/ "FAT erase operation failed",
/*324*/ "FTL based device has too many bad blocks",
/*400*/ "No network error",
/*401*/ "Local host not reachable (ARP could not resolve)",
/*402*/ "Host not reachable (Router not resolved)",
/*403*/ "Host refused connection",
/*404*/ "Timout on open or close",
/*405*/ "Connection timed out (keepalive etc.)",
/*406*/ "Active abort sent from this peer",
/*407*/ "Timed out due to inactivity",
/*408*/ "DHCP lease expired",
/*409*/ "ICMP reported trouble",
/*410*/ "Protocol error e.g. bad ack number for TCP",
/*411*/ "Remote peer reset connection",
/*412*/ "ICMP error",
/*413*/ "ICMP error",
/*414*/ "ICMP error",
/*415*/ "ICMP error",
/*416*/ "ICMP error",
/*417*/ "ICMP error",
/*418*/ "ICMP error",
/*419*/ "ICMP error",
/*420*/ "ICMP error",
/*421*/ "ICMP error",
/*422*/ "ICMP error",
/*423*/ "ICMP error",
/*424*/ "ICMP error",
/*425*/ "ICMP error",
/*426*/ "ICMP error",
/*427*/ "ICMP error",
/*428*/ "ICMP error",
/*429*/ "ICMP error",
/*430*/ "ICMP error",
/*431*/ "ICMP error",
/*432*/ "ICMP error",
/*433*/ "ICMP error",
/*434*/ "IP address changed",
/*435*/ "No memory for buffer",
/*436*/ "IP address conflict detected",
/*437*/ "Interface down or deactivated",
/*438*/ "Timeout sending email",
/*439*/ "Invalid response from SMTP server",
/*440*/ "HTTP client: too many redirects",
/*450*/ "Could not open network socket",
/*451*/ "Cannot resolve hostname",
/*452*/ "data handler aborted",
/*453*/ "unable to attempt SMTP authentication",
/*454*/ "SMTP authentication failed",
/*460*/ "Nameserver resolve failed",
/*461*/ "Nameserver resolve timed out",
/*462*/ "Nameserver resolve handle invalid",
/*463*/ "Nameserver resolve no handles available",
/*464*/ "Nameserver resolve hostname too long",
/*465*/ "No nameserver available",
/*501*/ "aton2() encountered non-digit in IP address",
/*502*/ "aton2() encountered decimal field outside 0-255",
/*503*/ "aton2() encountered delimiter not '.' or ','.",
/*504*/ "aton2() did not find ']' for '['.",
/*505*/ "aton2() port number out of range.",
/*601*/ "watch log full",
/*602*/ "state machine has invalid state",
/*603*/ "user program ended",
/*604*/ "no handles available. Close something",
/*605*/ "Stack limit violation occurred in user mode",
/*606*/ "Processor attempted to execute system code while running in user mode",
/*607*/ "Write protection violation occurred in user mode",
/*608*/ "User syscall is undefined",
/*609*/ "No shadow register is associated with the I/O register being accessed",
/*610*/ "No more tcp or udp sockets are available",
/*701*/ "Secondary watchdog timeout",
/*702*/ "Assertion failure",
/*703*/ "Input compression buffer pool overflow",
/*704*/ "Output compression buffer pool overflow",
/*705*/ "Erroneous pointer assignment",
/*706*/ "Array index out of bounds",
/*707*/ "Stack corrupted",
/*708*/ "Stack overflow",
/*709*/ "Auxiliary stack overflow",
/*710*/ "Domain error",
/*711*/ "Range error",
/*712*/ "Floating point overflow",
/*713*/ "Long divide by zero",
/*714*/ "Long zero modulus error",
/*715*/ "Bad parameter passed to I/O function",
/*716*/ "Integer divide by zero",
/*717*/ "Unexpected interrupt",
/*718*/ "CoData structure trashed",
/*719*/ "Virtual watchdog timeout",
/*720*/ "Xmem allocation failed (out of memory).",
/*721*/ "Stack allocation failed (out of free stacks or size requested too large).",
/*722*/ "Stack deallocation failed (Stack address invalid).",
/*723*/ "Xmem allocation initialization failed",
/*724*/ "No virtual watchdog timers available",
/*725*/ "No valid MAC address for board",
/*726*/ "Invalid cofunction instance",
/*727*/ "Socket must be class 'static' not 'auto'",
/*728*/ "Attempt to switch to an invalid stack address",
/*729*/ "An RST 10 occurred but the RST 10 vector is uninitialized",
/*730*/ "A syscall occurred but the syscall vector is uninitialized",
/*731*/ "An RST 38 occurred but the RST 38 vector is uninitialized",
/*732*/ "A slave port interrupt occurred but the slave port vector is uninitialized",
/*733*/ "A write protect violation occurred but the write protect violation vector is uninitialized",
/*734*/ "A timer A interrupt occurred but the timer A interrupt vector is uninitialized",
/*735*/ "A timer B interrupt occurred but the timer B interrupt vector is uninitialized",
/*736*/ "An interrupt for serial port B occurred but the serial port B vector is uninitialized",
/*737*/ "An interrupt for serial port C occurred but the serial port C vector is uninitialized",
/*738*/ "An interrupt for serial port D occurred but the serial port D vector is uninitialized",
/*739*/ "An external interrupt 0 occurred but the external interrupt 0 vector is uninitialized",
/*740*/ "An external interrupt 1 occurred but the external interrupt 1 vector is uninitialized",
/*741*/ "A pulse width modulation interrupt occurred but the pulse width modulation vector is uninitialized",
/*742*/ "A system mode violation interrupt occurred but the system mode violation vector is uninitialized",
/*743*/ "A quadrature decoder interrupt occurred but the quadrature decoder vector is uninitialized",
/*744*/ "An input capture interrupt occurred but the input capture vector is uninitialized",
/*745*/ "A stack violation interrupt occurred but the stack violation vector is uninitialized",
/*746*/ "An interrupt for serial port E occurred but the serial port E vector is uninitialized",
/*747*/ "An interrupt for serial port F occurred but the serial port F vector is uninitialized",
/*748*/ "The preloaded parallel flash driver made an unknown resource request",
/*749*/ "Initialization function not called",
/*750*/ "Library written for a different clock speed",
/*751*/ "Unexpected return from coprocess",
/*752*/ "Shared SPI device uC/OS-II mutex timeout error",
/*780*/ "Heap corruption detected",
/*781*/ "Heap usage error detected",
/*782*/ "Could not allocate system heap",
/*783*/ "Could not allocate application heap",
/*801*/ "Frame id of received message incorrect",
/*802*/ "Incorrect Radio firmware version",
/*803*/ "TX locked waiting for ND to end",
/*804*/ "Radio sent a message with status not zero",
/*805*/ "Calling AT functions within a callback is not allowed",
/*806*/ "Radio firmware download failed",
/*807*/ "Incorrect Radio firmware type",

/*901*/ "TLS Memory allocation failure",
/*903*/ "TLS Initialization failed",
/*908*/ "Overflowed a sequence",
/*911*/ "Remote user cancelled connection",
/*912*/ "Incoming message had wrong version",
/*913*/ "Incoming record message overflow",
/*916*/ "Unexpected message during read",
/*917*/ "Receieved a fatal alert",
/*919*/ "Internal error",
/*921*/ "Unexpected message during handshake",
/*922*/ "Session ID in message too long",
/*923*/ "Peer attempted renegotiation when not allowed",
/*924*/ "Incorrect protocol version in client hello message",
/*926*/ "could not find compatible ciphersuite in client offer",
/*927*/ "Exchange keys wrong protocol version",
/*928*/ "Public-key signature verification failure",
/*929*/ "Internal public-key operation error",
/*930*/ "The finish message verification failed",
/*933*/ "Received a message from the client that failed the record MAC check",
/*936*/ "The write of an alert failed",
/*938*/ "Received record did not have length which was multiple of cipher block size",
/*939*/ "Protocol error in received record",
/*940*/ "Record too large to fit in write buffer",
/*941*/ "Attempted to write record which did not have length which was multiple of cipher block size",
/*942*/ "Public-key encryption failure",
/*944*/ "Private-key decryption failure",
/*945*/ "Private-key signature failure",
/*951*/ "Bad certificate format",
/*952*/ "Unsupported cert",
/*953*/ "Cert revoked",
/*954*/ "Cert expired",
/*955*/ "Cert unknown",
/*956*/ "Unknown CA",
/*960*/ "Inappropriate state to send client hello."
/*961*/ ,"Unknown TLS PSK identity."
/*962*/ ,"Error parsing extensions in TLS hello."
/*963*/ ,"Error decoding TLS message."
/*964*/ ,"Illegal parameter in TLS message."
};

const __far unsigned int errmsg_indices[] =
{
   0, // Program terminated
   1, // Operation not permitted
   2, // No such file or directory
   5, // I/O error
   6, // No such device or address
   7, // Arg list too long, or something else is too big like a string parameter
   9, // Bad file number
   11, // Operation would block, try again
   12, // Out of memory
   13, // Permission denied
   14, // Bad address
   15, // Block device required
   16, // Device or resource busy
   17, // File exists
   19, // No such device
   20, // Not a directory
   21, // Is a directory
   22, // Invalid argument
   23, // File table overflow
   24, // Too many open files
	25, // Lost I2C arbitration dispute
	26, // I2C Bus or NACK error
   27, // File too large
   28, // No space left on device
	29, // Invalid I2C slave address
   30, // Read-only file system
   36, // File name too long
   38, // Function not implemented
   39, // Directory not empty
   41, // End of file or directory
   61, // No data available
   62, // Timer expired
   64, // Machine is not on the network
   67, // Link has been severed
   70, // Communication error on send
   71, // Protocol error
   72, // Multihop attempted
   74, // Not a data message
   75, // Value too large for defined data type
   76, // Name not unique on network
   77, // File descriptor in bad state
   84, // Illegal byte sequence
   85, // Interrupted system call should be restarted
   87, // Too many users
   88, // Socket operation on non-socket
   89, // Destination address required
   90, // Message too long
   91, // Protocol wrong type for socket
   92, // Protocol not available
   93, // Protocol not supported
   94, // Socket type not supported
   95, // Operation not supported on transport endpoint
   96, // Protocol family not supported
   97, // Address family not supported by protocol
   98, // Address already in use
   99, // Cannot assign requested address
   100, // Network is down
   101, // Network is unreachable
   102, // Network dropped connection because of reset
   103, // Software caused connection abort
   104, // Connection reset by peer
   105, // No buffer space available
   106, // Transport endpoint is already connected
   107, // Transport endpoint is not connected
   108, // Cannot send after transport endpoint shutdown
   109, // Too many references: cannot splice
   110, // Connection timed out
   111, // Connection refused
   112, // Host is down
   113, // No route to host
   114, // Operation already in progress
   115, // Operation now in progress
   122, // Quota exceeded
   123, // No medium found
   124, // Wrong medium type
   201, // Bad sequence number in file
   202, // Unexpected end-of-chain in file
   203, // Not a data block (B-block)
   204, // Bad file number in file
   240, // Shared port is not available
   300, // FAT mutex error
   301, // Root directory full
   302, // Not partitioned
   303, // Partition bad or unrecognized
   304, // Partition or volume not formatted
   305, // Bad type
   306, // Bad file/dir path string
   307, // Block marked bad on the device
   308, // Error detected in read data
   309, // Driver level is busy, new write not started
   310, // Cannot flush enough entries from cache to perform next read.
   311, // Parameter mismatch when registering a device.
   312, // Device not registered when _fatftc_devwrite called.
   313, // Not writing full physical sector in _fatftc_devwrite.
   314, // Rollback journal overflow.  Transaction requires too much data to be stored.
   315, // fatrj_transtart() called with transaction already open.
   316, // Internal error: a tied cache group is in an inconsistent state.
   317, // fatrj_setchk() called without transaction being open.
   318, // Transaction cannot contain both checkpoint and marker data.
   319, // File is in an invalid state.  Probably because the FATfile structure was not zero when opened for the first time.
   320, // Partition is in an invalid state.  This occurs if you are trying to delete a file when another file is being allocated, or vice versa
   321, // FAT filesystem appears to be corrupted
   322, // FAT write operation failed
   323, // FAT erase operation failed
   324, // FTL based device has too many bad blocks
   400, // No network error
   401, // Local host not reachable (ARP could not resolve)
   402, // Host not reachable (Router not resolved)
   403, // Host refused connection
   404, // Timout on open or close
   405, // Connection timed out (keepalive etc.)
   406, // Active abort sent from this peer
   407, // Timed out due to inactivity
   408, // DHCP lease expired
   409, // ICMP reported trouble
   410, // Protocol error e.g. bad ack number for TCP
   411, // Remote peer reset connection
   412, // ICMP error
   413, // ICMP error
   414, // ICMP error
   415, // ICMP error
   416, // ICMP error
   417, // ICMP error
   418, // ICMP error
   419, // ICMP error
   420, // ICMP error
   421, // ICMP error
   422, // ICMP error
   423, // ICMP error
   424, // ICMP error
   425, // ICMP error
   426, // ICMP error
   427, // ICMP error
   428, // ICMP error
   429, // ICMP error
   430, // ICMP error
   431, // ICMP error
   432, // ICMP error
   433, // ICMP error
   434, // IP address changed
   435, // No memory for buffer
   436, // IP address conflict detected
   437, // Interface down or deactivated
	438, // Timeout sending email
	439, // Invalid response from SMTP server
	440, // HTTP client: too many redirects
	450, // Could not open network socket
	451, // Cannot resolve hostname
	452, // data handler aborted
	453, // unable to attempt SMTP authentication
	454, // SMTP authentication failed
	460, // Nameserver resolve failed
	461, // Nameserver resolve timed out
	462, // Nameserver resolve handle invalid
	463, // Nameserver resolve no handles available
	464, // Nameserver resolve hostname too long
	465, // No nameserver available
   501, // aton2() encountered non-digit in IP address
   502, // aton2() encountered decimal field outside 0-255
   503, // aton2() encountered delimiter not '.' or ','.
   504, // aton2() did not find ']' for '['.
   505, // aton2() port number out of range.
   601, // watch log full
   602, // state machine has invalid state
   603, // user program ended
   604, // no handles available. Close something
   605, // Stack limit violation occurred in user mode
   606, // Processor attempted to execute system code while running in user mode
   607, // Write protection violation occurred in user mode
   608, // User syscall is undefined
   609, // No shadow register is associated with the I/O register being accessed
   610, // No more tcp or udp sockets are available
   701, // Secondary watchdog timeout
   702, // Assertion failure
   703, // Input compression buffer pool overflow
   704, // Output compression buffer pool overflow
   705, // Erroneous pointer assignment
   706, // Array index out of bounds
   707, // Stack corrupted
   708, // Stack overflow
   709, // Auxiliary stack overflow
   710, // Domain error
   711, // Range error
   712, // Floating point overflow
   713, // Long divide by zero
   714, // Long zero modulus error
   715, // Bad parameter passed to I/O function
   716, // Integer divide by zero
   717, // Unexpected interrupt
   718, // CoData structure trashed
   719, // Virtual watchdog timeout
   720, // Xmem allocation failed (out of memory).
   721, // Stack allocation failed (out of free stacks or size requested too large).
   722, // Stack deallocation failed (Stack address invalid).
   723, // Xmem allocation initialization failed
   724, // No virtual watchdog timers available
   725, // No valid MAC address for board
   726, // Invalid cofunction instance
   727, // Socket must be class 'static', not 'auto'
   728, // Attempt to switch to an invalid stack address
   729, // An RST 10 occurred, but the RST 10 vector is uninitialized
   730, // A syscall occurred, but the syscall vector is uninitialized
   731, // An RST 38 occurred, but the RST 38 vector is uninitialized
   732, // A slave port interrupt occurred, but the slave port vector is uninitialized
   733, // A write protect violation occurred, but the write protect violation vector is uninitialized
   734, // A timer A interrupt occurred, but the timer A interrupt vector is uninitialized
   735, // A timer B interrupt occurred, but the timer B interrupt vector is uninitialized
   736, // An interrupt for serial port B occurred, but the serial port B vector is uninitialized
   737, // An interrupt for serial port C occurred, but the serial port C vector is uninitialized
   738, // An interrupt for serial port D occurred, but the serial port D vector is uninitialized
   739, // An external interrupt 0 occurred, but the external interrupt 0 vector is uninitialized
   740, // An external interrupt 1 occurred, but the external interrupt 1 vector is uninitialized
   741, // A pulse width modulation interrupt occurred, but the pulse width modulation vector is uninitialized
   742, // A system mode violation interrupt occurred, but the system mode violation vector is uninitialized
   743, // A quadrature decoder interrupt occurred, but the quadrature decoder vector is uninitialized
   744, // An input capture interrupt occurred, but the input capture vector is uninitialized
   745, // A stack violation interrupt occurred, but the stack violation vector is uninitialized
   746, // An interrupt for serial port E occurred, but the serial port E vector is uninitialized
   747, // An interrupt for serial port F occurred, but the serial port F vector is uninitialized
   748, // The preloaded parallel flash driver made an unknown resource request
   749, // Initialization function not called
   750, // Library written for a different clock speed
   751, // Unexpected return from coprocess
   752, // Shared SPI device uC/OS-II mutex timeout error
   780, // Heap corruption detected
   781, // Heap usage error detected
   782, // Could not alloc system heap
   783, // Could not alloc application heap
   801, // Frame id of received message incorrect
   802, // Incorrect Radio firmware version
   803, // TX locked waiting for ND to end
   804, // Radio sent a message with status not zero
   805, // Calling AT functions within a callback is not allowed
	806, // Radio firmware download failed
   807, // Incorrect Radio firmware type

	901, // Memory allocation failure
   903, // Initialization failed to allocate new
                                        // resources (increase connections)
   908, // Overflowed a sequence
   911, // Remote user cancelled connection
   912, // Incoming message had wrong version
   913, // Incoming record message overflow
   916, // Unexpected message during read
   917, // Receieved a fatal alert
   919, // Internal error, the length of a record
                                        // received did not match header length
   921, // Unexpected message during handshake
   922, // Session ID in message too long
   923, // Peer attempted renegotiation when
                                        // not allowed.
   924, // Incorrect protocol version in client
                                        // hello message
   926, // could not find compatible ciphersuite
                                        // in client offer
   927, // Exchange keys wrong protocol version
   928, // Public-key signature verification failure
   929, // Internal public-key operation error
   930, // The finish message verification failed
   933, // Received a message from the client
                                        // that failed the record MAC check
   936, // The write of an alert failed (internal
                                        // write buffer overflow most likely)
   938, // Received record did not have length
													 // which was multiple of cipher block size
   939, // Protocol error in received record e.g.
													 // the record contents were shorter than
													 // expected for the given record type, or
													 // app data received when handshake
													 // incomplete
   940, // Record too large to fit in write buffer
   941, // Attempted to write record which did
													 // not have length
													 // which was multiple of cipher block size
   942, // Public-key encryption failure
   944,// Private-key decryption failure
   945,// Private-key signature failure
//----------
   951, // Bad certificate format
   952,
   953,
   954,
   955,
   956,
//----------

   960 // Inappropriate state to be attempting
													 // to send client hello.  State must be
													 // initial (SSL_STATE_LISTEN) or done
													 // (SSL_STATE_DONE).
  ,961 // Unknown TLS PSK identity.
  ,962 // Error parsing extensions in TLS hello.
  ,963 // Error decoding TLS message.
  ,964 // Illegal parameter in TLS message.
};

#define errmsg_size (sizeof(errmsg_indices) / sizeof(errmsg_indices[0]))
char __far *_error_message( int error, char __far *buffer)
{
	auto int guess_index; //< For searching index.
   // Interval : [lowest, highest)
   auto int lowest;
   auto int highest;
   auto int guess;

   // First take the absolute value of error.
   if (error < 0) {
		error = -error;
   }

   if (error <= errmsg_indices[errmsg_size - 1]) {
	   // Let's play guess the number.
	   lowest = 0;
	   highest = errmsg_size - 1;
	   while (lowest <= highest)
	   {
	      guess_index = (lowest + highest) / 2;
	      guess = errmsg_indices[guess_index];
	      if (guess < error)
	      {
	         lowest = guess_index + 1;
	      }
	      else if (guess > error)
	      {
	         highest = guess_index - 1;
	      }
	      else // if (guess == error)
	      {
	         // guess_index is the correct index.
	         return ((char __far * __far *) errmsg_xstrings)[guess_index];
	      }
	   }
	}

   // Couldn't find error in list of strings, print generic message to buffer.
	if (buffer) {
		sprintf( buffer, "Unknown error #%d", error);
	}
  	return buffer;
}

/*
	This test code only works if compiled in this module, since the error
	message lists are private.  Uncomment it to do testing, but recomment it
	before releasing.

int test_error_message()
{
	int i;
	unsigned err;

	for (i = 0; i < errmsg_size; ++i)
	{
		err = errmsg_indices[i];
		if (error_message(err) == 0)
		{
			printf( "FAILED: couldn't find error %d\n", err);
		}
	}

	printf( "DONE: %ls\n", strerror(0));
}
*/

/*** BeginHeader  ********************************************/
#endif
/*** EndHeader ***********************************************/


