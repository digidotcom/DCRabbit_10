/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/******************************************************************************
BOOTDEV_SF_API.LIB

DESCRIPTION:

  Public serial boot flash API functions:

    sbfWriteFlash() - Write to non-program, non-User/Sys ID
                      blocks of the serial boot flash.
    sbf_far_WriteFlash() - Far version of above.

    sbfRead()       - Read from serial boot flash
    sbf_far_Read()  - Far version of above.


  ATMEL AT45DB series are the only devices currently supported.

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __BOOTDEV_SF_API__
#define __BOOTDEV_SF_API__

#if RCM6600W_SERIES || RCM6700_SERIES
#use "r6000_bios.lib"
#endif

#if RCM4300_SERIES
#use "rcm43xx_bios.lib"
#endif



/*** EndHeader */

/*** BeginHeader  sbf_far_WriteFlash, sbfWriteFlash  */
 __xmem int sbfWriteFlash(unsigned long flashDst, const void* bufferSrc,
 																		unsigned len);
 __xmem int sbf_far_WriteFlash(unsigned long flashDst, const __far void* bufferSrc,
                                                     unsigned len);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
sbfWriteFlash                    <BOOTDEV_SF_API.LIB>

SYNTAX: int sbfWriteFlash(unsigned long flashDst, const void* bufferSrc,
                                                  unsigned len);

DESCRIPTION: Write len bytes (up to 64K) to physical address flashDst
from bufferSrc (near). This function is not reentrant.

NOTES:
      This function is not power-fail safe. The function writeUserBlock
      provides a safer way to store critical data using redundant copies.

      THIS FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE
      ERROR CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF
      THE SERIAL FLASH IS IN USE BY ANOTHER DEVICE. HOWEVER, IF USING
      uC/OS-II AND _SPI_USE_UCOS_MUTEX is #defined, IT CAN JUST BE CALLED
      ONCE.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

PARAMETER1:  the physical address of the flash destination
PARAMETER2:  pointer (near) to the source data
PARAMETER3:  number of bytes to write

RETURN VALUE:  0 - success
              -1 - attempt to write to User/ID block or program area

     The return values below are applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

          -EBUSY   - Flash chip is busy writing or erasing a page.
       positive N  -  SPI in use by device N. See above note also.

SEE ALSO:  _rcm43_InitUCOSMutex()

END DESCRIPTION *********************************************************/
_bootdev_debug
__xmem
int sbfWriteFlash(unsigned long flashDst, const void* bufferSrc, unsigned len)
{
   return sbf_far_WriteFlash(flashDst, bufferSrc, len);
}

/* START FUNCTION DESCRIPTION ********************************************
sbf_far_WriteFlash                    <BOOTDEV_SF_API.LIB>

SYNTAX: int sbf_far_WriteFlash(unsigned long flashDst,
											const far void* bufferSrc, unsigned len);

DESCRIPTION: Write len bytes (up to 64K) to physical address flashDst
from bufferSrc (far). This function is not reentrant.

NOTES:
      This function is not power-fail safe. The function writeUserBlock
      provides a safer way to store critical data using redundant copies.

      THIS FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE
      ERROR CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF
      THE SERIAL FLASH IS IN USE BY ANOTHER DEVICE. HOWEVER, IF USING
      uC/OS-II AND _SPI_USE_UCOS_MUTEX is #defined, IT CAN JUST BE CALLED
      ONCE.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

PARAMETER1:  the physical address of the flash destination
PARAMETER2:  pointer (far) to the source data
PARAMETER3:  number of bytes to write

RETURN VALUE:  0 - success
              -1 - attempt to write to User/ID block or program area

     The return values below are applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

          -EBUSY   - Flash chip is busy writing or erasing a page.
       positive N  -  SPI in use by device N. See above note also.

SEE ALSO:  _rcm43_InitUCOSMutex()

END DESCRIPTION *********************************************************/

_bootdev_debug
__xmem
int sbf_far_WriteFlash(unsigned long flashDst, const __far void* bufferSrc,
                                                    unsigned len)
{
    auto int rc;
    static  tempNAPCRShadow;

    __costate{
#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
      __waitfor(!(rc = _SPIgetSemaphore(SPI_SF)));

      #if RCM4300_SERIES
      tempNAPCRShadow = RdPortI(NAPCR);
      #endif
#endif

      //**** Check bounds ****
      if (flashDst < MAX_FIRMWARE_BINSIZE ||
         flashDst+len > SBF_USERBLOCK_BEGIN) {
         rc = -1;
         __abort;
      }

#ifndef _SPI_USE_UCOS_MUTEX
      // Will have to generalize for different flash types if and when
      // they are used.

      // Yield execution if busy, but don't yield the semaphore until
      // write complete
      __waitfor(-EBUSY != (rc=_sbf_write_AT45DB(flashDst, bufferSrc, len)));
#else
      // Use while if using preemptive multitasking so we only have
      // to call once ( _sbf_writef yields while waiting for flash
      // to finish some operations)
      while(-EBUSY == (rc=_sbf_write_AT45DB(flashDst, bufferSrc, len)));
#endif

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
		#if RCM4300_SERIES
      WrPortI(NAPCR,&NAPCRShadow,tempNAPCRShadow);
      #endif
      rc = _SPIfreeSemaphore(SPI_SF);
#endif
    }
    return rc;
}

/*** BeginHeader sbfWrite, sbf_far_Write, sbf_far_WriteVerify */
int sbfWrite(unsigned long offset, const void* src, unsigned len);
int sbf_far_Write(unsigned long offset, const __far void* src, unsigned len);
int sbf_far_WriteVerify(unsigned long offset, const __far void* src,
                                               unsigned len, int verify);
/*** EndHeader */
/**********************************************************************
   sbfWrite - Wrapper for backwards compatibility with near calls to _sbfWrite
   Simply calls the far version of this function with verification disabled.

   See comment for _sbf_far_WriteVerify for details.

   offset - address in serial flash
   src    - near ptr to data to write
   len    - number of bytes

   Returns
         0 - Successful completion.
     		Positive N -  SPI in use by device N
**********************************************************************/

_bootdev_debug
int sbfWrite(unsigned long offset, const void* src, unsigned len)
{
   return _sbf_far_WriteVerify(offset, src, len, FALSE);
}


/**********************************************************************
   sbf_far_Write - Far version of _sbfWrite.  Calls _sbf_far_WriteVerify
   with verification disabled.

   See comment for _sbf_far_WriteVerify for details.

   offset - address in serial flash
   src    - far ptr to data to write
   len    - number of bytes

   Returns
         0 - Successful completion.
     		Positive N -  SPI in use by device N
**********************************************************************/

_bootdev_debug
int sbf_far_Write(unsigned long offset, const __far void* src, unsigned len)
{
   return sbf_far_WriteVerify(offset, src, len, FALSE);
}


/**********************************************************************
   sbf_far_WriteVerify - Internal function to write to serial flash when
   using cooperative multi-tasking. Must be called repeatedly.

   Used internally by user block write routines.
   The difference between this function and sbfWriteFlash() is that
   that sbfWriteFlash() yields execution (not the semaphore) while
   the flash device is busy erasing or writing, and this function
   doesn't.

   If a more than _SPI_MAXTIME milliseconds elapse waiting for the SPI
   port to free up, a run time error ERR_SPI_MUTEX_ERROR (if using
   uCOS-II) or -ETIME (if not) will occur.

   offset - address in serial flash
   src    - far ptr to data to write
   len    - number of bytes
   verify - if not FALSE, verify that the contents of flash are correct


   Returns
         0 - Successful completion.
        -1 - Verification of write failed (only when verify is not FALSE).
     		Positive N -  SPI in use by device N
**********************************************************************/

_bootdev_debug
int sbf_far_WriteVerify(unsigned long offset, const __far void* src,
                                         unsigned len, int verify)
{
   auto int rc;

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
   static tempNAPCRShadow;

   if (!(rc = _SPIgetSemaphore(SPI_SF)))
   {
   	#if RCM4300_SERIES
      tempNAPCRShadow = RdPortI(NAPCR);
      #endif
#endif

#asm _bootdev_debug
      ld    hl, (sp+@SP+len)
      ld    bc, hl
      ld    px, (sp+@SP+src)
      ld    jkhl, (sp+@SP+offset)
      call  _sbf_far_BIOSwritef

      ld    hl, (sp+@SP+verify)
      test  hl
      jp    z, .verification_success  ;don't check if verify == FALSE
      //verify that the write is correct
      ld    hl, (sp+@SP+len)
      test  hl
      jp    z, .verification_success   ;don't bother checking if len == 0
      ld    bcde, (sp+@SP+offset)
      push  ix
      ld    ix, SBF_DR
ioi   ld    a, (ix)     ;clear serial port
      //send continuous read command
      call  _sbf_getPageAddr  ;expects flash address in BCDE
      call  _sbf_LdPageAddr
      ld    hl,_serFlashComBuffer
      ld    a, SBF_CONTREAD_COMMAND ;continuous read command
      ld    (hl),a
      ld    bc, SBF_CONTREAD_BYTES  ; Command + addr. bytes
      SFCSENABLE
      call  _sbfStreamOut        ;send read command to flash
      //compare input array against actual flash contents
      ld    hl, (sp+@SP+len+2)     ;compare this many bytes
      ld    bc, hl
      ld    px, (sp+@SP+src+2)     ;compare against this array
.verify_outer_loop:
      ld    a, SBF_SPI_CONTROL	; i.e. (sbf_spi_control_value) in Pilot Bios
      or    SPI_RXMASK
ioi   ld    (ix+_CR_OFFS), a  ; load RX control value
.verify_inner_loop:
ioi   bit   7, (ix+_SR_OFFS)  ;test receiver bit
      jr    z, .verify_inner_loop   ;spin if not done yet
ioi   ld    d, (ix)           ;get the byte from serial port
      ld    a, (px)           ;get the byte from the array
      cp    a, d
      jr    nz, .verification_failure
      ld    px, px+1          ;move on to next byte
      dwjnz .verify_outer_loop
      SFCSDISABLE
      pop   ix
      jp    .verification_success
.verification_failure:
      pop   ix
#endasm
#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES

     	#if RCM4300_SERIES
      WrPortI(NAPCR,&NAPCRShadow,tempNAPCRShadow);
      #endif
     _SPIfreeSemaphore(SPI_SF);
#endif
     return   -1;

#asm _bootdev_debug
.verification_success:
#endasm

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
		#if RCM4300_SERIES
      WrPortI(NAPCR,&NAPCRShadow,tempNAPCRShadow);
      #endif
      rc = _SPIfreeSemaphore(SPI_SF);
   }
#else
   rc = 0;
#endif

   return rc;
}


/*** BeginHeader  sbfRead, sbf_far_Read */
   int sbfRead(void *dest, unsigned long offset, unsigned nbytes);
   int sbf_far_Read(__far void *dest, unsigned long offset, unsigned nbytes);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
sbfRead                    <BOOTDEV_SF_API.LIB>

SYNTAX:  sbfRead(void *dest, unsigned long offset, unsigned nbytes);

DESCRIPTION:  Read up to 64K bytes from anywhere on the serial
              boot flash. This function supports both blocking mode
              for use with uC/OS-II and a mutex for preemptive
              multitasking, and non-blocking mode for cooperative
              multitasking.

PARAMETER1:  pointer (near) to the destination buffer
PARAMETER2:  the physical offset into the serial flash.
PARAMETER3:  number of bytes to read

NOTES:
      THIS FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE
      ERROR CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF
      THE SERIAL FLASH IS IN USE BY ANOTHER DEVICE. HOWEVER, IF USING
      uC/OS-II AND _SPI_USE_UCOS_MUTEX is #defined, IT CAN JUST BE CALLED
      ONCE.

     IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
     SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
     uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:  0 - success

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

     positive N  -  SPI in use by device N


SEE ALSO:  _rcm43_InitUCOSMutex()

END DESCRIPTION *********************************************************/

_bootdev_debug
int sbfRead(void *dest, unsigned long offset, unsigned nbytes)
{
   return sbf_far_Read(dest, offset, nbytes);
}


/* START FUNCTION DESCRIPTION ********************************************
sbf_far_Read                    <BOOTDEV_SF_API.LIB>

SYNTAX:  sbf_far_Read(far void *dest, unsigned long offset, unsigned nbytes);

DESCRIPTION:  Read up to 64K bytes from anywhere on the serial
              boot flash. This function supports both blocking mode
              for use with uC/OS-II and a mutex for preemptive
              multitasking, and non-blocking mode for cooperative
              multitasking.

PARAMETER1:  pointer (far) to the destination buffer
PARAMETER2:  the physical offset into the serial flash.
PARAMETER3:  number of bytes to read

NOTES:
      THIS FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE
      ERROR CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF
      THE SERIAL FLASH IS IN USE BY ANOTHER DEVICE. HOWEVER, IF USING
      uC/OS-II AND _SPI_USE_UCOS_MUTEX is #defined, IT CAN JUST BE CALLED
      ONCE.

     IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
     SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
     uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:  0 - success

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

     positive N  -  SPI in use by device N


SEE ALSO:  _rcm43_InitUCOSMutex()

END DESCRIPTION *********************************************************/

_bootdev_debug
int sbf_far_Read(__far void *dest, unsigned long offset, unsigned nbytes)
{
   auto int rc;

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
   static tempNAPCRShadow;

   if(!(rc = _SPIgetSemaphore(SPI_SF)))
   {
      #if RCM4300_SERIES
      tempNAPCRShadow = RdPortI(NAPCR);
      #endif
#endif

#asm
      ld hl,(sp+@SP+nbytes)
      ld bc,hl
      ld px,(sp+@SP+dest)
      ld jkhl,(sp+@SP+offset)
      call _sbf_far_BIOSreadf ;expects count in BC, source in JKHL, dest in PX
#endasm

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
      #if RCM4300_SERIES
      WrPortI(NAPCR,&NAPCRShadow,tempNAPCRShadow);
      #endif
      rc = _SPIfreeSemaphore(SPI_SF);
   }
#else
   rc = 0;
#endif

   return rc;
}

/*** BeginHeader sbf_ErasePage */
int sbf_ErasePage( unsigned long offset);
/*** EndHeader */
/* START _FUNCTION DESCRIPTION ********************************************
sbf_ErasePage                                         <bootdev_sflash.lib>

SYNTAX:	int sbf_ErasePage( unsigned long offset)

DESCRIPTION:	Erase the page containing the given address.

PARAMETER:	Address on the page to erase.

RETURN VALUE:
         0 - Successful completion.
     		positive N  -  SPI in use by device N

END DESCRIPTION **********************************************************/
_bootdev_debug
int sbf_ErasePage( unsigned long offset)
{
   auto int rc;

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
   static tempNAPCRShadow;

   if (!(rc = _SPIgetSemaphore(SPI_SF)))
   {
   	#if RCM4300_SERIES
      tempNAPCRShadow = RdPortI(NAPCR);
      #endif
#endif

#asm _bootdev_debug
		ld		bcde, (sp+@SP+offset)
		; flash offset in BCDE
      call  _sbf_getPageAddr  ; expects flash address in BCDE, returns BCDE
      ; BC = page#, DE = offset
      call  _sbf_LdPageAddr
      ; com buffer loaded with address bytes for a command
      call  _sbf_BusyWaitRDY
      SFCSENABLE
      _SF_ERASEPAGE
      SFCSDISABLE
      call  _sbf_BusyWaitRDY
#endasm

#if RCM4300_SERIES || RCM6600W_SERIES || RCM6700_SERIES
      #if RCM4300_SERIES
      WrPortI(NAPCR,&NAPCRShadow,tempNAPCRShadow);
      #endif
      rc = _SPIfreeSemaphore(SPI_SF);
   }
#else
   rc = 0;
#endif

   return rc;
}


/*** BeginHeader */
#endif	// __BOOTDEV_SF_API__
/*** EndHeader */