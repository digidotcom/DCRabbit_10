/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#if !defined __IDBLOCK_API_LIB
#define __IDBLOCK_API_LIB

#if RCM4300_SERIES
#use "rcm43xx_bios.lib"
#endif

#if _SERIAL_BOOT_FLASH_
	#ifndef __BOOTDEV_SF_API__
	#use "bootdev_sf_api.lib"
   #endif
#endif

/*** EndHeader */

/* START LIBRARY DESCRIPTION ***************************************************
IDBLOCK_API.LIB

DESCRIPTION:
   Functions to access the ID block in Rabbit Semiconductor product flash
   devices.

VERSION:
   5.0 (tableVersion = 5)
END DESCRIPTION ***************************************************************/


/*** BeginHeader writeUserBlock */
int writeUserBlock(unsigned, const void __far *, unsigned);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
writeUserBlock							<IDBLOCK_API.LIB>

SYNTAX: int writeUserBlock(unsigned addr, const void far *source,
									unsigned numbytes)


PARAMETER1:		Address offset in user block to write to.
PARAMETER2:		Pointer to source to copy data from.
PARAMETER3:		Number of bytes to copy.

DESCRIPTION:
Rabbit Semiconductor boards are released with System ID Blocks located on the
primary flash(See the Designer's Handbook) Version 2 and later of
this ID block has a pointer to a User ID Block which can be used for
storing calibration constants, passwords, and other non-volatile data.
This block is protected from normal write to the flash device and can
only be accessed through this function. This function writes a number
of bytes from root memory to the user block.

NOTE:  portions of the user block may be used by the
BIOS for your board to store values such as calibration constants!  See
the manual for your particular board for more information before
overwriting any part of the user block.

Backwards Compatibility:

If the version of the System ID block doesn't support the User ID block,
or no System ID block is present, then the 8K bytes starting 16K bytes
from the top of the primary flash are designated User ID block area.
However, to prevent errors arisng from incompatible large sector
configuartions, this will only work if the flash type is small sector.
Rabbit Semiconductor manufactured boards with large sector flash will have valid
System and User ID blocks, so this should not be problem on Rabbit Semiconductor
boards.

If users create boards with large sector flash, they must install
System ID blocks version 3 or greater to use this function, or modify
this function.

NOTE: WHEN USING A BOARD WITH SERIAL BOOTFLASH (e.g. RCM4300 Series), THIS
      FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE ERROR
      CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF THE
      SERIAL FLASH IS IN USE BY ANOTHER DEVICE.
         HOWEVER, IF USING uC/OS-II AND _SPI_USE_UCOS_MUTEX IS #defined,
      THEN IT ONLY NEEDS TO BE CALLED ONCE. SEE THE DESCRIPTION FOR
      _rcm43_InitUCOSMutex() FOR MORE INFORMATION ON USING THE uC/OS-II
      AND _SPI_USE_UCOS_MUTEX.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:	 0 if successful
					-1 invalid address or range
               -2 No valid user block found (block version 3 or later)
 				   -3 flash writing error

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

        positive N  (Serial flash only, SPI in use by device N)

END DESCRIPTION **********************************************************/

__nodebug
int writeUserBlock(unsigned addr, const void __far *source, unsigned numbytes)
{
	return _f_writeUserBlockArray(addr, &source, &numbytes, 1);
}

/*** BeginHeader writeUserBlockArray, _f_writeUserBlockArray */
int writeUserBlockArray(unsigned addr, const void * const sources[],
							   const unsigned numbytes[], int numsources);
int _f_writeUserBlockArray(unsigned addr, const void __far * const __far * sources,
							   const unsigned __far * numbytes, int numsources);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
writeUserBlockArray	<IDBLOCK_API.LIB>

SYNTAX: int writeUserBlockArray(unsigned addr, const void * const sources[],
                        const unsigned numbytes[], int numsources)
        int _f_writeUserBlockArray(unsigned addr,
        		            const void far * const far * sources,
                        const unsigned far * numbytes, int numsources)

PARAMETER1:		Address offset in user block to write to.
PARAMETER2:		Array of pointers to sources to copy data from.
PARAMETER3:		Array of number of bytes to copy for each source.
PARAMETER4:		Number of data sources.

DESCRIPTION:
Rabbit Semiconductor boards are released with System ID Blocks located
on the primary flash (See the Designer's Handbook).  Version 2 and later
of this ID block has a pointer to a User ID Block which can be used for
storing calibration constants, passwords, and other non-volatile data.
This block is protected from normal write to the flash device and can
only be accessed through this function. This function writes a set of
scattered data from root memory to the user block.

NOTE:  portions of the user block may be used by the
BIOS for your board to store values such as calibration constants!  See
the manual for your particular board for more information before
overwriting any part of the user block.

Backwards Compatibility:

If the version of the System ID block doesn't support the User ID block,
or no System ID block is present, then the 8K bytes starting 16K bytes
from the top of the primary flash are designated User ID block area.
However, to prevent errors arisng from incompatible large sector
configuartions, this will only work if the flash type is small sector.
Rabbit Semiconductor manufactured boards with large sector flash will
have valid System and User ID blocks, so this should not be problem on
Rabbit Semiconductor boards.

If users create boards with large sector flash, they must install
System ID blocks version 3 or greater to use this function, or modify
this function.

NOTE: WHEN USING A BOARD WITH SERIAL BOOTFLASH (e.g. RCM4300 Series), THIS
      FUNCTION SHOULD BE CALLED UNTIL IT RETURNS ZERO OR A NEGATIVE ERROR
      CODE. A POSITIVE RETURN VALUE INDICATES THAT THE SPI PORT OF THE
      SERIAL FLASH IS IN USE BY ANOTHER DEVICE.
         HOWEVER, IF USING uC/OS-II AND _SPI_USE_UCOS_MUTEX IS #defined,
      THEN IT ONLY NEEDS TO BE CALLED ONCE. SEE THE DESCRIPTION FOR
      _rcm43_InitUCOSMutex() FOR MORE INFORMATION ON USING THE uC/OS-II
      AND _SPI_USE_UCOS_MUTEX.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:	 0 if successful
					-1 invalid address or range
               -2 No valid user block found (block version 3 or later)
 				   -3 flash writing error

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

        positive N  (Serial flash only, SPI in use by device N)
END DESCRIPTION **********************************************************/

__nodebug
int writeUserBlockArray(unsigned addr, const void * const sources[],
                        const unsigned numbytes[], int numsources)
{
	#define _WUBA_MAX_SOURCES 50
	const void __far * s[_WUBA_MAX_SOURCES];
	word i;

	if (numsources > _WUBA_MAX_SOURCES)
		return -1;
	// Expand out the sources to far pointers
	for (i = 0; i < numsources; ++i)
		s[i] = sources[i];
	return _f_writeUserBlockArray(addr, s, numbytes, numsources);
}

__nodebug
void _wuba_init(void)
{
	// This function called from global init section in _f_writeUserBlockArray.
	// This avoids a bunch of static variables.
	long Mask, Offset;
   int Result;
   long longA,longB;

   // Call this internal version so we're not calling
   //  GetUserBlockInfo before its GLOBAL_INIT section has run.
   _GetUserBlockInfo(&savedUBI);

   if (savedUBI.blockSize) {
      // compare starting at top of combined ID/User Block images,
      //  and work down . . .
      Offset = savedUBI.totSize - sizeof(long);

      switch ((int) Offset & 3) {
      case 3:
         Mask = 0x00FFFFFFL;
         break;
      case 2:
         Mask = 0x0000FFFFL;
         break;
      case 1:
         Mask = 0x000000FFL;
         break;
      case 0:
      default:
         Mask = 0xFFFFFFFFL;
         break;
      }
#if !_SERIAL_BOOT_FLASH_
      Result = (xgetlong(savedUBI.addrA + Offset) & Mask) !=
               (xgetlong(savedUBI.addrB + Offset) & Mask);
#else
      _sbfReadUsr(&longA, savedUBI.addrA + Offset, sizeof(longA));
      longA = longA&Mask;
      _sbfReadUsr(&longB, savedUBI.addrB + Offset, sizeof(longB));
      longB = longB&Mask;
      Result = longA != longB;
#endif

      while (!Result && (Offset > 0L)) {
         // all other bytes in the ID/User Blocks images must match
         Offset -= sizeof(long);
#if !_SERIAL_BOOT_FLASH_
         Result = xgetlong(savedUBI.addrA+Offset) != xgetlong(savedUBI.addrB+Offset);
#else
         _sbfReadUsr(&longA,savedUBI.addrA+Offset, sizeof(longA));
         _sbfReadUsr(&longB,savedUBI.addrB+Offset, sizeof(longB));
         Result = longA != longB;
#endif
      }
      if (Result) {
#if !_SERIAL_BOOT_FLASH_
         // found a mismatch, repair the image copy!
         if (getFlashWriteMode() >= 0x10) {
            // Large and/or nonuniform sector flash ID/User Blocks
            //  destination image must be explicitly erased prior to
            //  copying.
            // (Don't bother pre-erasing byte-write mode uniform
            //  small sector flash ID/User Blocks destination image,
            //  each flash write involves a sector erase.  Similarly,
            //  don't bother erasing sector-write mode flash sectors,
            //  they have an automatic internal sector erase cycle.)
            EraseIUBlksImg(!savedUBI.blockAvalid);
         }
#endif
         // copy the valid image to the invalid image
         CopyIUBlksImg(!savedUBI.blockAvalid, 0ul, savedUBI.totSize);
      }
   }
}

__nodebug
int _f_writeUserBlockArray(unsigned addr, const void __far * const __far * sources,
                        const unsigned __far * numbytes, int numsources)
{
	_SBF_STATIC unsigned long physaddr;
	_SBF_STATIC int i, totalbytes;
	int retval = 0;

#GLOBAL_INIT { _wuba_init(); }

#if RCM4300_SERIES
	// do semaphore check before param. validity tests
	if(retval = _SPIgetSemaphore(SPI_SF))return retval;
#endif

	__costate {

	if (numsources < 0) {
	   retval = -1;
	   goto _wrArrayDone;
	}
	// Calculate the total number of bytes to write
	totalbytes = 0;
	for (i = 0; i < numsources; i++) {
		totalbytes += numbytes[i];
	}

	// check User Block address & size
	if (retval = CheckUserBlockRange(addr, totalbytes, 0))
    	goto _wrArrayDone;

   //*** set physical address for write to currently invalid User Block
   physaddr = savedUBI.blockAvalid ? savedUBI.addrB + addr : savedUBI.addrA + addr;
   // check if huge and/or nonuniform sector type flash
#if !_SERIAL_BOOT_FLASH_
      // Large and/or nonuniform sector flash ID/User Blocks
      //  destination image must be explicitly erased prior to
      //  copying.
      // (Don't bother pre-erasing byte-write mode uniform small
      //  sector flash ID/User Blocks destination image, each flash
      //  write involves a sector erase.  Similarly, don't bother
      //  erasing sector-write mode flash sectors, they have an
      //  automatic internal sector erase cycle.)
     EraseIUBlksImg(!savedUBI.blockAvalid);
#else
   // Not using such a mode for serial boot flash
#endif

#if !_SERIAL_BOOT_FLASH_
	//*** write to the (possibly invalid or simulated) User Block
	i = _f_WriteFlashArray(IDUSERBLOCKS_FLASHNUM, physaddr, sources, numbytes,
	                    numsources);
	// If the addresses given are wrong, report it
	if (i == -2) {
		retval = -1;
      goto  _wrArrayDone;
	} else if (i) {
		retval = -3;
      goto  _wrArrayDone;
	}
#else
   for (i=0; i<numsources; i++){
	  	__waitfor( (retval =
               sbf_far_Write(physaddr, sources[i], numbytes[i])) == 0);
      physaddr += numbytes[i];
   }

#endif

   // huge and/or nonuniform sector flash
   //*** replicate portion(s) of previously invalid ID/User Blocks
   if (addr > 0) {
#if !_SERIAL_BOOT_FLASH_
      // back-fill first portion of nonwritten User Block
      if (CopyIUBlksImg(!savedUBI.blockAvalid, 0ul, (unsigned long)addr))
      {
         retval = -3;
         goto  _wrArrayDone;
      }
#else
      __waitfor(0 == (retval = cmCopyIUBlksImg(
                               !savedUBI.blockAvalid, 0ul,
                                 (unsigned long)addr )) ) ;
#endif
   }
   // always back-fill second portion of nonwritten ID/User Blocks
   //  (this also validates the previously invalid image)
   physaddr = (unsigned long) addr + totalbytes;

#if !_SERIAL_BOOT_FLASH_
   if (CopyIUBlksImg(!savedUBI.blockAvalid,
   			physaddr, savedUBI.totSize - physaddr)) {
      retval = -3;
      goto  _wrArrayDone;
   }
#else
   __waitfor(!(retval = cmCopyIUBlksImg(!savedUBI.blockAvalid,
       		physaddr, savedUBI.totSize - physaddr)));
#endif

   //*** erase previously valid ID/User Blocks image
#if !_SERIAL_BOOT_FLASH_
   EraseIUBlksImg(savedUBI.blockAvalid);
#else
   __waitfor((retval = EraseIUBlksImg(savedUBI.blockAvalid)) == 0);
#endif

   //*** copy remainder of ID/User Blocks image here
#if !_SERIAL_BOOT_FLASH_
   if (CopyIUBlksImg(savedUBI.blockAvalid,
   					0ul, savedUBI.totSize)) {
      retval = -3;
      goto  _wrArrayDone;
   }
#else
   __waitfor(!(retval = cmCopyIUBlksImg(savedUBI.blockAvalid,
   					0ul, savedUBI.totSize)));
#endif
   retval = 0;
_wrArrayDone: (void)0;
 }  // End costate
 return retval;
}

/******************************************************************************/
/*** BeginHeader scatterUserBlockArray */
/*
This is similar to _f_writeUserBlockArray(), except that instead of a
single destination offset parameter (addr), it supports scattering data
to multiple offsets in the block.

If there is insufficient source data to fill the specified destination(s),
or there is insufficient destination data size for the given amount of
source data, then no data is written and -EPERM is returned.

Can return -EINVAL if the destination areas overlap or go outside the
bounds of the userid block.  Source areas are allowed to overlap.

Can return -ENOMEM if there are too many separate extents which are
to be written to the flash block.  There may be up to numdests+numsources-1
non-overlapping extents to write.  If this is more than about 30, then
_sys_malloc is used to obtain a temporary work area for computing and
sorting the extents.  If malloc fails, then -ENOMEM is returned.

The entire block is updated, and a single update is performed.  Thus, the
update is atomic.  This is intended for use with SUBFS (Simple User Block
File System).
*/
int scatterUserBlockArray(
								const unsigned __far * dest_offs,
							   const unsigned __far * dest_bytes,
							   unsigned numdests,
								const void __far * const __far * sources,
							   const unsigned __far * numbytes,
							   unsigned numsources);

typedef struct UBExtent {
	unsigned		offs;
	unsigned		len;
	const void __far * source;
} UBExtent_t;

/*** EndHeader */

// Comparison function for sorting small extents
__nodebug
int _ub_compare_uextent(UBExtent_t __far *a, UBExtent_t __far *b)
{
	// Increasing offset.
	return a->offs - b->offs;
}


__nodebug
int scatterUserBlockArray(
								const unsigned __far * dest_offs,
							   const unsigned __far * dest_bytes,
							   unsigned numdests,
								const void __far * const __far * sources,
							   const unsigned __far * numbytes,
							   unsigned numsources)
{
	_SBF_STATIC UBExtent_t __far * ux = NULL;
	_SBF_STATIC UBExtent_t __far * x;
	_SBF_STATIC unsigned n, m;	// Final number of small extents
	unsigned bd, bs;		// Bytes (remaining) in current dest, source extent
	unsigned nd, ns;		// Extent number of current dest, source being examined
	int retval = 0;

#if RCM4300_SERIES
	// do semaphore check before param. validity tests
	if (retval = _SPIgetSemaphore(SPI_SF))
		return retval;
#endif

	__costate {

	if (ux)
		// Free it if left from previous invocation (e.g. caller abandoned
		// non-blocking call sequence)
		_sys_free(ux);
	// Max entries required is one less than dest plus source extents.
	ux = (UBExtent_t __far *)_sys_malloc(
					sizeof(UBExtent_t) * (numdests + numsources - 1));
	if (!ux)
		return -ENOMEM;
	x = ux;
	bs = numbytes[ns = 0];
	bd = dest_bytes[nd = 0];
	while (ns < numsources && nd < numdests) {
      x->offs = dest_offs[nd] + dest_bytes[nd] - bd;
      x->source = (const char __far *)sources[ns] + (numbytes[ns] - bs);
		if (bs < bd) {
			// Pack next source into this dest extent
			if (bs) {
	         x->len = bs;
	         ++x;
	      }
			bd -= bs;
			bs = numbytes[++ns];
		}
		else if (bd < bs) {
			// finish this dest extent, start filling next
			if (bd) {
	         x->len = bd;
	         ++x;
			}
			bs -= bd;
			bd = dest_bytes[++nd];
		}
		else {
			// source and dest both finished
			if (bd) {
	         x->len = bd;
	         ++x;
			}
			bd = dest_bytes[++nd];
			bs = numbytes[++ns];
		}
	}
	if (ns != numsources || nd != numdests) {
		// Didn't finish with exact equality
		retval = -EPERM;
		goto _exit;
	}

	n = (unsigned)(x - ux);
	// Now have list of n small extents.  These need to be sorted in
	// ascending dest offset order, so that we can check for non-overlap
	// and optimize the backfill process.
	_f_qsort(ux, n, sizeof(ux[0]), _ub_compare_uextent);

	// Check overlap
	for (m = 0, x = ux; m < n; ++m, ++x) {
		if (CheckUserBlockRange(x->offs, x->len, 0) ||
			 m+1 < n && x->offs + x->len > x[1].offs) {
			retval = -EINVAL;
			goto _exit;
		}
	}

	// All OK so far, actually perform the write, interleaving the backfill
	// and new data
#ifdef IDBLOCK_SCATTER_VERBOSE
	printf("\n+++++++ UB scatter ++++++++\n");
	for (m = 0, x = ux; m < n; ++m, ++x) {
		if (!m && x->offs > 0)
			printf("BF [%5u..%5u] (%5u)\n", 0, x->offs-1, x->offs);
		printf("N  [%5u..%5u] (%5u) <- [%06lX..%06lX]\n",
				x->offs, x->offs+x->len-1, x->len, x->source, (char __far *)x->source+x->len-1);
		if (m+1 < n) {
			if (x->offs+x->len != x[1].offs)
				printf("BF [%5u..%5u] (%5u)\n", x->offs+x->len, x[1].offs-1,
						x[1].offs - (x->offs+x->len));
		}
		else
			printf("BF [%5u..%5u] (%5u)\n", x->offs+x->len,
					  (unsigned)(savedUBI.totSize-1),
						(unsigned)(savedUBI.totSize - (x->offs+x->len)));
	}
#endif


#if !_SERIAL_BOOT_FLASH_
	// Large and/or nonuniform sector flash ID/User Blocks
	//  destination image must be explicitly erased prior to
	//  copying.
	EraseIUBlksImg(!savedUBI.blockAvalid);
#endif

	if (ux->offs > 0) {
		// Back fill initial
#if !_SERIAL_BOOT_FLASH_
      // back-fill first portion of nonwritten User Block
      if (CopyIUBlksImg(!savedUBI.blockAvalid, 0ul, ux->offs)) {
         retval = -EIO;
         goto  _exit;
      }
#else
      __waitfor(!(retval = cmCopyIUBlksImg(
                               !savedUBI.blockAvalid, 0ul, ux->offs)));
#endif

	}
	for (m = 0; m < n; ++m) {
		x = ux + m;
#if !_SERIAL_BOOT_FLASH_
	   // write small extent new data
	   retval = _f_WriteFlashArray(
	   				IDUSERBLOCKS_FLASHNUM,
	   				(savedUBI.blockAvalid ? savedUBI.addrB : savedUBI.addrA) + x->offs,
	   				&x->source,
	   				&x->len, 1);
	   if (retval) {
	      retval = -EIO;
	      goto  _exit;
	   }
#else
      __waitfor(!(retval =
      			sbf_far_Write((savedUBI.blockAvalid ? savedUBI.addrB : savedUBI.addrA) + x->offs,
      			x->source, x->len)));
#endif
		if (m+1 < n) {
			if (x->offs+x->len != x[1].offs) {
	   #if !_SERIAL_BOOT_FLASH_
	         // back-fill areas between small extents
	         if (CopyIUBlksImg(!savedUBI.blockAvalid, x->offs+x->len,
	         								x[1].offs - (x->offs+x->len))) {
	            retval = -EIO;
	            goto  _exit;
	         }
	   #else
	         __waitfor(!(retval = cmCopyIUBlksImg(
	                                  !savedUBI.blockAvalid,x->offs+x->len,
	         								x[1].offs - (x->offs+x->len))));
	   #endif
			}
		}
		else {
	   #if !_SERIAL_BOOT_FLASH_
	         // back-fill from last small extent to end
	         if (CopyIUBlksImg(!savedUBI.blockAvalid, x->offs+x->len,
	         			savedUBI.totSize - (x->offs+x->len))) {
	            retval = -EIO;
	            goto  _exit;
	         }
	   #else
	         __waitfor(!(retval = cmCopyIUBlksImg(
	         			!savedUBI.blockAvalid,x->offs+x->len,
	         			savedUBI.totSize - (x->offs+x->len))));
	   #endif
		}
	}


   //*** erase previously valid ID/User Blocks image
#if !_SERIAL_BOOT_FLASH_
   EraseIUBlksImg(savedUBI.blockAvalid);
#else
   __waitfor(!(retval = EraseIUBlksImg(savedUBI.blockAvalid)));
#endif

   //*** mirror the image here
#if !_SERIAL_BOOT_FLASH_
   if (CopyIUBlksImg(savedUBI.blockAvalid,
   					0ul, savedUBI.totSize)) {
      retval = -EIO;
      goto  _exit;
   }
#else
   __waitfor(!(retval = cmCopyIUBlksImg(savedUBI.blockAvalid,
   					0ul, savedUBI.totSize)));
#endif


_exit:
	if (ux) {
		_sys_free(ux);
		ux = NULL;
	}

	}  // End costate

	return retval;
}




/*** BeginHeader readUserBlock */
int readUserBlock(void __far *, unsigned, unsigned);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
readUserBlock								<IDBLOCK_API.LIB>

SYNTAX: int readUserBlock(void far *dest, unsigned addr, unsigned numbytes)

PARAMETER1:		Pointer to destination to copy data to.
PARAMETER2:		Address offset in user block to read from.
PARAMETER3:		Number of bytes to copy.

DESCRIPTION:	Reads a number of bytes from the user block on the
primary flash to a buffer in root memory.  NOTE:  portions of the user
block may be used by the BIOS for your board to store values such as
calibration constants!  See the manual for your particular board for
more information before overwriting any part of the user block.

See writeUserBlock for more details.

NOTE: WHEN USING A BOARD WITH SERIAL BOOTFLASH SHARING AN SPI PORT,
      (e.g. RCM4300 Series), THIS FUNCTION SHOULD BE CALLED UNTIL
      IT RETURNS ZERO OR A NEGATIVE ERROR CODE. A POSITIVE RETURN
      VALUE INDICATES THAT THE SPI PORT OF THE SERIAL FLASH IS IN USE
      BY ANOTHER DEVICE.
         HOWEVER, IF USING uC/OS-II AND _SPI_USE_UCOS_MUTEX IS #defined,
      THEN IT ONLY NEEDS TO BE CALLED ONCE. SEE THE DESCRIPTION FOR
      _rcm43_InitUCOSMutex() FOR MORE INFORMATION ON USING THE uC/OS-II
      AND _SPI_USE_UCOS_MUTEX.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:	 0 if successful
					-1 invalid address or range
               -2 No valid ID block found (block version 3 or later)

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

        positive N  (Serial flash only, SPI in use by device N)
END DESCRIPTION **********************************************************/



__nodebug
int readUserBlock(void __far * dest, unsigned addr, unsigned numbytes)
{
	int result = 0;
#if _SERIAL_BOOT_FLASH_
   __costate{
#endif

		// check User Block address & size
		if (CheckUserBlockRange(addr, numbytes, 1))
			goto _exitReadUB;

#if !_SERIAL_BOOT_FLASH_
		_f_memcpy(dest, (__far void *)((savedUBI.blockAvalid ?
									savedUBI.addrA : savedUBI.addrB) + addr), numbytes);
 _exitReadUB:
		return 0;
#else
	   __waitfor((result = sbf_far_Read(dest, (savedUBI.blockAvalid ?
	   							savedUBI.addrA : savedUBI.addrB) + addr, numbytes)) == 0);
 _exitReadUB: (void)0; // Null statement for label
   }
   return result;
#endif
}

/*** BeginHeader readUserBlockArray, _f_readUserBlockArray */
int readUserBlockArray(void * const dests[],
                       const unsigned numbytes[], int numdests,
                       unsigned addr);
int _f_readUserBlockArray(void __far * const __far * dests,
                       const unsigned __far * numbytes, int numdests,
                       unsigned addr);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
readUserBlockArray			<IDBLOCK_API.LIB>

SYNTAX: int readUserBlockArray(void * const dests[],
                       const unsigned numbytes[], int numdests,
                       unsigned addr)
        int _f_readUserBlockArray(void far * const far * dests,
                       const unsigned far * numbytes, int numdests,
                       unsigned addr)

PARAMETER1:		Pointer to array of destinations to copy data to.
PARAMETER2:		Array of numbers of bytes to be written to each
					destination.
PARAMETER3:		Number of destinations.
PARAMETER4:		Address offset in user block to read from.

DESCRIPTION:	Reads a number of bytes from the user block on the
primary flash to a set of buffers in root memory.  This function is
usually used as the inverse function of writeUserBlockArray.
NOTE:  portions of the user block may be used by the BIOS for your
board to store values such as calibration constants!  See the manual
for your particular board for more information before overwriting any
part of the user block.

See writeUserBlockArray for more details.

NOTE: WHEN USING A BOARD WITH SERIAL BOOTFLASH SHARING AN SPI PORT,
      (e.g. RCM4300 Series), THIS FUNCTION SHOULD BE CALLED UNTIL
      IT RETURNS ZERO OR A NEGATIVE ERROR CODE. A POSITIVE RETURN
      VALUE INDICATES THAT THE SPI PORT OF THE SERIAL FLASH IS IN USE
      BY ANOTHER DEVICE.
         HOWEVER, IF USING uC/OS-II AND _SPI_USE_UCOS_MUTEX IS #defined,
      THEN IT ONLY NEEDS TO BE CALLED ONCE. SEE THE DESCRIPTION FOR
      _rcm43_InitUCOSMutex() FOR MORE INFORMATION ON USING THE uC/OS-II
      AND _SPI_USE_UCOS_MUTEX.

      IF MORE THAN _SPI_MAXTIME MILLISECONDS ELAPSE WAITING FOR THE
      SPI PORT TO FREE UP, A RUN TIME ERROR: ERR_SPI_MUTEX_ERROR (if using
      uCOS-II), OR -ETIME (if not using uCOS-II) WILL OCCUR.

RETURN VALUE:	 0 if successful
					-1 invalid address or range
               -2 No valid ID block found (block version 3 or later)

     The return value below is applicable only if _SPI_USE_UCOS_MUTEX
     is not #defined:

        positive N  (Serial flash only, SPI in use by device N)
END DESCRIPTION **********************************************************/

__nodebug
int readUserBlockArray(void * const dests[],
                       const unsigned numbytes[], int numdests,
                       unsigned addr)
{
	#define _RUBA_MAX_DESTS 50
	const void __far * d[_RUBA_MAX_DESTS];
	word i;

	if (numdests > _RUBA_MAX_DESTS)
		return -1;
	// Expand out the sources to far pointers
	for (i = 0; i < numdests; ++i)
		d[i] = dests[i];
	return _f_readUserBlockArray((void __far * const __far *)d, numbytes, numdests, addr);
}

__nodebug
int _f_readUserBlockArray(void __far * const __far * dests,
                       const unsigned __far * numbytes, int numdests,
                       unsigned addr)
{
	_SBF_STATIC int i;
	_SBF_STATIC unsigned offset;
	int retval;

	if (numdests < 0) {
		return -1;
	}
#if _SERIAL_BOOT_FLASH_
   __costate{
#endif
		offset = 0;
		for (i = 0; i < numdests; i++) {
#if !_SERIAL_BOOT_FLASH_
			if(retval = readUserBlock(dests[i], addr + offset, numbytes[i])){
         	return retval;
         }
#else
			__waitfor(0==(retval = readUserBlock(dests[i], addr + offset, numbytes[i])));
#endif
			if (!retval)
				offset += numbytes[i];
         else
            break;
      }
#if _SERIAL_BOOT_FLASH_
   }
#endif
	return retval;
}

/*** BeginHeader CopyIUBlksImg */
int CopyIUBlksImg(int toImgA, unsigned long Offset,
                  unsigned long Size);
/*** EndHeader */

// This function is only for during initialization before costates
// are initialized or for non-serial boot flashes
__nodebug
int CopyIUBlksImg(int toImgA, unsigned long Offset,
                  unsigned long Size)
{
   int result, lastblock;
   unsigned writeSize;
   unsigned long destAddr, srcAddr;


   if (!savedUBI.blockSize) {
      result = -2;
      goto _exitCIUBI;
   }


   if (Offset >= savedUBI.totSize) {
      result = -1;
      goto _exitCIUBI;
   }

   if ((Offset + Size) > savedUBI.totSize) {
      result = -1;
      goto _exitCIUBI;
   }

   if (toImgA) {
      destAddr = savedUBI.addrA + Offset;
      srcAddr = savedUBI.addrB + Offset;
   }
   else {
      destAddr = savedUBI.addrB + Offset;
      srcAddr = savedUBI.addrA + Offset;
   }
   // initialize result to allow while loop entry
   result = 0;
   lastblock = 0;
#if !_SERIAL_BOOT_FLASH_
	// Do this in 4k chunks aligned to 4k.  Gives best chance of
	// efficiency with various parallel flash technology.
	writeSize = 4096 - (unsigned) (srcAddr & 4095ul);
   while (!result && Size) {
	   if (Size < (unsigned long) writeSize) {
	      writeSize = (unsigned) Size;
	      lastblock = 1;
	   }
	   if (memcmp((void __far *)destAddr, (void __far *)srcAddr, writeSize))
	      result = _f_WriteFlashArray(IDUSERBLOCKS_FLASHNUM, destAddr,
	                                  (const void __far * const __far *) &srcAddr,
	                                  &writeSize, 1);
      destAddr += writeSize;
      srcAddr += writeSize;
      Size -= writeSize;
		if (!lastblock)
			writeSize = 4096;
   }
#else
	// Serial boot flash.
   // set up initial flash write size for either partial or full buffer
   //  (do NOT change the following 0x7Ful mask!)
   writeSize = sizeof(_ub_sBuf) - (unsigned) (srcAddr & (sizeof(_ub_sBuf)-1));
   while (Size) {
	   if (Size < (unsigned long) writeSize) {
	      writeSize = (unsigned) Size;
	      lastblock = 1;
	   }
		// Serial boot flash.  It's worth doing in chunks of 128 because we
		// assume a lot of the time the data won't change e.g. when backfilling
		// parts of userID block which don't change.
      _sbf_far_ReadUsr(_ub_sBuf, srcAddr, writeSize);
      _sbf_far_ReadUsr(_ub_dBuf, destAddr, writeSize);
      if (memcmp(_ub_dBuf, _ub_sBuf, writeSize)) {
#asm
         ld    px,_ub_sBuf
         ld    hl,(sp+@sp+writeSize)
         ld		bc,hl
         ld    jkhl,(sp+@sp+destAddr)
         call _sbf_far_BIOSwritef
#endasm
      }
      destAddr += writeSize;
      srcAddr += writeSize;
      Size -= writeSize;
		if (!lastblock)
			writeSize = sizeof(_ub_sBuf);
   }
#endif
_exitCIUBI:
	return result;
}

/*** BeginHeader cmCopyIUBlksImg */
// This is the same as the above function except for use of
// a costate
int cmCopyIUBlksImg(int toImgA, unsigned long Offset,
                  unsigned long Size);
/*** EndHeader */

__nodebug
int cmCopyIUBlksImg(int toImgA, unsigned long Offset,
                  unsigned long Size)
{
#if _SERIAL_BOOT_FLASH_
   static int result;
   static int lastblock;
   static unsigned writeSize;
   static unsigned long destAddr, srcAddr;

   __costate{

      if (Offset >= savedUBI.totSize) {
         result = -1;
         goto _exitcmCIUBI;
      }

      if ((Offset + Size) > savedUBI.totSize) {
         result = -1;
         goto _exitcmCIUBI;
      }

      if (toImgA) {
         destAddr = savedUBI.addrA + Offset;
         srcAddr = savedUBI.addrB + Offset;
      }
      else {
         destAddr = savedUBI.addrB + Offset;
         srcAddr = savedUBI.addrA + Offset;
      }

      result = 0;
      lastblock = 0;

      // set up initial flash write size for either partial or full buffer
      writeSize = sizeof(_ub_sBuf) - (unsigned) (srcAddr & (sizeof(_ub_sBuf)-1));
      while (!result && Size) {
	      if (Size < (unsigned long) writeSize) {
	         writeSize = (unsigned) Size;
	         lastblock = 1;
	      }
         sbf_far_Read(_ub_dBuf, destAddr, writeSize);
         sbf_far_Read(_ub_sBuf, srcAddr, writeSize);

         if (memcmp(_ub_dBuf, _ub_sBuf, writeSize)) {
            // in params below, treat Source, writeSize as single element arrays!
            __waitfor((result= sbf_far_Write(destAddr,_ub_sBuf,writeSize)) == 0);
            if(result) break;
         }
         destAddr += writeSize;
         srcAddr += writeSize;
         Size -= writeSize;
	      if (!lastblock)
	         writeSize = sizeof(_ub_sBuf);
      }  // End while
   }
_exitcmCIUBI:
	return result;
#endif
}


/*** BeginHeader EraseIUBlksImg */
int EraseIUBlksImg(int isImgA);
/*** EndHeader */

__nodebug
int EraseIUBlksImg(int isImgA)
{
#if !_SERIAL_BOOT_FLASH_
   auto int result;
   auto unsigned long imgEndAddress, imgStartAddress;

	if (!savedUBI.blockSize) {
		return -2;
	}

	if (!SysIDBlock.userBlockSize && SysIDBlock.idBlock2.userBlockSiz2) {
		if (isImgA) {
			imgEndAddress = savedUBI.addrA + SysIDBlock.idBlock2.userBlockSiz2 + 5ul;
			imgStartAddress = savedUBI.addrA;
		} else {
			imgEndAddress = savedUBI.addrB + SysIDBlock.idBlock2.userBlockSiz2 + 5ul;
			imgStartAddress = savedUBI.addrB;
		}
	} else {
		if (isImgA) {
			imgEndAddress = savedUBI.topAddr - 1L;
			imgStartAddress = savedUBI.addrA;
		} else {
			imgEndAddress = savedUBI.addrA - 1L;
			imgStartAddress = savedUBI.addrB;
		}
	}

#asm __nodebug
		; Erase from the image's ID Block sector on down to immediately
		;  invalidate the image, in case it is not already invalid!
		ld		bcde, (sp+@SP+imgEndAddress)
      push	bcde
      ld		bcde, (sp+@sp+4+imgStartAddress)
      push	bcde
      call	_EraseFlashRange
      add	sp, 8
      clr	hl		; At the moment, _EraseFlashRange doesn't have a return value.
		ld		(sp+@SP+result), hl
#endasm

	return result;
#else

   // It's a serial boot flash. Must call until 0 or time-out

   unsigned long markerAddr;
   static char invalid;

	markerAddr = (isImgA ? savedUBI.addrA : savedUBI.addrB) +
							SysIDBlock.idBlock2.userBlockSiz2 + 6ul;
   invalid = 0xff;

   // Just invalidte the appropriate marker and let the serial
   //  flash driver worry about erasing.
   return sbfWrite(markerAddr, &invalid, 1);
#endif
}

/*** BeginHeader CheckUserBlockRange */
int CheckUserBlockRange(unsigned addr,
                        unsigned numbytes, int readOnly);
/*** EndHeader */

__nodebug
int CheckUserBlockRange(unsigned addr,
                        unsigned numbytes, int readOnly)
{
	// ensure that User block exists
	if (!savedUBI.blockSize) {
		return -2;	// no User block found
	}

	if (readOnly) {
		//*** check for out of range read (readUserBlock is allowed to
		//***  inspect anything up to top of ID block)
		if (((unsigned long) addr >= (savedUBI.topAddr - savedUBI.addrA)) ||
		    (((unsigned long) addr + numbytes) > (savedUBI.topAddr - savedUBI.addrA)))
		{
			return -1;	// invalid address
		}
	} else {
		//*** check for out of range write
		if (((unsigned long) addr >= savedUBI.blockSize) ||
		    (((unsigned long) addr + numbytes) > savedUBI.blockSize))
		{
			return -1;	// invalid address
		}
	}

	return 0;
}



/*** BeginHeader  ********************************************/
#endif
/*** EndHeader ***********************************************/