/*
 * Copyright (c) 2016 Digi International Inc.
 * SHA-384/SHA-512 implementation for Rabbit 4000/5000/6000 microprocessors.
 * (see SHA2.LIB for the SHA-224/SHA-256 implementation)
 *
 * based on nss-3.23/nss/lib/freebl/sha512.c:
 *
 * sha512.c - implementation of SHA224, SHA256, SHA384 and SHA512
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*** BeginHeader */
#ifndef __SHA512_LIB__
#define __SHA512_LIB__

#ifdef SHA512_DEBUG
	#define _sha512_debug __debug
#else
	#define _sha512_debug __nodebug
#endif

#include <stdint.h>

// include support for 64-bit integers
#include <endian.h>
#include <xbee/jslong_glue.h>
#use "jslong.c"
#define JSU64_INIT(hi,lo) { 0x ## lo ## U, 0x ## hi ## U }

typedef struct sha512_context {
	union {
	   JSUint64 w[16];       /* input buffer */
	   uint8_t  b[128];
	} u;
	JSUint64 h[8];       /* 8 state variables */
	JSUint64 sizeLo;     /* 64-bit count of hashed bytes. */
} sha512_context;

#define SHA512_BLOCK_LENGTH         128     /* input block size (in bytes) */
#define SHA512_LENGTH               64      /* bytes produced by hash */

typedef sha512_context sha384_context;
#define SHA384_BLOCK_LENGTH         128     /* input block size (in bytes) */
#define SHA384_LENGTH               48      /* bytes produced by hash */
/*** EndHeader */

/*** BeginHeader sha512_init, sha512_add, sha_copy_and_swap64 */
void sha512_init(sha512_context __far *ctx);
void sha512_add(sha512_context __far *ctx,
                const uint8_t __far *input,
                uint16_t inputLen);
__xmem
void sha_copy_and_swap64(void __far* dest, const void __far* src, word count);
__xmem void _byteswap8(void __far *value);
__xmem void _addto(const JSUint64 __far *source, JSUint64 __far *dest);
void sha512_process(sha512_context __far *ctx,
                    const uint8_t __far data[128]);
/*** EndHeader */

/* ============= Common constants and defines ======================= */

#if _RAB6K
	#define SWAP_BCDE swap bcde                                  // 4 clocks
#else
	#define SWAP_BCDE rlc 8, bcde $ ld a, b $ ld b, d $ ld d, a  // 12 clocks
#endif

//   Copy 'count' 64-bit values from src to dest, byte swapping them into
//   reverse endianness.
_sha512_debug __xmem
void sha_copy_and_swap64(void __far* dest, const void __far* src, word count)
{
	#asm
   ; dest already in PX
	ld hl, (sp+@sp+count)
   ld bc, hl
   ld py, (sp+@sp+src)	; source in PY
   
.loop:
	ex jkhl, bcde
	ld bcde, (py+4)
	SWAP_BCDE
	ld (px+0), bcde
	ld bcde, (py+0)
	SWAP_BCDE
	ld (px+4), bcde

   ld px, px+8
   ld py, py+8
   
	ex jkhl, bcde
   dwjnz	.loop
	#endasm
}

// swap a 4-byte or 8-byte value in place
#asm __xmem __nodebug
_byteswap8::
	ld pz, (px)
   
	ld bcde, (px+4)
	SWAP_BCDE
   ld (px), bcde
   
	ld bcde, pz
	SWAP_BCDE
   ld (px+4), bcde

	lret

_addto::
	; px already holds first parameter (source)
	ld py, (sp+7)
	; dest->lo += source->lo
	ld jkhl, (px)
	ld bcde, (py)
	add jkhl, bcde
	ld (py), jkhl

	; dest->hi += source->hi + carry
	ld jkhl, 0
	adc hl, hl

	ld bcde, (px+4)
	add jkhl, bcde

	ld bcde, (py+4)
	add jkhl, bcde
	ld (py+4), jkhl
	lret
#endasm

/* ======= SHA512 and SHA384 common constants and defines ================= */

/* common #defines for SHA512 and SHA384 */

/* SHA-384 and SHA-512 constants, K512. */
const __far JSUint64 K512[80] = {
    JSU64_INIT(428a2f98,d728ae22), JSU64_INIT(71374491,23ef65cd),
    JSU64_INIT(b5c0fbcf,ec4d3b2f), JSU64_INIT(e9b5dba5,8189dbbc),
    JSU64_INIT(3956c25b,f348b538), JSU64_INIT(59f111f1,b605d019),
    JSU64_INIT(923f82a4,af194f9b), JSU64_INIT(ab1c5ed5,da6d8118),
    JSU64_INIT(d807aa98,a3030242), JSU64_INIT(12835b01,45706fbe),
    JSU64_INIT(243185be,4ee4b28c), JSU64_INIT(550c7dc3,d5ffb4e2),
    JSU64_INIT(72be5d74,f27b896f), JSU64_INIT(80deb1fe,3b1696b1),
    JSU64_INIT(9bdc06a7,25c71235), JSU64_INIT(c19bf174,cf692694),
    JSU64_INIT(e49b69c1,9ef14ad2), JSU64_INIT(efbe4786,384f25e3),
    JSU64_INIT(0fc19dc6,8b8cd5b5), JSU64_INIT(240ca1cc,77ac9c65),
    JSU64_INIT(2de92c6f,592b0275), JSU64_INIT(4a7484aa,6ea6e483),
    JSU64_INIT(5cb0a9dc,bd41fbd4), JSU64_INIT(76f988da,831153b5),
    JSU64_INIT(983e5152,ee66dfab), JSU64_INIT(a831c66d,2db43210),
    JSU64_INIT(b00327c8,98fb213f), JSU64_INIT(bf597fc7,beef0ee4),
    JSU64_INIT(c6e00bf3,3da88fc2), JSU64_INIT(d5a79147,930aa725),
    JSU64_INIT(06ca6351,e003826f), JSU64_INIT(14292967,0a0e6e70),
    JSU64_INIT(27b70a85,46d22ffc), JSU64_INIT(2e1b2138,5c26c926),
    JSU64_INIT(4d2c6dfc,5ac42aed), JSU64_INIT(53380d13,9d95b3df),
    JSU64_INIT(650a7354,8baf63de), JSU64_INIT(766a0abb,3c77b2a8),
    JSU64_INIT(81c2c92e,47edaee6), JSU64_INIT(92722c85,1482353b),
    JSU64_INIT(a2bfe8a1,4cf10364), JSU64_INIT(a81a664b,bc423001),
    JSU64_INIT(c24b8b70,d0f89791), JSU64_INIT(c76c51a3,0654be30),
    JSU64_INIT(d192e819,d6ef5218), JSU64_INIT(d6990624,5565a910),
    JSU64_INIT(f40e3585,5771202a), JSU64_INIT(106aa070,32bbd1b8),
    JSU64_INIT(19a4c116,b8d2d0c8), JSU64_INIT(1e376c08,5141ab53),
    JSU64_INIT(2748774c,df8eeb99), JSU64_INIT(34b0bcb5,e19b48a8),
    JSU64_INIT(391c0cb3,c5c95a63), JSU64_INIT(4ed8aa4a,e3418acb),
    JSU64_INIT(5b9cca4f,7763e373), JSU64_INIT(682e6ff3,d6b2b8a3),
    JSU64_INIT(748f82ee,5defb2fc), JSU64_INIT(78a5636f,43172f60),
    JSU64_INIT(84c87814,a1f0ab72), JSU64_INIT(8cc70208,1a6439ec),
    JSU64_INIT(90befffa,23631e28), JSU64_INIT(a4506ceb,de82bde9),
    JSU64_INIT(bef9a3f7,b2c67915), JSU64_INIT(c67178f2,e372532b),
    JSU64_INIT(ca273ece,ea26619c), JSU64_INIT(d186b8c7,21c0c207),
    JSU64_INIT(eada7dd6,cde0eb1e), JSU64_INIT(f57d4f7f,ee6ed178),
    JSU64_INIT(06f067aa,72176fba), JSU64_INIT(0a637dc5,a2c898a6),
    JSU64_INIT(113f9804,bef90dae), JSU64_INIT(1b710b35,131c471b),
    JSU64_INIT(28db77f5,23047d84), JSU64_INIT(32caab7b,40c72493),
    JSU64_INIT(3c9ebe0a,15c9bebc), JSU64_INIT(431d67c4,9c100d4c),
    JSU64_INIT(4cc5d4be,cb3e42b6), JSU64_INIT(597f299c,fc657e2a),
    JSU64_INIT(5fcb6fab,3ad6faec), JSU64_INIT(6c44198c,4a475817)
};

/* =========== SHA512 implementation ===================================== */

/* START FUNCTION DESCRIPTION ********************************************
sha512_init										   <SHA512.LIB>

SYNTAX: void sha512_init(sha512_context far *ctx);

DESCRIPTION: Initialize a SHA-512 hash.

PARAMETER 1: Pointer to SHA-512 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha512_init(sha512_context __far *ctx)
{
	/* SHA-512 initial hash values */
	static const __far JSUint64 H512[8] = {
	    JSU64_INIT(6a09e667,f3bcc908), JSU64_INIT(bb67ae85,84caa73b),
	    JSU64_INIT(3c6ef372,fe94f82b), JSU64_INIT(a54ff53a,5f1d36f1),
	    JSU64_INIT(510e527f,ade682d1), JSU64_INIT(9b05688c,2b3e6c1f),
	    JSU64_INIT(1f83d9ab,fb41bd6b), JSU64_INIT(5be0cd19,137e2179)
	};

	_f_memset(ctx, 0, sizeof *ctx);
	_f_memcpy(ctx->h, H512, sizeof H512);
}

// rotate right, 32 bits or less
#define ROTR64a(x,n,lo,hi) (x.lo >> n | x.hi << (32-n))
// rotate right, 32 bits or more
#define ROTR64A(x,n,lo,hi) (x.lo << (64-n) | x.hi >> (n-32))
// low 32-bits from a shift right, 32 bits or less
#define  SHR64a(x,n,lo,hi) (x.lo >> n | x.hi << (32-n))

/* Capitol Sigma and lower case sigma functions */
#define s0lo(x) (ROTR64a(x,1,lo,hi) ^ ROTR64a(x,8,lo,hi) ^ SHR64a(x,7,lo,hi))
#define s0hi(x) (ROTR64a(x,1,hi,lo) ^ ROTR64a(x,8,hi,lo) ^ (x.hi >> 7))

#define s1lo(x) (ROTR64a(x,19,lo,hi) ^ ROTR64A(x,61,lo,hi) ^ SHR64a(x,6,lo,hi))
#define s1hi(x) (ROTR64a(x,19,hi,lo) ^ ROTR64A(x,61,hi,lo) ^ (x.hi >> 6))

#define S0lo(x) (ROTR64a(x,28,lo,hi) ^ ROTR64A(x,34,lo,hi) ^ ROTR64A(x,39,lo,hi))
#define S0hi(x) (ROTR64a(x,28,hi,lo) ^ ROTR64A(x,34,hi,lo) ^ ROTR64A(x,39,hi,lo))

#define S1lo(x) (ROTR64a(x,14,lo,hi) ^ ROTR64a(x,18,lo,hi) ^ ROTR64A(x,41,lo,hi))
#define S1hi(x) (ROTR64a(x,14,hi,lo) ^ ROTR64a(x,18,hi,lo) ^ ROTR64A(x,41,hi,lo))

/* 32-bit versions of Ch and Maj */
#define Chxx(x,y,z,lo) ((x.lo & y.lo) ^ (~x.lo & z.lo))
#define Majx(x,y,z,lo) ((x.lo & y.lo) ^ (x.lo & z.lo) ^ (y.lo & z.lo))

/* START _FUNCTION DESCRIPTION ********************************************
_round 										   <SHA512.LIB>

SYNTAX: void _round(JSUint64 __far *work, int n, JSUint64 *locals);

DESCRIPTION: Perform one round of the SHA-384/SHA-512 hash.

PARAMETER 1: Pointer to current work value
PARAMETER 2: Round to perform (a number from 0 to 79)
PARAMETER 3: Pointer to the eight 64-bit locals (copy of ctx->h added back
             after 80 rounds completed)

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void _round(JSUint64 __far *work, int n, JSUint64 *locals)
{
	uint32_t lo, tm;
	int cy;
   int offs = (80 - n) & 7;  // offset into locals for "a" value of this round
	JSUint64 *a, *b, *c, *d, *e, *f, *g, *h;

	a = &locals[(offs)];
	b = &locals[(offs+1)&7];
	c = &locals[(offs+2)&7];
	d = &locals[(offs+3)&7];
	e = &locals[(offs+4)&7];
	f = &locals[(offs+5)&7];
	g = &locals[(offs+6)&7];
	h = &locals[(offs+7)&7];

	lo  = S1lo((*e));
	lo += (tm = Chxx((*e), (*f), (*g), lo));
	cy = (lo < tm);
	lo += (tm = K512[n].lo);
	if (lo < tm) cy++;
	lo += (tm = work->lo);
	if (lo < tm) cy++;

	h->lo += lo;
	if (h->lo < lo) cy++;
	h->hi += cy + S1hi((*e)) + Chxx((*e), (*f), (*g), hi) + K512[n].hi + work->hi;
	d->lo += h->lo;
	d->hi += h->hi + (d->lo < h->lo);
	lo  = S0lo((*a));
	lo += (tm = Majx((*a), (*b), (*c), lo));
	cy = (lo < tm);
	h->lo += lo;
	if (h->lo < lo) cy++;
	h->hi += cy + S0hi((*a)) + Majx((*a), (*b), (*c), hi);
}

/* START _FUNCTION DESCRIPTION ********************************************
sha512_process 										   <SHA512.LIB>

SYNTAX: void sha512_process(sha512_context far *ctx,
                            const uint8_t far data[128]);

DESCRIPTION: Add a block of 128 bytes to the SHA-384/SHA-512 hash.

PARAMETER 1: Pointer to SHA-384/SHA-512 state structure
PARAMETER 2: Pointer buffer containing data block

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha512_process(sha512_context __far *ctx, const uint8_t __far data[128])
{
	int t;
	uint32_t lo, tm;
	int cy;
	JSUint64 *workptr;
	JSUint64 work[16];  // rotating work buffer
	JSUint64 locals[8];

	sha_copy_and_swap64(work, data, 16);
	_f_memcpy(locals, ctx->h, 64);

	#define _WORK(n) work[(t+n)&0x0F]
	for (t = 0; t < 80; ++t) {
		workptr = &_WORK(0);
		if (t > 15) { // calculate the "message schedule"
	      cy = 0;
	      lo = s1lo(_WORK(-2));
	      lo += (tm = _WORK(-7).lo);     if (lo < tm) cy++;
	      lo += (tm = s0lo(_WORK(-15))); if (lo < tm) cy++;
	      lo += (tm = _WORK(-16).lo);    if (lo < tm) cy++;
	      workptr->lo = lo;
	      workptr->hi = cy + s1hi(_WORK(-2)) + _WORK(-7).hi + s0hi(_WORK(-15)) + _WORK(-16).hi;
		}
		_round(workptr, t, locals);
	}
	#undef _WORK
	
	for (t = 0; t < 8; ++t) {
		_addto(&locals[t], &ctx->h[t]);
	}
}

/* START FUNCTION DESCRIPTION ********************************************
sha384_add 										   <SHA512.LIB>

SYNTAX: void sha384_add(sha384_context far *ctx,
						const uint8_t far *input,
						uint16_t length);

DESCRIPTION: Add an arbitrary amount of data to a SHA-384 hash.

PARAMETER 1: Pointer to SHA-384 state structure
PARAMETER 2: Pointer to data buffer containing input data
PARAMETER 3: The length (in bytes) of the input data

RETURN VALUE: None

END DESCRIPTION **********************************************************/
/* START FUNCTION DESCRIPTION ********************************************
sha512_add 										   <SHA512.LIB>

SYNTAX: void sha512_add(sha512_context far *ctx,
						const uint8_t far *input,
						uint16_t length);

DESCRIPTION: Add an arbitrary amount of data to a SHA-512 hash.

PARAMETER 1: Pointer to SHA-512 state structure
PARAMETER 2: Pointer to data buffer containing input data
PARAMETER 3: The length (in bytes) of the input data

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha512_add(sha512_context __far *ctx,
                const uint8_t __far *input,
                uint16_t inputLen)
{
	unsigned int inBuf, todo;
   
	if (!inputLen) {
		return;
	}
   
	inBuf = (unsigned int)ctx->sizeLo.lo & 0x7f;
	ctx->sizeLo.lo += inputLen;
	if (ctx->sizeLo.lo < inputLen) {
		ctx->sizeLo.hi++;
	}
   
	/* if data already in buffer, attemp to fill rest of buffer */
	if (inBuf) {
		todo = SHA512_BLOCK_LENGTH - inBuf;
		if (inputLen < todo) {
			todo = inputLen;
	   }
		_f_memcpy(ctx->u.b + inBuf, input, todo);
		input    += todo;
		inputLen -= todo;
		if (inBuf + todo == SHA512_BLOCK_LENGTH) {
			sha512_process(ctx, ctx->u.b);
	   }
	}

	/* if enough data to fill one or more whole buffers, process them. */
	while (inputLen >= SHA512_BLOCK_LENGTH) {
	   sha512_process(ctx, input);
	   input    += SHA512_BLOCK_LENGTH;
	   inputLen -= SHA512_BLOCK_LENGTH;
	}
	
	/* if data left over, fill it into buffer */
	if (inputLen) {
		_f_memcpy(ctx->u.b, input, inputLen);
	}
}

#undef ROTR64a
#undef ROTR64A
#undef SHR64a
#undef s0lo
#undef s0hi
#undef s1lo
#undef s1hi
#undef S0lo
#undef S0hi
#undef S1lo
#undef S1hi
#undef Chxx
#undef Majx

/*** BeginHeader _sha512_finish_common, sha512_pad */
void _sha512_finish_common(sha512_context __far *ctx, uint8_t __far *digest,
	int digest_length);
extern const __far uint8_t sha512_pad[240];
/*** EndHeader */
/* Padding used with all flavors of SHA */
const __far uint8_t sha512_pad[240] = {
0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   /* compiler will fill the rest in with zeros */
};

_sha512_debug
void _sha512_finish_common(sha512_context __far *ctx, uint8_t __far *digest,
	int digest_length)
{
    unsigned int inBuf  = (unsigned int)ctx->sizeLo.lo & 0x7f;
    unsigned int padLen = (inBuf < 112) ? (112 - inBuf) : (112 + 128 - inBuf);
    JSUint64 lo;
    JSLL_SHL(lo, ctx->sizeLo, 3);

    sha512_add(ctx, sha512_pad, padLen);

    ctx->u.w[14].lo = 0;
    ctx->u.w[14].hi = 0;
    ctx->u.w[15] = lo;
    _byteswap8(&ctx->u.w[15]);
    sha512_process(ctx, ctx->u.b);

    /* now output the answer */
    sha_copy_and_swap64(digest, ctx->h, digest_length);
    
}

/*** BeginHeader sha512_finish */
void sha512_finish(sha512_context far *ctx, uint8_t far digest[32]);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
sha512_finish 										<SHA512.LIB>

SYNTAX: void sha512_finish(sha512_context far *ctx,
                           uint8_t far digest[SHA512_LENGTH]);

DESCRIPTION: Finish a SHA-512 hash and return the result. The output
			 parameter must be a data buffer of at least SHA512_LENGTH (64) bytes
			 (the size of a SHA-512 hash output).

PARAMETER 1: Pointer to SHA-512 state structure
PARAMETER 2: Pointer to buffer for output data.  Must be at least 64 bytes.

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha512_finish(sha512_context __far *ctx, uint8_t far digest[SHA512_LENGTH])
{
	_sha512_finish_common(ctx, digest, SHA512_LENGTH / 8);
}

/*
void SHA512_EndRaw(sha512_context __far *ctx, unsigned char *digest,
              unsigned int *digestLen, unsigned int maxDigestLen)
{
    JSUint64 h[8];
    unsigned int len;

    _f_memcpy(h, ctx->h, sizeof(h));

    _byteswap8(&h[0]);
    _byteswap8(&h[1]);
    _byteswap8(&h[2]);
    _byteswap8(&h[3]);
    _byteswap8(&h[4]);
    _byteswap8(&h[5]);
    _byteswap8(&h[6]);
    _byteswap8(&h[7]);
    len = u_min(SHA512_LENGTH, maxDigestLen);
    _f_memcpy(digest, h, len);
    if (digestLen)
	*digestLen = len;
}
*/


/* ======================================================================= */
/* SHA384 uses a sha512_context as the real context.
** The only differences between SHA384 an SHA512 are:
** a) the intialization values for the context, and
** b) the number of bytes of data produced as output.
*/

/*** BeginHeader sha384_init */
void sha384_init(sha384_context __far *ctx);
#define sha384_add(ctx, input, inputLen) sha512_add(ctx, input, inputLen)
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
sha384_init										   <SHA512.LIB>

SYNTAX: void sha384_init(sha384_context far *ctx);

DESCRIPTION: Initialize a SHA-384 hash.

PARAMETER 1: Pointer to SHA-384 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha384_init(sha384_context __far *ctx)
{
	/* SHA-384 initial hash values */
	static const __far JSUint64 H384[8] = {
	    JSU64_INIT(cbbb9d5d,c1059ed8), JSU64_INIT(629a292a,367cd507),
	    JSU64_INIT(9159015a,3070dd17), JSU64_INIT(152fecd8,f70e5939),
	    JSU64_INIT(67332667,ffc00b31), JSU64_INIT(8eb44a87,68581511),
	    JSU64_INIT(db0c2e0d,64f98fa7), JSU64_INIT(47b5481d,befa4fa4)
	};

    _f_memset(ctx, 0, sizeof *ctx);
    _f_memcpy(ctx->h, H384, sizeof H384);
}

/*** BeginHeader sha384_finish */
void sha384_finish(sha384_context far *ctx, uint8_t far digest[28]);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
sha384_finish 										<SHA512.LIB>

SYNTAX: void sha384_finish(sha384_context far *ctx,
                           uint8_t far digest[SHA384_LENGTH]);

DESCRIPTION: Finish a SHA-384 hash and return the result. The output
			 parameter must be a data buffer of at least SHA384_LENGTH (48) bytes
			 (the size of a SHA-384 hash output).

PARAMETER 1: Pointer to SHA-384 state structure
PARAMETER 2: Pointer to buffer for output data.  Must be at least 48 bytes.

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha512_debug
void sha384_finish(sha384_context __far *ctx, uint8_t far digest[SHA384_LENGTH])
{
	_sha512_finish_common(ctx, digest, SHA384_LENGTH / 8);
}

/*
void SHA384_EndRaw(sha384_context __far *ctx, unsigned char *digest,
	      unsigned int *digestLen, unsigned int maxDigestLen)
{
    unsigned int maxLen = SHA_MIN(maxDigestLen, SHA384_LENGTH);
    SHA512_EndRaw(ctx, digest, digestLen, maxLen);
}
*/

/*** BeginHeader sha384_vector */
void sha384_vector(size_t num_elem, const char __far * __far * addr,
	  				  const size_t __far *len, char __far *mac);
/*** EndHeader */
// used by x509.lib
_sha512_debug
void sha384_vector(size_t num_elem, const char __far * __far * addr,
                 const size_t __far *len, char __far *mac)
{
	auto word i;
	auto sha384_context pms;

	sha384_init(&pms);
	for (i = 0; i < num_elem; ++i)
		sha384_add(&pms, addr[i], len[i]);
	sha384_finish(&pms, mac);
}

/*** BeginHeader sha512_vector */
void sha512_vector(size_t num_elem, const char __far * __far * addr,
	  				  const size_t __far *len, char __far *mac);
/*** EndHeader */
// used by x509.lib
_sha512_debug
void sha512_vector(size_t num_elem, const char __far * __far * addr,
                 const size_t __far *len, char __far *mac)
{
	auto word i;
	auto sha512_context pms;

	sha512_init(&pms);
	for (i = 0; i < num_elem; ++i)
		sha512_add(&pms, addr[i], len[i]);
	sha512_finish(&pms, mac);
}


/*** BeginHeader */
#endif
/*** EndHeader */

