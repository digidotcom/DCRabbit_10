/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
AES_CORE.LIB

DESCRIPTION:
   Implementation of the AES cipher, core (key and block size 16) only.

END DESCRIPTION *********************************************************/


/*** BeginHeader */

#if CC_VER < 0xA20
#fatal "This AES Encryption module must be used with Dynamic C version 10.20 or later."
#endif

#ifndef __AES_CORE_LIB
#define __AES_CORE_LIB

#ifndef _RAB6K
	#define _RAB6K 0
#endif

// Define AES_FAST to unroll loops.  This gives about ???% speed-up, but at the
// cost of ???? extra code size.
#ifndef AES_FAST
	#define _AES_FAST 0
#else
	#if _RAB6K
		#define _AES_FAST 1
	#else
		// Cannot have fully unrolled loops unless Rabbit 6000
		#define _AES_FAST 0
	#endif
#endif


#ifndef MPARITH_H
	// Include this library for xor routines
	#use "mparith.lib"
#endif

#ifdef AES_DEBUG
   #define AES_CBC_BUFSIZE_ALERT
   #define _aes_debug __debug
#else
   #define _aes_debug __nodebug
#endif


// State for 128,192 or 256-bit cipher
// Uses 176, 208 or 240 bytes from expanded_key respectively.
//NOTE: the expanded key must be the first field herein, which allows
// these routines to accept other AES state structures (such as
// _WIFI_AES_KEY) provided that they start with the expanded key.
typedef struct {
	char expanded_key[240];		// Max possible expanded key size
	char feedback_index;			// Current byte in block (0..15, 0..15 etc.)
   char nk;							// Number of longwords in key (4,6,8 supported)
	char feedback_register[16];// Block size always 16 bytes for AES.
} AESstreamState;


// Block size for AES-CBC mode
#define _AES_CBC_BLK_SZ_ 16

/*** EndHeader */

/*** BeginHeader AESrcon */
extern const char AESrcon[30];
/*** Endheader */

const char AESrcon[30] = {
  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
  0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4,
  0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91
};



/*** Beginheader AESsubBytes4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
__root void AESsubBytes4(void);
#if _AES_FAST
	#define AESSUBBYTES4 sbox pw $ sbox px $ sbox py $ sbox pz
#else
	#define AESSUBBYTES4 call AESsubBytes4
#endif
/*** EndHeader */

#asm __root


AESsubBytes4::
#if _RAB6K
	sbox	pw
	sbox	px
	sbox	py
	sbox	pz
#else
	ld		bcde, pw
   ld		a,b
	sbox	a
   ld		b,a
   ld		a,c
	sbox	a
   ld		c,a
   ld		a,d
	sbox	a
   ld		d,a
   ld		a,e
	sbox	a
   ld		e,a
	ld		pw, bcde

	ld		bcde, px
   ld		a,b
	sbox	a
   ld		b,a
   ld		a,c
	sbox	a
   ld		c,a
   ld		a,d
	sbox	a
   ld		d,a
   ld		a,e
	sbox	a
   ld		e,a
	ld		px, bcde

	ld		bcde, py
   ld		a,b
	sbox	a
   ld		b,a
   ld		a,c
	sbox	a
   ld		c,a
   ld		a,d
	sbox	a
   ld		d,a
   ld		a,e
	sbox	a
   ld		e,a
	ld		py, bcde

	ld		bcde, pz
   ld		a,b
	sbox	a
   ld		b,a
   ld		a,c
	sbox	a
   ld		c,a
   ld		a,d
	sbox	a
   ld		d,a
   ld		a,e
	sbox	a
   ld		e,a
	ld		pz, bcde
#endif
   ret


#endasm

/*** Beginheader AESinvSubBytes4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
__root void AESinvSubBytes4(void);
#if _AES_FAST
	#define AESINVSUBBYTES4 ibox pw $ ibox px $ ibox py $ ibox pz
#else
	#define AESINVSUBBYTES4 call AESinvSubBytes4
#endif
/*** EndHeader */

#asm __root



AESinvSubBytes4::
#if _RAB6K
	ibox	pw
	ibox	px
	ibox	py
	ibox	pz
#else
	ld		bcde, pw
   ld		a,b
	ibox	a
   ld		b,a
   ld		a,c
	ibox	a
   ld		c,a
   ld		a,d
	ibox	a
   ld		d,a
   ld		a,e
	ibox	a
   ld		e,a
	ld		pw, bcde

	ld		bcde, px
   ld		a,b
	ibox	a
   ld		b,a
   ld		a,c
	ibox	a
   ld		c,a
   ld		a,d
	ibox	a
   ld		d,a
   ld		a,e
	ibox	a
   ld		e,a
	ld		px, bcde

	ld		bcde, py
   ld		a,b
	ibox	a
   ld		b,a
   ld		a,c
	ibox	a
   ld		c,a
   ld		a,d
	ibox	a
   ld		d,a
   ld		a,e
	ibox	a
   ld		e,a
	ld		py, bcde

	ld		bcde, pz
   ld		a,b
	ibox	a
   ld		b,a
   ld		a,c
	ibox	a
   ld		c,a
   ld		a,d
	ibox	a
   ld		d,a
   ld		a,e
	ibox	a
   ld		e,a
	ld		pz, bcde

#endif
   ret

#endasm

/*** Beginheader AESshiftRows4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
void AESshiftRows4(void);
#if _RAB6K
	#define AESSHIFTROWS4 aessr
#else
	#define AESSHIFTROWS4 call AESshiftRows4
#endif
/*** EndHeader */
#asm


AESshiftRows4::
#if _RAB6K
	aessr
#else
	ld		bcde,py
   ld		jkhl,pz
   exx
   ld		bcde,pw
   ld		jkhl,px

   ex		jk',hl
   ex		de,hl
   ex		jk,hl
   ld		a,e
   ld		e,L
   ld		l,a
   ld		a,b
   ld		b,d
   exx
   ld		d',b
   exx
   ld		b',h
   ld		h,a
   ex		jk,hl
   ex		de,hl
   ex		jk',hl
   ld		a,c
   exx
   ld		c',c
   ld		c,a
   exx
   ld		a,d
   ld		d,h
   exx
   ld		h',d
   ld		d,h
   ld		h,a

   ld		py,bcde
   ld		pz,jkhl
   exx
	ld		pw,bcde
   ld		px,jkhl
#endif
   ret


#endasm

/*** Beginheader AESinvShiftRows4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
void AESinvShiftRows4(void);
#if _RAB6K
	#define AESINVSHIFTROWS4 aesisr
#else
	#define AESINVSHIFTROWS4 call AESinvShiftRows4
#endif
/*** EndHeader */
#asm


AESinvShiftRows4::
#if _RAB6K
	aesisr
#else
	ld		bcde,pw
   ld		jkhl,px
   exx
   ld		bcde,py
   ld		jkhl,pz

   ld		a,h
   ld		h,d
   exx
   ld		d',h
   ld		h,d
   ld		d,a
   exx
   ld		a,c
   exx
   ld		c',c
   ld		c,a
	ex		jk',hl
   ex		de,hl
   ex		jk,hl
   ld		a,h
   exx
   ld		h',b
	exx
   ld		b',d
   ld		d,b
   ld		b,a
   ld		a,L
   ld		L,e
   ld		e,a
   ex		jk,hl
   ex		de,hl
   ex		jk',hl

   ld		pw,bcde
   ld		px,jkhl
   exx
	ld		py,bcde
   ld		pz,jkhl
#endif
   ret


#endasm


/*** Beginheader AESmixColumns4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
void AESmixColumns4(void);
#if _RAB6K
	#define AESMIXCOLUMNS4 aesmc
#else
	#define AESMIXCOLUMNS4 call AESmixColumns4
#endif
/*** EndHeader */

#asm


AESmixColumns4::
#if _RAB6K
	aesmc
#else
	ld		bcde,pw
	ld		jkhl,pw
	rrc	8,jkhl
   xor	jkhl,bcde
   ex		jkhl,bcde
   rlc	b $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	c $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	d $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	e $ sbc a,a $ and 0x1A $ rlb a,jkhl
   xor	jkhl,bcde
   ld		bcde,pw
   xor	jkhl,bcde
   ld		a,b $ xor c $ xor d $ xor e
   ld		b,a $ ld c,a $ ld d,a $ ld e,a
   xor	jkhl,bcde
   ld		pw,jkhl

	ld		bcde,px
	ld		jkhl,px
	rrc	8,jkhl
   xor	jkhl,bcde
   ex		jkhl,bcde
   rlc	b $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	c $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	d $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	e $ sbc a,a $ and 0x1A $ rlb a,jkhl
   xor	jkhl,bcde
   ld		bcde,px
   xor	jkhl,bcde
   ld		a,b $ xor c $ xor d $ xor e
   ld		b,a $ ld c,a $ ld d,a $ ld e,a
   xor	jkhl,bcde
   ld		px,jkhl

	ld		bcde,py
	ld		jkhl,py
	rrc	8,jkhl
   xor	jkhl,bcde
   ex		jkhl,bcde
   rlc	b $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	c $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	d $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	e $ sbc a,a $ and 0x1A $ rlb a,jkhl
   xor	jkhl,bcde
   ld		bcde,py
   xor	jkhl,bcde
   ld		a,b $ xor c $ xor d $ xor e
   ld		b,a $ ld c,a $ ld d,a $ ld e,a
   xor	jkhl,bcde
   ld		py,jkhl

	ld		bcde,pz
	ld		jkhl,pz
	rrc	8,jkhl
   xor	jkhl,bcde
   ex		jkhl,bcde
   rlc	b $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	c $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	d $ sbc a,a $ and 0x1A $ rlb a,jkhl
   rlc	e $ sbc a,a $ and 0x1A $ rlb a,jkhl
   xor	jkhl,bcde
   ld		bcde,pz
   xor	jkhl,bcde
   ld		a,b $ xor c $ xor d $ xor e
   ld		b,a $ ld c,a $ ld d,a $ ld e,a
   xor	jkhl,bcde
   ld		pz,jkhl
#endif
	ret


#endasm


/*** BeginHeader AESinvMixColumns4 */
// Work done "in place" on 16 bytes stored in pw, px, py, pz.
void AESinvMixColumns4(void);
#if _RAB6K
	#define AESINVMIXCOLUMNS4 aesimc
#else
	#define AESINVMIXCOLUMNS4 call AESinvMixColumns4
#endif
/*** EndHeader */

#asm

#if !_RAB6K
AESimc_sub:
	; mix BCDE and return in same

	 ;calculate the mult table
	 ;for a[0]
    ld	 L,0x1A
	 ld	 a, e
	 rlca
	 jr	 nc, continue_a0x2
	 xor	 L
continue_a0x2:
	 ld	 e', a
	 rlca
	 jr	 nc, continue_a0x4
	 xor	 L
continue_a0x4:
	 ld	 d', a
	 rlca
	 jr	 nc, continue_a0x8
	 xor	 L
continue_a0x8:
	 ld	 h, a

	 ;for a[1]
	 ld	 a, d
	 rlca
	 jr	 nc, continue_a1x2
	 xor	 L
continue_a1x2:
	 ld	 c', a
	 rlca
	 jr	 nc, continue_a1x4
	 xor	 L
continue_a1x4:
	 ld	 b', a
	 rlca
	 jr	 nc, continue_a1x8
	 xor	 L
continue_a1x8:
	 xor	 h
	 ld	 h, a

	 ;for a[2]
	 ld	 a, c
	 rlca
	 jr	 nc, continue_a2x2
	 xor	 L
continue_a2x2:
	 ld	 l', a
	 rlca
	 jr	 nc, continue_a2x4
	 xor	 L
continue_a2x4:
	 ld	 h', a
	 rlca
	 jr	 nc, continue_a2x8
	 xor	 L
continue_a2x8:
	 xor	 h
	 ld	 h, a
    exx
    ld    (iy+6),hl
    exx

	 ;for a[3]
	 ld	 a, b
	 rlca
	 jr	 nc, continue_a3x2
	 xor	 L
continue_a3x2:
	 ld	 l', a
	 rlca
	 jr	 nc, continue_a3x4
	 xor	 L
continue_a3x4:
	 ld	 h', a
	 rlca
	 jr	 nc, continue_a3x8
	 xor	 L
continue_a3x8:
	 xor	 h
    xor	 e
    xor	 d
    xor	 c
    xor	 b
	 ld	 h, a

	 ;do matrix multiply
	 ;for a[0]
    exx
	 ld	 a,e
	 xor	 d
	 xor	 c
	 xor	 (iy+7)
    exx
	 xor	 e
	 xor	 h
	 ld	 e, a		;load mixed a[0]

	 ;for a[1]
    exx
	 ld	 a,c
	 xor	 b
	 xor	 (iy+6)
	 xor	 h
    exx
	 xor	 d
	 xor	 h
	 ld	 d, a		;load mixed a[1]

	 ;for a[2]
    exx
	 ld	 a,d
	 xor	 (iy+6)
	 xor	 (iy+7)
	 xor	 L
    exx
	 xor	 c
	 xor	 h
	 ld	 c, a		;load mixed a[2]

	 ;for a[3]
    exx
	 ld	 a,e
	 xor	 b
	 xor	 L
	 xor	 h
    exx
	 xor	 b
	 xor	 h
	 ld	 b, a		;load mixed a[3]

	 ret
#endif

AESinvMixColumns4::
#if _RAB6K
	aesimc
#else
	push	iy
   add	sp,-12
   ld		iy,0
   add	iy,sp
	ld		bcde,pw
	call	AESimc_sub
   ld		pw,bcde
	ld		bcde,px
	call	AESimc_sub
   ld		px,bcde
	ld		bcde,py
	call	AESimc_sub
   ld		py,bcde
	ld		bcde,pz
	call	AESimc_sub
   ld		pz,bcde
   add	sp,12
   pop	iy
#endif
   ret


#endasm


/*** BeginHeader AESaddKey4pyp */
// Work done "in place" on 16 bytes stored in pw, px, py, pz, using expanded
// key stored at PY'.
__root void AESaddKey4pyp(void);	// not C
#if _AES_FAST
	#define AESADDKEY4PYP \
	   exp $ \
	   ld    jkhl,(py+8) $ \
	   ld    bcde,(py+12) $ \
	   exx $ \
	   ld    jkhl,(py+0) $ \
	   ld    bcde,(py+4) $ \
	   ld    py,py+16 $ \
	   exp $ \
	   xor   jkhl,pw $ \
	   ld    pw,jkhl $ \
	   ex    jkhl,bcde $ \
	   xor   jkhl,px $ \
	   ld    px,jkhl $ \
	   exx $ \
	   xor   jkhl,py $ \
	   ld    py,jkhl $ \
	   ex    jkhl,bcde $ \
	   xor   jkhl,pz $ \
	   ld    pz,jkhl
#else
	#define AESADDKEY4PYP call AESaddKey4pyp
#endif
/*** EndHeader */
#asm __root
AESaddKey4pyp::
	; PY' points to expanded key.  XOR it into pw/x/y/z
#if _RAB6K
	exp
	ld		jkhl,(py+8)
	ld		bcde,(py+12)
	exx
	ld		jkhl,(py+0)
	ld		bcde,(py+4)
	ld		py,py+16			; increment key pointer for next round
	exp
	xor	jkhl,pw
	ld		pw,jkhl
	ex		jkhl,bcde
	xor	jkhl,px
	ld		px,jkhl
	exx
	xor	jkhl,py
	ld		py,jkhl
	ex		jkhl,bcde
	xor	jkhl,pz
	ld		pz,jkhl
#else
	ld		bcde, pw
   exp $ ld		jkhl, (py+0) 	$ exp
   xor	jkhl, bcde
   ld		pw, jkhl

	ld		bcde, px
   exp $ ld		jkhl, (py+4) 	$ exp
   xor	jkhl, bcde
   ld		px, jkhl

	ld		bcde, py
   exp $ ld		jkhl, (py+8) 	$ exp
   xor	jkhl, bcde
   ld		py, jkhl

	ld		bcde, pz
   exp $ ld		jkhl, (py+12) 	$ ld		py,py+16 $ exp
   xor	jkhl, bcde
   ld		pz, jkhl
#endif
   ret
#endasm

/*** BeginHeader AESinvAddKey4pyp */
// Work done "in place" on 16 bytes stored in pw, px, py, pz, using expanded
// key stored at PY'.
__root void AESinvAddKey4pyp(void);	// not C
#if _AES_FAST
	#define AESINVADDKEY4PYP \
	   exp $ \
	   ld    jkhl,(py+8) $ \
	   ld    bcde,(py+12) $ \
	   exx $ \
	   ld    jkhl,(py+0) $ \
	   ld    bcde,(py+4) $ \
	   ld    py,py-16 $ \
	   exp $ \
	   xor   jkhl,pw $ \
	   ld    pw,jkhl $ \
	   ex    jkhl,bcde $ \
	   xor   jkhl,px $ \
	   ld    px,jkhl $ \
	   exx $ \
	   xor   jkhl,py $ \
	   ld    py,jkhl $ \
	   ex    jkhl,bcde $ \
	   xor   jkhl,pz $ \
	   ld    pz,jkhl
#else
	#define AESINVADDKEY4PYP call AESinvAddKey4pyp
#endif
/*** EndHeader */
#asm __root
AESinvAddKey4pyp::
	; PY' points to expanded key
   ; This is same as above except key pointer is decremented at end
#if _RAB6K
	exp
	ld		jkhl,(py+8)
	ld		bcde,(py+12)
	exx
	ld		jkhl,(py+0)
	ld		bcde,(py+4)
	ld		py,py-16			; decrement key pointer for next round
	exp
	xor	jkhl,pw
	ld		pw,jkhl
	ex		jkhl,bcde
	xor	jkhl,px
	ld		px,jkhl
	exx
	xor	jkhl,py
	ld		py,jkhl
	ex		jkhl,bcde
	xor	jkhl,pz
	ld		pz,jkhl
#else
	ld		bcde, pw
   exp $ ld		jkhl, (py+0) 	$ exp
   xor	jkhl, bcde
   ld		pw, jkhl

	ld		bcde, px
   exp $ ld		jkhl, (py+4) 	$ exp
   xor	jkhl, bcde
   ld		px, jkhl

	ld		bcde, py
   exp $ ld		jkhl, (py+8) 	$ exp
   xor	jkhl, bcde
   ld		py, jkhl

	ld		bcde, pz
   exp $ ld		jkhl, (py+12) 	$ ld		py,py-16 $ exp
   xor	jkhl, bcde
   ld		pz, jkhl
#endif
   ret
#endasm


/*** Beginheader AESexpandKey4 */
void AESexpandKey4(char __far *expanded, const char __far *key);
/*** EndHeader */
/*
 * Expands the cipher key into the encryption key schedule.
 *
 */
_aes_debug
void AESexpandKey4(char __far *expanded, const char __far *key) {
	auto word i, rcon_idx, k;
	auto unsigned long temp;
	auto unsigned long __far * exp;

	#if _RAB6K
	setEXPCanonical();
	#endif
	exp = (unsigned long __far *)expanded;
	//copy cipher key into beginning of expanded key
	_f_memcpy(exp, key, 16);
	//get first temp column
	temp = exp[3];
	for(i = 4, k = 0, rcon_idx = 0;
	    i < 44;
	    ++i, ++k)
	{
		if (!(i & 3))
		{
			//rotate and substitute at same time...
			#asm
				#if _RAB6K
				ld		px,(sp+@sp+temp)
				sbox	px
				ld		bcde,px
				ld		a,e
				rrb	a,bcde
				ld		(sp+@sp+temp), bcde
				#else
				ld		bcde, (sp+@sp+temp)
				ld		a,e
				sbox	a
				rlb	a,bcde
				sbox	a
				rlb	a,bcde
				sbox	a
				rlb	a,bcde
				sbox	a
				rlb	a,bcde
				ld		(sp+@sp+temp), bcde
				#endif
			#endasm
			//add rcon
			temp ^= AESrcon[rcon_idx];
			++rcon_idx;
		}
		temp ^= exp[k];
		exp[i] = temp;
	}
}


/*** Beginheader AESencrypt4x4 */
void AESencrypt4x4(const char __far *expandedkey, const char __far *plain,
																				char __far * crypt);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESencrypt4x4                   <AES_CORE.LIB>

SYNTAX:		   void AESencrypt4x4(const char far *expandedkey,
                                  const char far *plain,
                                  char far * crypt);

DESCRIPTION:   Encrypts a block of data.

PARAMETER1:		expandedkey - a set of round keys (generated by
               AESexpandKey4()) from a 16-byte (128 bit) key.
               Total of 176 bytes (44 longwords)
PARAMETER2:		plain - A block of 16 bytes of data to be encrypted
PARAMETER3:		crypt - A block of 16 bytes of resulting encrypted data

SEE ALSO:      AESencrypt4xK, AESdecrypt4x4, AESdecrypt4xK
END DESCRIPTION *********************************************************/
_aes_debug
void AESencrypt4x4(const char __far *expandedkey, const char __far *plain,
																				char __far * crypt)
{
	#if _RAB6K
	setEXPCanonical();
	#endif
#asm
	push	pw		; These regs must be preserved
   ld		pz,(sp+@sp+plain+4)	; Data block
   ld		hl,4
	exp
   ld		py,(sp+@sp+expandedkey+4)
	exp

   lcall _AESencrypt4xK
   
   ld		bcde,pz
   ld		pz,(sp+@sp+crypt+4)
   ld		(pz+0),pw
   ld		(pz+4),px
   ld		(pz+8),py
   ld		(pz+12),bcde

   pop	pw
#endasm
}

/*** Beginheader AESencrypt4xK */
void AESencrypt4xK(const char __far *expandedkey, const char __far *plain,
						 char __far * crypt, int nk);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
AESencrypt4xK                   <AES_CORE.LIB>

SYNTAX:		   void AESencrypt4xK(const char far *expandedkey,
                                  const char far *plain,
                                  char far * crypt, int nk);

DESCRIPTION:   Encrypts a block of data.

PARAMETER1:		expandedkey - a set of round keys (generated by
               AESexpandKey4()) from a 16/24/32-byte (128/196/256 bit) key.
               Total of 176/208/240 bytes (44/52/60 longwords)
PARAMETER2:		plain - A block of 16 bytes of data to be encrypted
PARAMETER3:		crypt - A block of 16 bytes of resulting encrypted data
PARAMETER4:		nk - key size in longwords.  Must be 4 (128-bit key),
               6 (192-bit key) or 8 (256-bit key) for AES.

SEE ALSO:      AESencrypt4x4, AESdecrypt4xK, AESdecrypt4x4
END DESCRIPTION *********************************************************/
_aes_debug
void AESencrypt4xK(const char __far *expandedkey, const char __far *plain,
						 char __far * crypt, int nk)
{
	#if _RAB6K
	setEXPCanonical();
	#endif
#asm
	push	pw		; These regs must be preserved
   ld		pz,(sp+@sp+plain+4)	; Data block
   ld		hl,(sp+@sp+nk+4)
	exp
   ld		py,(sp+@sp+expandedkey+4)
	exp

   lcall _AESencrypt4xK
   
   ld		bcde,pz
   ld		pz,(sp+@sp+crypt+4)
   ld		(pz+0),pw
   ld		(pz+4),px
   ld		(pz+8),py
   ld		(pz+12),bcde

   pop	pw
#endasm
}

/*** BeginHeader _AESencrypt4xK */
// asm-only subroutine used by multiple C functions
xmem void _AESencrypt4xK(void);
/*** EndHeader */
#asm xmem _aes_debug
; shared entry point, pz=plaintext, py'=expanded key, hl=keysize (4, 6 or 8)
_AESencrypt4xK::
   ld		pw,(pz+0)
   ld		px,(pz+4)
   ld		py,(pz+8)
   ld		pz,(pz+12)

   ld		a,L
   cp		4
   jr		z,.rounds_10
   cp		6
   jr		z,.rounds_12
   ; assume 8 (AES256) and 14 rounds
.rounds_14:
	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

.rounds_12:
	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

.rounds_10:
	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESMIXCOLUMNS4

	AESADDKEY4PYP
	AESSUBBYTES4
	AESSHIFTROWS4
	AESADDKEY4PYP		; an exception to the above

   lret
#endasm

/*** Beginheader AESdecrypt4x4 */
void AESdecrypt4x4(const char __far *expandedkey, const char __far *crypt,
																				char __far * plain);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESdecrypt4x4                   <AES_CORE.LIB>

SYNTAX:		   void AESdecrypt4x4(const char far *expandedkey,
                                  const char far *crypt,
                                  char far * plain);

DESCRIPTION:   Encrypts a block of data.

PARAMETER1:		expandedkey - a set of round keys (generated by
               AESexpandKey4()) from a 16-byte (128 bit) key
               Total of 176 bytes (44 longwords)
PARAMETER2:		crypt - A block of 16 bytes of ciphertext to be decrypted
PARAMETER3:		plain - A block of 16 bytes of resulting plaintext data

SEE ALSO:      AESencrypt4x4, AESencrypt4xK, AESdecrypt4xK
END DESCRIPTION *********************************************************/
_aes_debug
void AESdecrypt4x4(const char __far *expandedkey, const char __far *crypt,
																				char __far * plain)
{
	#if _RAB6K
	setEXPCanonical();
	#endif
#asm
	push	pw		; These regs must be preserved

   ld		pz,(sp+@sp+crypt+4)	; Data block
	ld		hl,4
	exp
   ld		py,(sp+@sp+expandedkey+4)
   exp

   lcall _AESdecrypt4xK

   ld		bcde,pz
   ldl	pz,(sp+@sp+plain+4)
   ld		(pz+0),pw
   ld		(pz+4),px
   ld		(pz+8),py
   ld		(pz+12),bcde

   pop	pw
#endasm
}

/*** Beginheader AESdecrypt4xK */
void AESdecrypt4xK(const char __far *expandedkey, const char __far *crypt,
                   char __far * plain, int nk);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESdecrypt4xK                   <AES_CORE.LIB>

SYNTAX:		   void AESdecrypt4xK(const char far *expandedkey,
                                  const char far *crypt,
                                  char far * plain, int nk);

DESCRIPTION:   Encrypts a block of data.

PARAMETER1:		expandedkey - a set of round keys (generated by
               AESexpandKey4()) from a 16-byte (128 bit) key
               Total of 176 bytes (44 longwords)
PARAMETER2:		crypt - A block of 16 bytes of ciphertext to be decrypted
PARAMETER3:		plain - A block of 16 bytes of resulting plaintext data
PARAMETER4:		nk - key size in longwords.  Must be 4 (128-bit key),
               6 (192-bit key) or 8 (256-bit key) for AES.

SEE ALSO:      AESencrypt4x4, AESencrypt4xK, AESdecrypt4x4
END DESCRIPTION *********************************************************/
_aes_debug
void AESdecrypt4xK(const char __far *expandedkey, const char __far *crypt,
                   char __far * plain, int nk)
{
	#if _RAB6K
	setEXPCanonical();
	#endif
#asm
	push	pw		; These regs must be preserved

   ld		pz,(sp+@sp+crypt+4)	; Data block
	ld		hl,(sp+@sp+nk+4)
	exp
   ld		py,(sp+@sp+expandedkey+4)
   exp

   lcall _AESdecrypt4xK

   ld		bcde,pz
   ldl	pz,(sp+@sp+plain+4)
   ld		(pz+0),pw
   ld		(pz+4),px
   ld		(pz+8),py
   ld		(pz+12),bcde

   pop	pw
#endasm
}

/*** BeginHeader _AESdecrypt4xK */
// asm-only subroutine used by multiple C functions
xmem void _AESdecrypt4xK(void);
/*** EndHeader */
#asm xmem _aes_debug
; shared entry point, pz=plaintext, py'=expanded key, hl=keysize (4, 6 or 8)
_AESdecrypt4xK::
   ld		pw,(pz+0)
   ld		px,(pz+4)
   ld		py,(pz+8)
   ld		pz,(pz+12)

   push	hl		; save a copy of HL, trashed by AES operations before size check

   ; advance py' to point to the end of the expanded key
   ; add 96 plus 16 for every longword in the key (+64, +96, +128)
   ; make use of hl since we restore it after the first AES round
   sla	4, jkhl
   exp
   ld		py,py+96
   ld		py,py+hl
   exp
   
   ; first, truncated round
   AESINVADDKEY4PYP
   AESINVSHIFTROWS4
   AESINVSUBBYTES4
   
	pop	hl
   ld		a,L
   cp		4
   jr		z,.rounds_9
   cp		6
   jr		z,.rounds_11
   ; assume 8 (AES256) and 13 rounds
.rounds_13:
   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

.rounds_11:
   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

.rounds_9:
   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP
   AESINVMIXCOLUMNS4
   AESINVSHIFTROWS4
   AESINVSUBBYTES4

   AESINVADDKEY4PYP

   lret
#endasm



/*** BeginHeader AESinitStream4x4 */
void AESinitStream4x4(AESstreamState __far *state,
                      const char __far *key, const char __far *init_vector);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESinitStream                 <AES_CRYPT.LIB>

SYNTAX:		   void AESinitStream4x4(AESstreamState far *state,
											 const char far *key,
											 const char far *init_vector);

DESCRIPTION:   Sets up a stream state structure to begin encrypting or
					decrypting a stream. A particular stream state can only be
					used for one direction.

PARAMETER1:		state - An AESstreamState structure to be initialized
PARAMETER2:		key - the 16-byte cipher key, using a NULL pointer will prevent
 						an existing key from being recalculated.
PARAMETER3:		init_vector - a 16-byte array representing the initial state
						of the feedback registers. Both ends of the stream must
						begin with the same initialization vector and key.

END DESCRIPTION *********************************************************/

_aes_debug
void AESinitStream4x4(AESstreamState __far *state,
                              const char __far *key, const char __far *init_vector)
{
	_f_memcpy(state->feedback_register, init_vector,
	          sizeof(state->feedback_register));
	if (key)
		AESexpandKey4(state->expanded_key, key);
	state->feedback_index = 0;
   state->nk = 4;
}


/*** BeginHeader AESencryptStream4xK_CBC */
int AESencryptStream4xK_CBC(void /*AESstreamState*/ __far* state,
				const char __far * message,
            char __far * output, unsigned int count);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESencryptStream4xK_CBC     <AES_CRYPT.LIB>

SYNTAX: int AESencryptStream4xK_CBC(AESstreamState far *state,
					const char far *message, char far *output, unsigned int count);

DESCRIPTION: Perform an AES-CBC encryption operation on XMEM data.
				 Encryption is not "in-place."

PARAMETER 1: An AES stream state structure, initialized
PARAMETER 2: The message in plaintext (an xmem buffer)
PARAMETER 3: The output buffer, for return of encrypted text (in xmem), must
				 be as large as the plaintext buffer, and may be the same as the
				 plaintext buffer.
PARAMETER 4: The length of the message.  Must a multiple of
               _AES_CBC_BLK_SZ_

RETURN VALUE: 0 on success, non-zero on failure (count was not
              multiple of 16)

END DESCRIPTION *********************************************************/

_aes_debug
int AESencryptStream4xK_CBC(void /*AESstreamState*/ __far* _state,
										const char __far * text,
            						char __far * output, unsigned int count)
{
   auto int i;
   auto char __far*ptext;  // Pointer to text in xmem
   auto char __far*fbreg; // Pointer to state->feedback_register -- subexpression
   auto char temp[_AES_CBC_BLK_SZ_];  // temp storage for text
   AESstreamState __far * state = _state;

   if (0 != (count % _AES_CBC_BLK_SZ_)) {
   #ifdef AES_CBC_BUFSIZE_ALERT
      // Count must be a multiple of _AES_CBC_BLK_SZ_
      assert(0);
   #endif
      return 1;
   }

   fbreg = state->feedback_register;
   // *text = iv ^ *text
   while (count >= _AES_CBC_BLK_SZ_) {
	   _f_memcpy(temp, text, _AES_CBC_BLK_SZ_);
	   xor16(temp, fbreg);
      // Encrypt text and update fbreg
      AESencrypt4xK(state->expanded_key, temp, fbreg, state->nk);
      _f_memcpy(output, fbreg, _AES_CBC_BLK_SZ_);

      text += _AES_CBC_BLK_SZ_;
      output += _AES_CBC_BLK_SZ_;
      count -= _AES_CBC_BLK_SZ_;
   }
   return 0;
}

/*** BeginHeader AESdecryptStream4xK_CBC */
int AESdecryptStream4xK_CBC(void /*AESstreamState*/ __far* state,
				const char __far * text,
            char __far * output, unsigned int count);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
AESdecryptStream4xK_CBC     <AES_CRYPT.LIB>

SYNTAX: int AESdecryptStream4xK_CBC(AESstreamState* state,
				const char far *text, char far *output, unsigned int count);

DESCRIPTION: Perform an AES-CBC decryption operation.

PARAMETER 1: An AES stream state structure, initialized
PARAMETER 2: The cipher-text message (an xmem buffer)
PARAMETER 3: The output buffer, for return of decrypted text (in xmem).  Must
				 be as large as the cipher-text buffer.  May be the same as the
				 cipher-text buffer.
PARAMETER 4: The length of the message.  Must a multiple of
               _AES_CBC_BLK_SZ_

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION *********************************************************/

_aes_debug
int AESdecryptStream4xK_CBC(void /*AESstreamState*/ __far* _state,
				const char __far * text,
            char __far * output, unsigned int count)
{
   auto int i;
   auto char temp[_AES_CBC_BLK_SZ_];  // temp storage for ciphertext
   char __far *fbreg; // Pointer to state->feedback_register -- subexpression
   char __far *ptext; // Pointer to text
   AESstreamState __far * state = _state;


   if (0 != (count % _AES_CBC_BLK_SZ_)) {
   #ifdef AES_CBC_BUFSIZE_ALERT
      // Count must be a multiple of _AES_CBC_BLK_SZ_
      assert(0);
   #endif
      return 1;
   }

   fbreg = state->feedback_register;
   // *text = iv ^ *text
   while (count >= _AES_CBC_BLK_SZ_) {
      // use temp storage in root for decryption
      AESdecrypt4xK(state->expanded_key, text, temp, state->nk);

      xor16(temp, fbreg);

      // feedback now becomes previous ciphertext
      _f_memcpy(fbreg, text, _AES_CBC_BLK_SZ_);
      // Put plaintext into xmem buffer
      _f_memcpy(output, temp, _AES_CBC_BLK_SZ_);
      text += _AES_CBC_BLK_SZ_;
      output += _AES_CBC_BLK_SZ_;
      count -= _AES_CBC_BLK_SZ_;
   }
   return 0;
}



/*** BeginHeader aes_wrap */
int aes_wrap(const char __far * kek, int n, const char __far * plain,
																				char __far * cipher);
/*** EndHeader */
_aes_debug
int aes_wrap(const char __far * kek, int n, const char __far * plain,
																				char __far * cipher)
{
    auto char __far * a;
    auto char __far * r;
    auto char b[16];
    auto int i;
    auto int j;
    auto char ctx[176];

    a = cipher;
    r = cipher+8;
    _f_memset(a, 0xa6, 8);
    _f_memcpy(r, plain, n<<3);
	 AESexpandKey4(ctx, kek);

    for (j = 0; j<=5; ++j) {
        r = cipher+8;
        for (i = 1; i<=n; ++i) {
            _f_memcpy(b, a, 8);
            _f_memcpy(b+8, r, 8);
            AESencrypt4x4(ctx, b, b);
            _f_memcpy(a, b, 8);
            a[7] ^= n*j+i;
            _f_memcpy(r, b+8, 8);
            r += 8;
        }
    }

    return 0;

}


/*** BeginHeader aes_unwrap */
int aes_unwrap(const char __far * kek, int n, const char __far * cipher,
																				char __far * plain);
/*** EndHeader */
_aes_debug
int aes_unwrap(const char __far * kek, int n, const char __far * cipher,
																				char __far * plain)
{
    auto char a[8];
    auto char __far * r;
    auto char b[16];
    auto int i;
    auto int j;
    auto char ctx[176];


    _f_memcpy(a, cipher, 8);
    r = plain;
    _f_memcpy(r, cipher+8, 8*n);
	 AESexpandKey4(ctx, kek);

    for (j = 5; j>=0; --j) {
        r = plain+(n-1)*8;
        for (i = n; i>=1; --i) {
            _f_memcpy(b, a, 8);
            b[7] ^= n*j+i;
            _f_memcpy(b+8, r, 8);
            AESdecrypt4x4(ctx, b, b);
            _f_memcpy(a, b, 8);
            _f_memcpy(r, b+8, 8);
            r -= 8;
        }
    }

    for (i = 0; i<8; ++i)
        if (a[i]!=0xa6) return -EINVAL;

    return 0;

}


/*** BeginHeader _gf_mulx */
void _gf_mulx(char __far * pad);
/*** EndHeader */
_aes_debug
void _gf_mulx(char __far * pad) {
    auto int i;
    auto int carry;


    carry = pad[0]&0x80;
    for (i = 0; i<15; ++i)
    	pad[i] = (pad[i]<<1)|(pad[i+1]>>7);

    pad[15] <<= 1;
    if (carry) pad[15] ^= 0x87;
}


/*** BeginHeader omac1_aes_128 */
int omac1_aes_128(const char __far * key, char __far * data, size_t data_len,
																					char __far * mac);
/*** EndHeader */
_aes_debug
int omac1_aes_128(const char __far * key, char __far * data, size_t data_len,
																					char __far * mac)
{
    auto char cbc[16];
    auto char pad[16];
    auto char __far * pos;
    auto size_t i;
    auto size_t left;
    auto char ctx[176];

    pos = data;
    left = data_len;
	 AESexpandKey4(ctx, key);

    _f_memset(cbc, 0, 16);
    while (left>=16) {
        xor16(cbc, pos);
        pos += 16;
        if (left>16)
        	AESencrypt4x4(ctx, cbc, cbc);
        left -= 16;
    }

    _f_memset(pad, 0, 16);
    AESencrypt4x4(ctx, pad, pad);
    _gf_mulx(pad);
    if (left || data_len==0) {
        xor_n(cbc, pos, left);
        pos += left;
        cbc[left] ^= 0x80;
        _gf_mulx(pad);
    }

    xor16(pad, cbc);
    AESencrypt4x4(ctx, pad, mac);
    return 0;

}


/*** BeginHeader aes_128_ctr_encrypt */
// From "aes_wrap.c":247
int aes_128_ctr_encrypt(const char __far * key, const char __far * nonce,
								char __far * data, size_t data_len);
/*** EndHeader */
_aes_debug
int aes_128_ctr_encrypt(const char __far * key, const char __far * nonce,
								char __far * data, size_t data_len)
{
    auto char ctx[176];
    auto size_t j;
    auto size_t len;
    auto size_t left;
    auto int i;
    auto char __far * pos;
    auto char counter[16];
    auto char buf[16];

    left = data_len;
    pos = data;

	 AESexpandKey4(ctx, key);

    _f_memcpy(counter, nonce, 16);
    while (left>0) {
        AESencrypt4x4(ctx, counter, buf);
        len = (left<16) ? left : 16;
        xor_n(pos, buf, len);
        pos += len;
        left -= len;
        for (i = 16-1; i>=0; i--) {
            ++counter[i];
            if (counter[i]) break;
        }
    }

    return 0;

}


/*** BeginHeader aes_128_eax_encrypt */
int aes_128_eax_encrypt(const char __far * key,
								const char __far * nonce, size_t nonce_len,
								const char __far * hdr, size_t hdr_len,
								char __far * data, size_t data_len,
								char __far * tag);
/*** EndHeader */
_aes_debug
int aes_128_eax_encrypt(const char __far * key,
	 							const char __far * nonce, size_t nonce_len,
	 							const char __far * hdr, size_t hdr_len,
	 							char __far * data, size_t data_len,
	 							char __far * tag) {
    auto char __far * buf;
    auto size_t buf_len;
    auto char nonce_mac[16];
    auto char hdr_mac[16];
    //auto char data_mac[16];
    auto int i;


    if (nonce_len>data_len)
    	buf_len = nonce_len;
    else
    	buf_len = data_len;

    if (hdr_len>buf_len)
    	buf_len = hdr_len;

    buf_len += 16;

    buf = _sys_malloc(buf_len);
    if (!buf) return  -ENOMEM;

    _f_memset(buf, 0, 16);
    _f_memcpy(buf+16, nonce, nonce_len);
    omac1_aes_128(key, buf, 16+nonce_len, nonce_mac);
    buf[15] = 1;
    _f_memcpy(buf+16, hdr, hdr_len);
    omac1_aes_128(key, buf, 16+hdr_len, hdr_mac);
    aes_128_ctr_encrypt(key, nonce_mac, data, data_len);
    buf[15] = 2;
    _f_memcpy(buf+16, data, data_len);
    //omac1_aes_128(key, buf, 16+data_len, data_mac);
    omac1_aes_128(key, buf, 16+data_len, tag);
    //for (i = 0; i<16; i++)
    //	tag[i] = nonce_mac[i]^data_mac[i]^hdr_mac[i];
    // 'tag' already set to data_mac. xor in the others...
    xor16(tag, nonce_mac);
    xor16(tag, hdr_mac);

    _sys_free(buf);

    return 0;

}


/*** BeginHeader aes_128_eax_decrypt */
int aes_128_eax_decrypt(const char __far * key,
								const char __far * nonce, size_t nonce_len,
								const char __far * hdr, size_t hdr_len,
								char __far * data, size_t data_len,
								char __far * tag);
/*** EndHeader */
_aes_debug
int aes_128_eax_decrypt(const char __far * key,
								const char __far * nonce, size_t nonce_len,
								const char __far * hdr, size_t hdr_len,
								char __far * data, size_t data_len,
								char __far * tag) {
    auto char __far * buf;
    auto size_t buf_len;
    auto char nonce_mac[16];
    auto char hdr_mac[16];
    auto char data_mac[16];
    auto int i;


    if (nonce_len>data_len) buf_len = nonce_len;
    else buf_len = data_len;

    if (hdr_len>buf_len) buf_len = hdr_len;

    buf_len += 16;
    buf = _sys_malloc(buf_len);
    if (!buf)
    	return  -ENOMEM;

    _f_memset(buf, 0, 15);
    buf[15] = 0;
    _f_memcpy(buf+16, nonce, nonce_len);
    omac1_aes_128(key, buf, 16+nonce_len, nonce_mac);
    buf[15] = 1;
    _f_memcpy(buf+16, hdr, hdr_len);
    omac1_aes_128(key, buf, 16+hdr_len, hdr_mac);
    buf[15] = 2;
    _f_memcpy(buf+16, data, data_len);
    omac1_aes_128(key, buf, 16+data_len, data_mac);
    _sys_free(buf);
    for (i = 0; i<16; i++)
        if (tag[i]!=(nonce_mac[i]^data_mac[i]^hdr_mac[i]))
        		return  -2;
    aes_128_ctr_encrypt(key, nonce_mac, data, data_len);
    return 0;

}


/*** BeginHeader aes_128_cbc_encrypt */
// From "aes_wrap.c":414
int aes_128_cbc_encrypt(const char __far * key,
								const char __far * iv,
								char __far * data,
								size_t data_len);
/*** EndHeader */
_aes_debug
int aes_128_cbc_encrypt(const char __far * key,
								const char __far * iv,
								char __far * data,
								size_t data_len) {
	auto AESstreamState state;

	AESinitStream4x4(&state, key, iv);
	return AESencryptStream4xK_CBC(&state, data, data, data_len);
}


/*** BeginHeader aes_128_cbc_decrypt */
int aes_128_cbc_decrypt(const char __far * key,
								const char __far * iv,
								char __far * data,
								size_t data_len);
/*** EndHeader */
_aes_debug
int aes_128_cbc_decrypt(const char __far * key,
								const char __far * iv,
								char __far * data,
								size_t data_len) {
	auto AESstreamState state;

	AESinitStream4x4(&state, key, iv);
	return AESdecryptStream4xK_CBC(&state, data, data, data_len);
}


/*** BeginHeader */
#endif
/*** EndHeader */

