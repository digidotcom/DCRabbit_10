/*
 *  Copyright (c) 2015 Digi International Inc.
 *  SHA-224/SHA-256 implementation for Rabbit 4000/5000/6000 microprocessors,
 *  based on:
 *
 *  FIPS-180-2 compliant SHA-256 implementation
 *
 *  Copyright (C) 2001-2003  Christophe Devine
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/* START LIBRARY DESCRIPTION *********************************************
SHA2.LIB

Implementation of SHA-224 and SHA-256 digest algorithms from the SHA-2 spec.

See SHA512.LIB for the SHA-384 and SHA-512 digest algorithms.

For details, see https://en.wikipedia.org/wiki/SHA-2.

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __SHA2_LIB__
#define __SHA2_LIB__

#ifdef SHA2_DEBUG
	#define _sha2_debug __debug
#else
	#define _sha2_debug __nodebug
#endif

// make use of sha_copy_and_swap() and _sha_pad from sha1.lib
#use "sha1.lib"

#include <string.h>
#include <stdint.h>

// The SHA-256 state structure. This contains everything an individual SHA-256
// hash needs to save state
typedef struct
{
	// length of all input data added
	uint32_t total[2];

	// current state of the hash
	uint32_t state[8];

	// buffer of unprocessed bytes; algorithm requires a full block of 64 bytes
	uint8_t buffer[64];
} sha256_context;

// SHA-224 is almost identical to SHA-256
typedef sha256_context sha224_context;

#define SHA256_BLOCK_LENGTH         64      /* input block size (in bytes) */
#define SHA256_LENGTH               32      /* bytes produced by hash */
#define SHA224_BLOCK_LENGTH         64      /* input block size (in bytes) */
#define SHA224_LENGTH               28      /* bytes produced by hash */
/*** EndHeader */


/*** BeginHeader sha256_init */
void sha256_init(sha256_context __far *ctx);
/*** EndHeader */
// Initialization constants for hash state values.  The first 32 bits of the
// fractional parts of the square roots of the first 8 primes 2..19).
static const __far uint32_t _sha256_context_start[] = {
	0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
	0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19
};
/* START FUNCTION DESCRIPTION ********************************************
sha256_init										   <SHA2.LIB>

SYNTAX: void sha256_init(sha256_context far *ctx);

DESCRIPTION: Initialize a SHA-256 hash.

PARAMETER 1: Pointer to SHA-256 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha256_init(sha256_context __far *ctx)
{
	ctx->total[0] = 0;
	ctx->total[1] = 0;

	_f_memcpy(ctx->state, _sha256_context_start, sizeof ctx->state);
}


/*** BeginHeader sha224_init */
void sha224_init(sha224_context __far *ctx);
/*** EndHeader */
// Initialization constants for hash state values.  The second 32 bits of the
// fractional parts of the square roots of the first 9th through 16th primes 23..53).
static const __far uint32_t _sha224_context_start[] = {
	0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
};
/* START FUNCTION DESCRIPTION ********************************************
sha224_init										   <SHA2.LIB>

SYNTAX: void sha224_init(sha224_context far *ctx);

DESCRIPTION: Initialize a SHA-224 hash.

PARAMETER 1: Pointer to SHA-224 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha224_init(sha224_context __far *ctx)
{
	ctx->total[0] = 0;
	ctx->total[1] = 0;

	_f_memcpy(ctx->state, _sha224_context_start, sizeof ctx->state);
}


/*** BeginHeader sha256_add */
#define sha224_add(ctx, input, length) sha256_add(ctx, input, length)
void sha256_add(sha256_context __far *ctx, const uint8_t __far *input,
	uint16_t length);
/*** EndHeader */
#define S0(x) _sha256_S0(x)
#define S1(x) _sha256_S1(x)
#define F0_S2(x,y,z) _sha256_F0_S2(x,y,z)
#define F1_S3(x,y,z) _sha256_F1_S3(x,y,z)
uint32_t _sha256_S0(uint32_t x);
uint32_t _sha256_S1(uint32_t x);
root _sha2_debug
// result in jkhl and not bcde
// all arguments in registers and no stack use
uint32_t _sha256_F0_S2(uint32_t _x, uint32_t _y, uint32_t _z)
{
	// return S2(x) + ((x & y) | (z & (x | y)));
	#asm
		; First calculate S2(x)
		align even
		ld px, bcde     ; PX = x, PY = y, PW = z
		ld jkhl, px
		rrc 2, jkhl     ; JKHL = ROTR(x,2)
		rlc 8, bcde
		rlc 2, bcde     ; BCDE = ROTR(x,22) (same as ROTL(x,10))
		xor jkhl, bcde  ; JKHL = ROTR(x,2) ^ ROTR(x,22)
		rlc 8, bcde
		rlc 1, bcde     ; BCDE = ROTR(x,13) (same as ROTL(x,19))
		xor jkhl, bcde  ; JKHL = ROTR(x,2) ^ ROTR(x,22) ^ ROTR(x,13)
#if _RAB6K
		ld bcde, px
		ld px, jkhl     	; PX = S2(x), BCDE = x
		ld jkhl, py
		and jkhl, bcde
		ld pz, jkhl         ; pz = x & y
		ld jkhl, py
		or jkhl, bcde       ; jkhl = x | y
		and jkhl, pw        ; jkhl = z & (x | y)
		or jkhl, pz         ; jkhl = (x & y) | (z & (x | y))
		add jkhl, px        ; add S2(x) before returning
#else
		ld bcde, px
		ld px, jkhl     ; PX = S2(x), BCDE = x
		ld jkhl, py
		and jkhl, bcde
		ld pz, jkhl           ; pz = x & y
		ld jkhl, py
		or jkhl, bcde         ; jkhl = x | y
		ld bcde, pw
		and jkhl, bcde        ; jkhl = z & (x + y)
		ld bcde, pz
		or jkhl, bcde         ; jkhl = (x & y) | (z & (x | y))

		ld bcde, px
		add jkhl, bcde        ; add S2(x) before returning
#endif
	#endasm
}

root _sha2_debug
uint32_t _sha256_F1_S3(uint32_t _x, uint32_t _y, uint32_t _z)
{
	// return S3(x) + (z ^ (x & (y ^ z)));
	// result in jkhl and not bcde
	// all arguments in registers and no stack use
	#asm
		; First calculate S3(x)
		align even
		ld px, bcde     ; px = x, py = y and pz = z
		ld jkhl, px
		rlc 8, jkhl
		rrc 1, jkhl     ; jkhl = ROTR(x,25) (same as ROTL(x,7)
		rrc 4, bcde
		rrc 2, bcde     ; bcde = ROTR(x,6)
		xor jkhl, bcde  ; jkhl = ROTR(x,25) ^ ROTR(x,6)
		rrc 4, bcde
		rrc 1, bcde     ; bcde = ROTR(x,11)
		xor jkhl, bcde  ; jkhl = ROTR(x,25) ^ ROTR(x,6) ^ ROTR(x,11)
#if _RAB6K
		ex jkhl, bcde
		align even
		ld jkhl, py
		xor jkhl, pz           ; jkhl = y ^ z
		and jkhl, px           ; jkhl = x & (y ^ z)
		xor jkhl, pz           ; jkhl = z ^ (x & (y ^ z))
		add jkhl, bcde         ; jkhl = S3(x) + (z ^ (x & (y ^ z)))
#else
		ld pw, jkhl     ; pw = S3(x)
		ld bcde, pz
		ld jkhl, py
		xor jkhl, bcde           ; jkhl = y ^ z
		ld bcde, px
		and jkhl, bcde           ; jkhl = x & (y ^ z)
		ld bcde, pz
		xor jkhl, bcde           ; jkhl = z ^ (x & (y ^ z))

		ld bcde, pw
		add jkhl, bcde           ; jkhl = S3(x) + (z ^ (x & (y ^ z)))
#endif
	#endasm
}

#asm root
// result in jkhl and not bcde
// all arguments in registers and no stack use
_sha256_S1_S0::        ; (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))
					   ; (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3)
	align even
	ldl pw, hl		; Save pointer
	ld bcde, (hl)	; stack data so hl points to it to save a couple of clocks...
	ld px, bcde     ; PX = x
	ld jkhl, px
	xor a
	align even
	rrb a, jkhl
	srl 2, jkhl     ; JKHL = SHR(x,10)
	rrc 8, bcde
	rrc 8, bcde
	rrc 1, bcde     ; BCDE = ROTR(x,17)
	xor jkhl, bcde  ; JKHL = SHR(x,10) ^ ROTR(x,17)
	rrc 2, bcde     ; BCDE = ROTR(x,19)
	xor jkhl, bcde  ; JKHL = SHR(x,10) ^ ROTR(x,17) ^ ROTR(x,19)
	ld pz, jkhl
	ld bcde, (pw - 52)
	align even
	ld px, bcde     ; PX = x
	ld jkhl, px
	srl 1, jkhl
	srl 2, jkhl     ; JKHL = SHR(x,3)
	rrc 8, bcde
	rlc 1, bcde
	xor jkhl, bcde  ; JKHL = SHR(x,3) ^ ROTR(x,7)
	rrc 8, bcde
	rrc 2, bcde
	rrc 1, bcde     ; BCDE = ROTR(x,18)
	xor jkhl, bcde  ; JKHL = SHR(x,3) ^ ROTR(x,7) ^ ROTR(x,18)
	ld bcde, pz
	add jkhl, bcde
#if _RAB6K
	add jkhl, (pw - 20)
	add jkhl, (pw - 56)
#else
	ld bcde, (pw - 20)
	add jkhl, bcde
	ld bcde, (pw - 56)
	add jkhl, bcde
#endif
	ld (pw + 8), jkhl
	ex jkhl, bcde
	ret
#endasm
/* START _FUNCTION DESCRIPTION ********************************************
sha256_process 										   <SHA2.LIB>

SYNTAX: void sha256_process(sha256_context *ctx, const uint8_t far data[64]);

DESCRIPTION: Add a block of 64 bytes to the SHA-224/SHA-256 hash.

PARAMETER 1: Pointer to SHA-224/SHA-256 state structure
PARAMETER 2: Pointer root data buffer containing data block

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha256_process(sha256_context __far *ctx, const uint8_t __far data[64])
{
	uint32_t W[64], temp1;
	// note that code later in this function relies on A-H being
	// sequential on the stack, starting with A
	uint32_t Hx, Gx, Fx, Ex, Dx, Cx, Bx, Ax;
	uint32_t __far *state, *work;
	int i;

#if _RAB6K
#asm
	ld hl, @sp + W
	add hl, sp
	ldl		px, hl		; dest in PX
	ld		bc, 16
	ld hl, @sp + data
	add hl, sp
	ld jkhl, (hl)
	ld		py, jkhl	; source in PY
	ld de, 4
.loop:
	ld jkhl, (py)
	swap jkhl
	ld (px), jkhl
	ld px, px + de
	ld py, py + de
	dwjnz	.loop
#endasm
#else
	sha_copy_and_swap(W, data, 16);
#endif
// Original C macros for comparison
//
// #define Rx(t)   (W[t] = S1(W[t - 2]) + S0(W[t - 15]) + W[t - 7] + W[t - 16])
// #define P(a,b,c,d,e,f,g,h,x,K)                  \
// {                                               \
// 	temp1 = F1_S3(e,f,g) + x + h + K;           \
// 	h = F0_S2(a,b,c) + temp1;                   \
// 	d += temp1;                                 \
// }

// We construct a far pointer to the stack data and pre adjust by 8 bytes so we
// can use (hl) for first access. Called function will move near pointer to pointer
// register to save a few bytes per iteration.
//
#define R(t) Rasm((t * 4) - 8)
#define Rasm(t) asm $\
	ld hl, @SP + W + t$\
	add hl, sp $\
	call _sha256_S1_S0 $\

// bcde is assumed to already have e loaded from previous Pasm2.
#if _RAB6K
#define Pasm(a,b,c,d,e,f,g,h,x,K) asm $\
	ld pz, (sp + @SP + g) $\
	ld py, (sp + @SP + f) $\
	call _sha256_F1_S3 $\
	add jkhl, (sp + @SP + h) $\
	ld bcde, (sp + @sp + W + x) $\
	add jkhl, bcde $\
	ld pw, K $\
	add jkhl, pw $\
	altd ld pw, jkhl $\
	ld pw, (sp + @SP + c) $\
	ld py, (sp + @SP + b) $\
	ld bcde, (sp + @SP + a) $\
	call _sha256_F0_S2 $\
	alts ld bcde, pw $\
	add jkhl, bcde $\
	ld (sp + @SP + h), jkhl $\
	ld jkhl, (sp + @SP + d) $\
	add jkhl, bcde $\
	ld (sp + @SP + d), jkhl $\
	ex jkhl, bcde
#else
#define Pasm(a,b,c,d,e,f,g,h,x,K) asm $\
	ld pz, (sp + @SP + g) $\
	ld py, (sp + @SP + f) $\
	call _sha256_F1_S3 $\
	ld bcde, (sp + @SP + h) $\
	add jkhl, bcde $\
	ld bcde, (sp + @sp + W + x) $\
	add jkhl, bcde $\
	ld de, K & 0xFFFF $\
	ld bc, K >> 16 $\
	add jkhl, bcde $\
	ld (sp + @SP + temp1), jkhl $\
	ld pw, (sp + @SP + c) $\
	ld py, (sp + @SP + b) $\
	ld bcde, (sp + @SP + a) $\
	call _sha256_F0_S2 $\
	ld bcde, (sp + @SP + temp1) $\
	add jkhl, bcde $\
	ld (sp + @SP + h), jkhl $\
	ld jkhl, (sp + @SP + d) $\
	add jkhl, bcde $\
	ld (sp + @SP + d), jkhl $\
	ex jkhl, bcde
#endif

// bcde is assumed to already have e loaded from previous Pasm2.
#if _RAB6K
#define Pasm1(a,b,c,d,e,f,g,h,x,K) asm $\
	ld pz, (sp + @SP + g) $\
	ld py, (sp + @SP + f) $\
	call _sha256_F1_S3 $\
	add jkhl, (sp + @SP + h) $\
	ld py, jkhl
#else
#define Pasm1(a,b,c,d,e,f,g,h,x,K) asm $\
	ld pz, (sp + @SP + g) $\
	ld py, (sp + @SP + f) $\
	call _sha256_F1_S3 $\
	ld bcde, (sp + @SP + h) $\
	add jkhl, bcde $\
	ld py, jkhl
#endif

#if _RAB6K
#define Pasm2(a,b,c,d,e,f,g,h,x,K) asm $\
	align even $\
	ld jkhl, py $\
	add jkhl, bcde $\
	ld pw, K $\
	add jkhl, pw $\
	altd ld pw, jkhl $\
	ld pw, (sp + @SP + c) $\
	ld py, (sp + @SP + b) $\
	ld bcde, (sp + @SP + a) $\
	call _sha256_F0_S2 $\
	alts ld bcde, pw $\
	add jkhl, bcde $\
	ld (sp + @SP + h), jkhl $\
	ld jkhl, (sp + @SP + d) $\
	add jkhl, bcde $\
	ld (sp + @SP + d), jkhl $\
	ex jkhl, bcde
#else
#define Pasm2(a,b,c,d,e,f,g,h,x,K) asm $\
	ld jkhl, py $\
	add jkhl, bcde $\
	ld de, K & 0xFFFF $\
	ld bc, K >> 16 $\
	add jkhl, bcde $\
	ld (sp + @SP + temp1), jkhl $\
	ld pw, (sp + @SP + c) $\
	ld py, (sp + @SP + b) $\
	ld bcde, (sp + @SP + a) $\
	call _sha256_F0_S2 $\
	ld bcde, (sp + @SP + temp1) $\
	add jkhl, bcde $\
	ld (sp + @SP + h), jkhl $\
	ld jkhl, (sp + @SP + d) $\
	add jkhl, bcde $\
	ld (sp + @SP + d), jkhl $\
	ex jkhl, bcde
#endif
	// copy ctx->state[0..7] to A..H
	state = ctx->state;
	_f_memcpy(&Ax, state, 32);

	Ex; // Pasm2 macro leaves 5th parameter already in bcde so we just need to
        // preload it for the first Pasm1 to save some time and code size...
	Pasm( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0,  0x428A2F98 );
   	Pasm( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 4,  0x71374491 );
	Pasm( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 8,  0xB5C0FBCF );
	Pasm( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 12, 0xE9B5DBA5 );
	Pasm( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 16, 0x3956C25B );
	Pasm( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 20, 0x59F111F1 );
	Pasm( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 24, 0x923F82A4 );
	Pasm( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 28, 0xAB1C5ED5 );
	Pasm( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 32, 0xD807AA98 );
	Pasm( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 36, 0x12835B01 );
	Pasm( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 40, 0x243185BE );
	Pasm( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 44, 0x550C7DC3 );
	Pasm( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 48, 0x72BE5D74 );
	Pasm( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 52, 0x80DEB1FE );
	Pasm( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 56, 0x9BDC06A7 );
	Pasm( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 60, 0xC19BF174 );

	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0xE49B69C1 );
	R(16);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0xE49B69C1 );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xEFBE4786 );
	R(17);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xEFBE4786 );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x0FC19DC6 );
	R(18)
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x0FC19DC6 );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x240CA1CC );
	R(19);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x240CA1CC );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x2DE92C6F );
	R(20);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x2DE92C6F );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x4A7484AA );
	R(21);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x4A7484AA );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x5CB0A9DC );
	R(22);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x5CB0A9DC );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x76F988DA );
	R(23);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x76F988DA );
	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x983E5152 );
	R(24);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x983E5152 );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xA831C66D );
	R(25);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xA831C66D );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0xB00327C8 );
	R(26);
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0xB00327C8 );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0xBF597FC7 );
	R(27);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0xBF597FC7 );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0xC6E00BF3 );
	R(28);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0xC6E00BF3 );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xD5A79147 );
	R(29);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xD5A79147 );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x06CA6351 );
	R(30);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x06CA6351 );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x14292967 );
	R(31);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x14292967 );
	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x27B70A85 );
	R(32);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x27B70A85 );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x2E1B2138 );
	R(33);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x2E1B2138 );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x4D2C6DFC );
	R(34);
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x4D2C6DFC );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x53380D13 );
	R(35);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x53380D13 );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x650A7354 );
	R(36);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x650A7354 );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x766A0ABB );
	R(37);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x766A0ABB );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x81C2C92E );
	R(38);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x81C2C92E );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x92722C85 );
	R(39);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x92722C85 );
	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0xA2BFE8A1 );
	R(40);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0xA2BFE8A1 );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xA81A664B );
	R(41);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0xA81A664B );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0xC24B8B70 );
	R(42);
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0xC24B8B70 );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0xC76C51A3 );
	R(43);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0xC76C51A3 );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0xD192E819 );
	R(44);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0xD192E819 );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xD6990624 );
	R(45);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xD6990624 );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0xF40E3585 );
	R(46);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0xF40E3585 );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x106AA070 );
	R(47);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x106AA070 );
	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x19A4C116 );
	R(48);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x19A4C116 );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x1E376C08 );
	R(49);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x1E376C08 );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x2748774C );
	R(50);
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x2748774C );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x34B0BCB5 );
	R(51);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x34B0BCB5 );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x391C0CB3 );
	R(52);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x391C0CB3 );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x4ED8AA4A );
	R(53);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0x4ED8AA4A );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x5B9CCA4F );
	R(54);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0x5B9CCA4F );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x682E6FF3 );
	R(55);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0x682E6FF3 );
	Pasm1( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x748F82EE );
	R(56);
	Pasm2( Ax, Bx, Cx, Dx, Ex, Fx, Gx, Hx, 0, 0x748F82EE );
	Pasm1( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x78A5636F );
	R(57);
	Pasm2( Hx, Ax, Bx, Cx, Dx, Ex, Fx, Gx, 0, 0x78A5636F );
	Pasm1( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x84C87814 );
	R(58);
	Pasm2( Gx, Hx, Ax, Bx, Cx, Dx, Ex, Fx, 0, 0x84C87814 );
	Pasm1( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x8CC70208 );
	R(59);
	Pasm2( Fx, Gx, Hx, Ax, Bx, Cx, Dx, Ex, 0, 0x8CC70208 );
	Pasm1( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x90BEFFFA );
	R(60);
	Pasm2( Ex, Fx, Gx, Hx, Ax, Bx, Cx, Dx, 0, 0x90BEFFFA );
	Pasm1( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xA4506CEB );
	R(61);
	Pasm2( Dx, Ex, Fx, Gx, Hx, Ax, Bx, Cx, 0, 0xA4506CEB );
	Pasm1( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0xBEF9A3F7 );
	R(62);
	Pasm2( Cx, Dx, Ex, Fx, Gx, Hx, Ax, Bx, 0, 0xBEF9A3F7 );
	Pasm1( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0xC67178F2 );
	R(63);
	Pasm2( Bx, Cx, Dx, Ex, Fx, Gx, Hx, Ax, 0, 0xC67178F2 );

#if _RAB6K
#asm
	; Add result back into original 8 values
	;
	ld px, (sp + @sp + state)
	ld jkhl, -1
	ld hl, @sp + Ax
	add hl, sp
	ld py, jkhl
	ld jkhl,      (px)
	add jkhl,     (py)
	ld (px),      jkhl
	ld jkhl,      (px + 4)
	add jkhl,     (py + 4)
	ld (px + 4),  jkhl
	ld jkhl,      (px + 8)
	add jkhl,     (py + 8)
	ld (px + 8),  jkhl
	ld jkhl,      (px + 12)
	add jkhl,     (py + 12)
	ld (px + 12), jkhl
	ld jkhl,      (px + 16)
	add jkhl,     (py + 16)
	ld (px + 16), jkhl
	ld jkhl,      (px + 20)
	add jkhl,     (py + 20 )
	ld (px + 20), jkhl
	ld jkhl,      (px + 24)
	add jkhl,     (py + 24)
	ld (px + 24), jkhl
	ld jkhl,      (px + 28)
	add jkhl,     (py + 28)
	ld (px + 28), jkhl
#endasm
#else
	work = &Ax;
	for (i = 0; i < 8; ++state, ++work, ++i)
	{
		*state += *work;
	}
#endif
}

/* START FUNCTION DESCRIPTION ********************************************
sha224_add 										   <SHA2.LIB>

SYNTAX: void sha224_add(sha224_context far *ctx,
						const uint8_t far *input,
						uint16_t length);

DESCRIPTION: Add an arbitrary amount of data to a SHA-224 hash. The
			 current hash is passed in through the state parameter,
			 and the data and its length in the other two parameters.

PARAMETER 1: Pointer to SHA-224 state structure
PARAMETER 2: Pointer to data buffer containing input data
PARAMETER 3: The length (in bytes) of the input data

RETURN VALUE: None

END DESCRIPTION **********************************************************/
/* START FUNCTION DESCRIPTION ********************************************
sha256_add 										   <SHA2.LIB>

SYNTAX: void sha256_add(sha256_context far *ctx,
						const uint8_t far *input,
						uint16_t length);

DESCRIPTION: Add an arbitrary amount of data to a SHA-256 hash. The
			 current hash is passed in through the state parameter,
			 and the data and its length in the other two parameters.

PARAMETER 1: Pointer to SHA-256 state structure
PARAMETER 2: Pointer to data buffer containing input data
PARAMETER 3: The length (in bytes) of the input data

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha256_add(sha256_context __far *ctx, const uint8_t __far *input,
	uint16_t length)
{
	int left, fill;

	if (! length) return;

	left = (int) (ctx->total[0] & 0x3F);
	fill = 64 - left;

	ctx->total[0] += length;
	ctx->total[0] &= 0xFFFFFFFF;

	if (ctx->total[0] < length)
		ctx->total[1]++;

	if (left && length >= fill)
	{
		_f_memcpy(ctx->buffer + left, input, fill);
		sha256_process(ctx, ctx->buffer);
		length -= fill;
		input  += fill;
		left = 0;
	}

	while (length >= 64)
	{
		sha256_process(ctx, input);
		length -= 64;
		input  += 64;
	}

	if (length)
	{
		_f_memcpy(ctx->buffer + left, input, (int) length);
	}
}

/*** BeginHeader sha224_finish */
void sha224_finish(sha224_context far *ctx, uint8_t far digest[SHA224_LENGTH]);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
sha224_finish 										<SHA2.LIB>

SYNTAX: void sha224_finish(sha224_context far *ctx,
                           uint8_t far digest[SHA224_LENGTH]);

DESCRIPTION: Finish a SHA-224 hash and return the result. The output
			 parameter must be a data buffer of at least SHA224_LENGTH (28) bytes
			 (the size of a SHA-224 hash output).

PARAMETER 1: Pointer to SHA-224 state structure
PARAMETER 2: Pointer to buffer for output data.  Must be at least 28 bytes.

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha224_finish(sha224_context __far *ctx, uint8_t far digest[SHA224_LENGTH])
{
	_sha256_finish_common(ctx, digest, 7);
}

/*** BeginHeader sha256_finish */
void sha256_finish(sha256_context far *ctx, uint8_t far digest[SHA256_LENGTH]);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
sha256_finish 										<SHA2.LIB>

SYNTAX: void sha256_finish(sha256_context far *ctx,
                           uint8_t far digest[SHA256_LENGTH]);

DESCRIPTION: Finish a SHA-256 hash and return the result. The output
			 parameter must be a data buffer of at least SHA256_LENGTH (32) bytes
			 (the size of a SHA-256 hash output).

PARAMETER 1: Pointer to SHA-256 state structure
PARAMETER 2: Pointer to buffer for output data.  Must be at least 32 bytes.

RETURN VALUE: None

END DESCRIPTION **********************************************************/
_sha2_debug
void sha256_finish(sha256_context __far *ctx, uint8_t far digest[SHA256_LENGTH])
{
	_sha256_finish_common(ctx, digest, 8);
}

/*** BeginHeader _sha256_finish_common */
void _sha256_finish_common(sha256_context __far *ctx, uint8_t __far *digest,
	int digest_length);
/*** EndHeader */
_sha2_debug
void _sha256_finish_common(sha256_context __far *ctx, uint8_t __far *digest,
	int digest_length)
{
	int last, padn;
	uint32_t len[2];
	uint8_t msglen[8];

	len[0] = (ctx->total[1] << 3) | (ctx->total[0] >> 29);
	len[1] = (ctx->total[0] << 3);

	sha_copy_and_swap(msglen, len, 2);

	last = (int) (ctx->total[0] & 0x3F);
	padn = (last < 56) ? (56 - last) : (120 - last);

	sha256_add(ctx, _sha_pad, padn);
	sha256_add(ctx, msglen, 8);

	sha_copy_and_swap(digest, ctx->state, digest_length);
}

/*** BeginHeader sha224_vector */
void sha224_vector(size_t num_elem, const char __far * __far * addr,
	  				  const size_t __far *len, char __far *mac);
/*** EndHeader */
// used by x509.lib
_sha_debug
void sha224_vector(size_t num_elem, const char __far * __far * addr,
                 const size_t __far *len, char __far *mac)
{
	auto word i;
	auto sha224_context pms;

	sha224_init(&pms);
	for (i = 0; i < num_elem; ++i)
		sha224_add(&pms, addr[i], len[i]);
	sha224_finish(&pms, mac);
}

/*** BeginHeader sha256_vector */
void sha256_vector(size_t num_elem, const char __far * __far * addr,
	  				  const size_t __far *len, char __far *mac);
/*** EndHeader */
// used by x509.lib
_sha_debug
void sha256_vector(size_t num_elem, const char __far * __far * addr,
                 const size_t __far *len, char __far *mac)
{
	auto word i;
	auto sha256_context pms;

	sha256_init(&pms);
	for (i = 0; i < num_elem; ++i)
		sha256_add(&pms, addr[i], len[i]);
	sha256_finish(&pms, mac);
}

/*** BeginHeader */
#endif
/*** EndHeader */