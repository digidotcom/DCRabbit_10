/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
HMAC.LIB

DESCRIPTION: Implemenation of HMAC secure hash for use with SSL and other
             message authenticating protocols.
				 Follows RFC 2104.

				 Currently supports MD5, SHA-1 and SHA-256 as the underlying message
				 digest algorithms.

  NOTE: SHA1.LIB contains some specific HMAC functions, which complement the
        generic functions herein.
END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __HMAC_LIB__
#define __HMAC_LIB__

#ifndef __MD5_LIB
	#use "md5.lib"
#endif
#ifndef __SHA_LIB__
	#use "sha1.lib"
#endif
#ifndef __SHA2_LIB__
	#use "sha2.lib"
#endif

// Debug macros

// Define HMAC_DEBUG in main program to be
// debug function prefixes
#ifdef HMAC_DEBUG
	#define __HMAC_DEBUG__ __debug
#else
	#define __HMAC_DEBUG__ __nodebug
#endif

// Profiling, produces timing data for HMAC_hash_init function
// (uses printf)
#ifndef HMAC_PROFILE
#define HMAC_PROFILE 0
#endif

// Profiling for P_HASH
#ifndef PHASH_PROFILE
#define PHASH_PROFILE 0
#endif

// Basic types for HMAC
typedef unsigned char HMAC_byte_t;

// HMAC context for HMAC function

typedef enum {
	HMAC_USE_MD5,
 	HMAC_USE_SHA,
   HMAC_USE_SHA256
} HMAC_hash_t;

typedef struct {
	unsigned int hash_size; // Hash output size
	void (*init)();         // Hash init function   (state)
	void (*append)();       // Hash append function (state, data, data size)
	void (*finish)();       // Hash finish function (state, output)
   union {
		md5_state_t md5_ctx;	// MD5 state structure
		sha_state sha_ctx;  	// SHA-1 state structure
      sha256_context sha256_ctx; // SHA-256 state structure
   } i_state;              // State for inner HMAC hash
   union {
		md5_state_t md5_ctx;	// MD5 state structure
		sha_state sha_ctx;  	// SHA-1 state structure
      sha256_context sha256_ctx; // SHA-256 state structure
   } o_state;              // State for outer HMAC hash
	HMAC_hash_t hash_type;  // Type of hash being used
} HMAC_ctx_t;


// HMAC constants
#define HMAC_OPAD 	 		   0x5C 	// HMAC outer pad
#define HMAC_OPADx4 	 		   0x5C5C5C5CuL
#define HMAC_IPAD 	 		   0x36 	// HMAC inner pad
#define HMAC_IPADx4 	 		   0x36363636uL
#define HMAC_MD5_HASH_SIZE    16 	// MD5 output is 16 bytes
#define HMAC_SHA_HASH_SIZE    20 	// SHA output is 20 bytes
#define HMAC_SHA256_HASH_SIZE 32 	// SHA-256 output is 32 bytes
#define HMAC_MAX_HASH_SIZE    32    // Maximum size of hash output
#define HMAC_KEY_SIZE 		   64 	// HMAC max key size (Do not change!!)

// P_HASH constants
#define P_HASH_MAX_ITERATIONS 5     // Maximum number of times P_HASH can be
                                    // iterated (default of 5 will allow P_HASH
                                    // to generate up to 160 bytes with SHA256)
                                    // (see SSL_KEY_BLOCK_SIZE).
/*** EndHeader */

/*** BeginHeader HMAC_init */
void HMAC_init(HMAC_ctx_t __far* ctx, HMAC_hash_t hash);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
HMAC_init                              <HMAC.LIB>

SYNTAX: void HMAC_init(HMAC_ctx_t* ctx, HMAC_hash_t hash);

DESCRIPTION: Initialize an HMAC context structure

PARAMETER 1: Pointer to context data structure
PARAMETER 2: Hash algorithm selector enum value

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__HMAC_DEBUG__
void HMAC_init(HMAC_ctx_t __far* ctx, HMAC_hash_t hash) {
	ctx->hash_type = hash;
 	switch(hash) {
    	default: // Default is MD5
      case HMAC_USE_MD5: ctx->hash_size = HMAC_MD5_HASH_SIZE;
								 ctx->init = md5_init;
                     	 ctx->append = md5_append;
								 ctx->finish = md5_finish;
      						 break;
	 	case HMAC_USE_SHA: ctx->hash_size = HMAC_SHA_HASH_SIZE;
								 ctx->init = sha_init;
                     	 ctx->append = sha_add;
								 ctx->finish = sha_finish;
      					    break;
	 	case HMAC_USE_SHA256:
								 ctx->hash_size = HMAC_SHA256_HASH_SIZE;
								 ctx->init = sha256_init;
                     	 ctx->append = sha256_add;
								 ctx->finish = sha256_finish;
      					    break;
   }
}

/*** BeginHeader HMAC_hash_init */
void HMAC_hash_init(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* key, int k_len,
                    HMAC_byte_t __far* msg, int m_len);
/*** EndHeader */

 /* START _FUNCTION DESCRIPTION ********************************************
HMAC_hash_init                         <HMAC.LIB>

 SYNTAX: void HMAC_hash_init(HMAC_ctx_t* ctx, HMAC_byte_t* key, int k_len,
                             HMAC_byte_t* msg, int m_len);

 DESCRIPTION: HMAC secure hash construction. Before calling, the HMAC_ctx_t
              structure must be initialized by a call to HMAC_init.
              This function takes a HMAC context, and begins a new HMAC
              hash with the key and message parameters. A call to
              HMAC_hash_finish finishes the hash. HMAC_hash_append
              optionally appends new data to the hash.
 				  Follows RFC 2104 sample code

 PARAMETER 1: Pointer to HMAC context structure
 PARAMETER 2: The HMAC key
 PARAMETER 3: The key length (bytes)
 PARAMETER 4: The message to hash
 PARAMETER 5: The message length (bytes)

 RETURN VALUE: None

 END DESCRIPTION **********************************************************/

// HMAC, code modified from RFC 2104 sample code
__HMAC_DEBUG__
void HMAC_hash_init(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* key, int k_len,
                    HMAC_byte_t __far* msg, int m_len)
{
	auto HMAC_byte_t key_pad[HMAC_KEY_SIZE+1]; // Temporary array for XORed key
   auto int i;
   auto HMAC_byte_t fixed_key[HMAC_MAX_HASH_SIZE];
#if HMAC_PROFILE
	auto unsigned long t0, t1;
   t0 = MS_TIMER;
#endif

	// Clear all previous digest state
   _f_memset(&ctx->i_state, 0, sizeof(ctx->i_state));
   _f_memset(&ctx->o_state, 0, sizeof(ctx->o_state));

   // if key is longer than 64 bytes then reset it to key=MD5(key)
   if (k_len > HMAC_KEY_SIZE) {

    	memset(fixed_key, 0, HMAC_MAX_HASH_SIZE);
      ctx->init(&ctx->i_state);
		ctx->append(&ctx->i_state, (void __far *)key, (size_t)k_len);
		ctx->finish(&ctx->i_state, (void __far *)fixed_key);

      key = fixed_key;
      k_len = ctx->hash_size;
   }

   // Pad the key with 0's
   memset(key_pad + k_len, 0, HMAC_KEY_SIZE - k_len);
   _f_memcpy(key_pad, key, k_len);

   // XOR key with IPAD and
   xor_n_const(key_pad, HMAC_IPADx4, HMAC_KEY_SIZE);

   // Internal hash (Round 1)
	ctx->init(&ctx->i_state);
	ctx->append(&ctx->i_state, (void __far *)key_pad, (size_t)HMAC_KEY_SIZE); // Hash the Key
	ctx->append(&ctx->i_state, (void __far *)msg, (size_t)m_len); 	  			  // Append the message

   // Digest now contains the inner hash

   // Pad the key with 0's
	memset(key_pad + k_len, 0, HMAC_KEY_SIZE - k_len);
   _f_memcpy(key_pad, key, k_len);

   // XOR key with OPAD
   xor_n_const(key_pad, HMAC_OPADx4, HMAC_KEY_SIZE);

   // Outer hash (Round 2)
	ctx->init(&ctx->o_state);
	ctx->append(&ctx->o_state, (void __far *)key_pad, (size_t)HMAC_KEY_SIZE); // Hash the Key

#if HMAC_PROFILE
   t1 = MS_TIMER;
   printf("HMAC_hash_init time: %dms\n", t1-t0);
#endif
}

/*** BeginHeader HMAC_hash_append */
void HMAC_hash_append(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* msg, int m_len);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
HMAC_hash_append                       <HMAC.LIB>

SYNTAX: void HMAC_hash_append(HMAC_ctx_t* ctx, HMAC_byte_t* msg, int m_len);

DESCRIPTION: Append a message to a previously initialized HMAC hash.

PARAMETER 1: An initialized HMAC hash context structure
PARAMETER 2: The message to append
PARAMETER 3: The length of the message

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__HMAC_DEBUG__
void HMAC_hash_append(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* msg, int m_len) {
	ctx->append(&ctx->i_state, (void __far *)msg, (size_t)m_len);  // Append the message
}

/*** BeginHeader HMAC_hash_finish */
void HMAC_hash_finish(HMAC_ctx_t __far*, HMAC_byte_t __far*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
HMAC_hash_finish                       <HMAC.LIB>

SYNTAX: void HMAC_hash_finish(HMAC_ctx_t* ctx, HMAC_byte_t* digest);

DESCRIPTION: Finish an HMAC hash.

PARAMETER 1: An initialized HMAC hash context structure
PARAMETER 2: The output digest, assumes the length of digest is at least
             ctx->hash_size.

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__HMAC_DEBUG__
void HMAC_hash_finish(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* digest) {
	ctx->finish(&ctx->i_state, (void __far *)digest); 					  // Finish the inner hash
	ctx->append(&ctx->o_state, (void __far *)digest, (size_t)ctx->hash_size);  // Append to outer hash
   ctx->finish(&ctx->o_state, (void __far *)digest);              	  // Done
}

/*** BeginHeader P_HASH */
void P_HASH(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* secret, int sec_len,
            HMAC_byte_t __far* seed, int seed_len, HMAC_byte_t __far* output,
            int out_len);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
P_HASH                                 <HMAC.LIB>

SYNTAX:void P_HASH(HMAC_ctx_t* ctx, HMAC_byte_t* secret, int sec_len,
                   HMAC_byte_t* seed, int seed_len, HMAC_byte_t* output,
                   int out_len);

DESCRIPTION: Arbitrary-length expansion function for HMAC for use
             in the PRF (Pseudo-Random Function) used in TLS/SSL.
             The first parameter (HMAC_ctx_t*) must be initialized
             by a call to HMAC_init before calling this function.
             Follows RFC 2246.
             NOTE: Since Dynamic C does not have dynamic memory allocation
                   we determine the size of A statically, as the number of
                   bytes in the hash result times a maximum number of
                   iterations. The default value of 5 for the macro
                   P_HASH_MAX_ITERATIONS allows P_HASH to generate up to
                   160 bytes, which should be sufficient for AES256_CBC.

PARAMETER 1: HMAC hash context
PARAMETER 2: Input "secret", the key for the hash
PARAMETER 3: Secret length (in bytes)
PARAMETER 4: Seed value
PARAMETER 5: seed length (bytes)
PARAMETER 6: output data
PARAMETER 7: output data length, this should be a multiple of HMAC_MD5_HASH_SIZE

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__HMAC_DEBUG__
void P_HASH(HMAC_ctx_t __far* ctx, HMAC_byte_t __far* secret, int sec_len,
            HMAC_byte_t __far* seed, int seed_len, HMAC_byte_t __far* output,
            int out_len)
{
	auto HMAC_byte_t A[HMAC_MAX_HASH_SIZE];
   auto int block_size;
   auto int i, count;
#if PHASH_PROFILE
	auto unsigned long t0, t1;
   t0 = MS_TIMER;
#endif

   // Initialize A[1] = HMAC(secret, seed)
   memset(A, 0, sizeof(A));
   HMAC_hash_init(ctx, secret, sec_len, seed, seed_len);
   HMAC_hash_finish(ctx, A);

   // The size of the blocks returned from HMAC_hash
   block_size = ctx->hash_size;

   for(i = out_len, count = 0;
       i > 0  && count < P_HASH_MAX_ITERATIONS;
       i -= block_size, count++)
   {
   	// Hash A and append seed value
      HMAC_hash_init(ctx, secret, sec_len, A, block_size);
      HMAC_hash_append(ctx, seed, seed_len);

      // Hash this iteration
   	if(i > block_size) {
      	// Finish the ith hash
			HMAC_hash_finish(ctx, output + count*block_size);

         // Calculate A[i] = HMAC(secret, A[i-1])
  	      HMAC_hash_init(ctx, secret, sec_len, A, block_size);
         HMAC_hash_finish(ctx, A);
      }
      else {
         // We are done with A at this point, so we can
         // use it as a temporary buffer to get the last
         // partial block of data from the output hash
			HMAC_hash_finish(ctx, A);

         // Copy the last partial block into the output
         _f_memcpy(output + count*block_size, A, i);
      }
   }

#if PHASH_PROFILE
   t1 = MS_TIMER;
   printf("P_HASH time: %dms\n", t1-t0);
#endif

}


/*** BeginHeader */
#endif
/*** EndHeader */

