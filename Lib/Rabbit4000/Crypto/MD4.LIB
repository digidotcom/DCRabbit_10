/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*

  Based on MD5.LIB.  This should only be used when required by an historical
  protocol such as MSCHAPv2.  It is not considered cryptographically secure.

  MD5.LIB is included first, since we re-use the data structures therein.

*/

/*** BeginHeader */
#ifndef __MD4_LIB
#define __MD4_LIB

#ifndef __MD5_LIB
	#use "md5.lib"
#endif


/*** EndHeader */

/*** BeginHeader md4_round1, md4_round2, md4_round3 */

  // These are not C-callable functions!

  /* Each "round" function (actually, 1/4 round) does 4 operations on cyclic permutation
     of (pw, px, py, pz).  On entry, pw, px, py and pz contain 4 x 32-bit values; a,b,c,d.
     IY points to current "random" table entry.  (SP+52+5) is offset of zeroth element in
     input data.  On return, IY is incremented to next table entry.
     Other registers are used for temporary results: JKHL is current long operand (accumulator).
  */

__xmem void md4_round1(void);
__xmem void md4_round2(void);
__xmem void md4_round3(void);






// MD4_*: x, y, z parameters are p[w,x,y,z] registers, containing longword work values.
// Result returned in JKHL.

#if _RAB6K
#define MD4_F MD5_F
#define MD4_H MD5_H

	// G(x, y, z) = x & y | x & z | y & z
#define MD4_G(y,z,x) \
	   ld    bcde,x $ \
	   ld		jkhl,y $ \
	   and   jkhl,bcde $ \
	   ld    px',jkhl $ \
	   ld		jkhl,z $ \
	   and   jkhl,bcde $ \
	   ld    py',jkhl $ \
	   ld    bcde,y $ \
	   ld    jkhl,z $ \
	   and   jkhl,bcde $ \
	   alts ld    bcde,px $ \
	   or		jkhl,bcde $ \
	   alts ld		bcde,py $ \
	   or    jkhl,bcde

#else
#define MD4_F(x,y,z) MD5_F(x,y,z)
#define MD4_H(x,y,z) MD5_H(x,y,z)

	// G(x, y, z) = x & y | x & z | y & z
#define MD4_G(y,z,x) \
	   ld    bcde,x $ \
	   ld		jkhl,y $ \
	   and   jkhl,bcde $ \
	   ld    px',jkhl $ \
	   ld		jkhl,z $ \
	   and   jkhl,bcde $ \
	   ld    py',jkhl $ \
	   ld    bcde,y $ \
	   ld    jkhl,z $ \
	   and   jkhl,bcde $ \
	   exp $ \
	   ld    bcde,px $ \
	   or		jkhl,bcde $ \
	   ld		bcde,py $ \
	   exp $ \
	   or    jkhl,bcde

#endif

/*** EndHeader */


	/* Round 1. */
	/* Let [abcd k s i] denote the operation
	   a = ((a + F(b,c,d) + X[k] + T[i]) <<< s).
      where F(x, y, z) = x & y | ~x & z
      Rotations are (left) 3, 7, 11, 19
      Indices are 0, 1, 2, 3  */

#asm __xmem
md4_round1::
#if _RAB6K
	MD4_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pz)
	MD5_CYC

	MD4_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+4)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR				; RL 7
	MD5_ST(pz)
	MD5_CYC

	MD4_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+8)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL4
	MD5_ROR				; RL 11
	MD5_ST(pz)
	MD5_CYC

	MD4_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 0)
	MD5_ROL16
	MD5_ROL
	MD5_ROL2				; RL 19
	MD5_ST(pz)
	MD5_CYC
#else
	MD4_F(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pw)

	MD4_F(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+4)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR				; RL 7
	MD5_ST(pz)

	MD4_F(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+8)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL4
	MD5_ROR				; RL 11
	MD5_ST(py)

	MD4_F(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 0)
	MD5_ROL16
	MD5_ROL
	MD5_ROL2				; RL 19
	MD5_ST(px)
#endif
	lret
#endasm

	/* Round 2. */
	/* Let [abcd k s i] denote the operation
	   a = ((a + G(b,c,d) + X[k] + T[i]) <<< s).
	   where G(x, y, z) = x & y | x & z | y & z
      Rotations are (left) 3, 5, 9, 13
      Indices are 0, 4, 8, 12  */

#asm __xmem
md4_round2::
#if _RAB6K
	MD4_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pz)
	MD5_CYC

	MD4_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+16)
	MD5_ADD(iy, 0)
	MD5_ROL4
	MD5_ROL				; RL 5
	MD5_ST(pz)
	MD5_CYC

	MD4_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+32)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ST(pz)
	MD5_CYC

	MD4_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+48)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL4
	MD5_ROL				; RL 13
	MD5_ST(pz)
	MD5_CYC
#else
	MD4_G(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pw)

	MD4_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+16)
	MD5_ADD(iy, 0)
	MD5_ROL4
	MD5_ROL				; RL 5
	MD5_ST(pz)

	MD4_G(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+32)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ST(py)

	MD4_G(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+48)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL4
	MD5_ROL				; RL 13
	MD5_ST(px)
#endif
	lret
#endasm

	/* Round 3. */
	/* Let [abcd k s t] denote the operation
	   a = ((a + H(b,c,d) + X[k] + T[i]) <<< s).
	   where H(x,y,z) = x ^ y ^ z
      Rotations are (left) 3, 9, 11, 15
      Indices are 0, 8, 4, 12  */

#asm __xmem
md4_round3::
#if _RAB6K
	MD4_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pz)
	MD5_CYC

	MD4_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+32)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ST(pz)
	MD5_CYC

	MD4_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+16)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL2
	MD5_ROL				; RL 11
	MD5_ST(pz)
	MD5_CYC

	MD4_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+48)
	MD5_ADD(iy, 0)
	MD5_ROL16
	MD5_ROR				; RL 15
	MD5_ST(pz)
	MD5_CYC
#else
	MD4_H(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL2
	MD5_ROL				; RL 3
	MD5_ST(pw)

	MD4_H(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+32)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ST(pz)

	MD4_H(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+16)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROL2
	MD5_ROL				; RL 11
	MD5_ST(py)

	MD4_H(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+48)
	MD5_ADD(iy, 0)
	MD5_ROL16
	MD5_ROR				; RL 15
	MD5_ST(px)
#endif
	lret
#endasm


/*** BeginHeader md4_process */

__xmem void md4_process(md5_state_t __far*pms, byte const __far*data  /* [64] */ );

/*** EndHeader */


static const md5_long md4_ttab[3] =
{ 0x00000000, 0x5A827999, 0x6ED9EBA1
};

__nodebug __xmem void md4_process(md5_state_t __far*pms, byte const __far*data)
{
	auto md5_long X[31];

	_f_memcpy(X, data, 64);
	_f_memcpy(X+16, data, 60);	// Duplicate part of input data to avoid modulo operations
	#if _RAB6K
	setEXPCanonical();
	#endif

#asm
   push	ix
   ld		pz,(sp+@sp+2+pms)
#if _RAB6K
	; Basically same code as for R4k, except use pz,pw,px,py instead of pw,px,py,pz
	; so that registers are lined up correctly for special instructions.
   ld		pw,(pz+12)			; Get b,c,d,a values
   ld		px,(pz+16)
   ld		py,(pz+20)
   ld		pz,(pz+8)
#else
   ld		pw,(pz+8)			; Get a,b,c,d values
   ld		px,(pz+12)
   ld		py,(pz+16)
   ld		pz,(pz+20)
#endif
	; Do round 1
	ld		iy,md4_ttab			; IY points to additive constants (inc by 4 for each round)

	; Dirty trick: The called function accesses the values in the X array (input data) by offsetting
	; from SP.  The caller (this fn) adjusts SP so that the callee accesses the desired first element
	; of X using offset (5+52) = MD5_SO.  The 5 counts the lcall return address and pushed IX.  The 52 makes sure
	; we never have to set SP higher than it currently is, to avoid trashing X!

	add	sp,-MD5_S				; X[0]
	lcall	md4_round1
	add	sp,16						; X[4]
	lcall	md4_round1
	add	sp,16						; X[8]
	lcall	md4_round1
	add	sp,16						; X[16]
	lcall	md4_round1

	ld		de,4
	add	iy,de

	; Do round 2
	add	sp,-48					; X[0]
	lcall	md4_round2
	add	sp,4						; X[1]
	lcall	md4_round2
	add	sp,4						; X[2]
	lcall	md4_round2
	add	sp,4						; X[3]
	lcall	md4_round2

	ld		de,4
	add	iy,de

	add	sp,-12					; X[0]
	lcall	md4_round3
	add	sp,8						; X[2]
	lcall	md4_round3
	add	sp,-4						; X[1]
	lcall	md4_round3
	add	sp,8						; X[3]
	lcall	md4_round3

	add	sp,MD5_S-12			; Set back to normal stack frame

#if _RAB6K
   // Finally, add in current work values (pz,w,x,y) to [a,b,c,d]
   ld		bcde,pz
   ld		pz,(sp+@sp+pms+2)
   ld		jkhl,(pz+8)
   add	jkhl,bcde
   ld		(pz+8),jkhl
   ld		jkhl,(pz+12)
   ld		bcde,pw
   add	jkhl,bcde
   ld		(pz+12),jkhl
   ld		jkhl,(pz+16)
   ld		bcde,px
   add	jkhl,bcde
   ld		(pz+16),jkhl
   ld		jkhl,(pz+20)
   ld		bcde,py
   add	jkhl,bcde
   ld		(pz+20),jkhl
#else
   // Finally, add in current work values (pw,x,y,z) to [a,b,c,d]
   ld		bcde,pw
   ld		pw,(sp+@sp+pms+2)
   ld		jkhl,(pw+8)
   add	jkhl,bcde
   ld		(pw+8),jkhl
   ld		jkhl,(pw+12)
   ld		bcde,px
   add	jkhl,bcde
   ld		(pw+12),jkhl
   ld		jkhl,(pw+16)
   ld		bcde,py
   add	jkhl,bcde
   ld		(pw+16),jkhl
   ld		jkhl,(pw+20)
   ld		bcde,pz
   add	jkhl,bcde
   ld		(pw+20),jkhl
#endif

	pop	ix
#endasm

}

/*** BeginHeader md4_init */
#define md4_init md5_init
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
md4_init	                    <MD4.LIB>

SYNTAX: 			void md4_init(md5_state_t *pms);

DESCRIPTION:   Initilize the MD4 hash process. Initial values are
               generated, and this structure will identify a particular
               transaction in all subsequent calls to the md4 library.

               The typical sequence of calls for hashing a large amount
               of data are:

                 auto md5_state_t  mstate;
                 auto byte          result[16];

                 md4_init(&mstate);
                 while (<more data>)
                   md4_append(&mstate, data, data_length);
                 md4_finish(&mstate, result);

PARAMETER1:		A md5_state_t structure, that is user provided.
               The md5 structure is used for both MD4 and MD5.

SEE ALSO:		md4_append, md4_finish

END DESCRIPTION **********************************************************/


/*** BeginHeader md4_append */
void md4_append(md5_state_t __far*pms, const char __far *data, word nbytes);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
md4_append	                    <MD4.LIB>

SYNTAX: void md4_append(md5_state_t *pms, char far*data, word nbytes);

DESCRIPTION:   This function will take a buffer and compute the MD4
					hash of it, combined with the hash of all previous data
					passed to it. This function can be called several times,
					to generate the hash of a large amount of data.

PARAMETER1:		The md4 id structure, as passed to md4_init.
               The md5 structure is used for both MD4 and MD5.
PARAMETER2:		The buffer to add to the hash.
PARAMETER3:		Number of bytes in the buffer to add to the hash (0-
               32768 inclusive).  Lengths greater than 32768 are
               invalid, and the results are undefined.

SEE ALSO:		md4_init, md4_finish

END DESCRIPTION **********************************************************/

__nodebug void md4_append(md5_state_t __far*pms, const char __far *data, word nbytes)
{
	auto byte const __far*p;
	auto word left;
	auto word offset;
	auto md5_long nbits;
	auto word copy;

	p = data;
	left = nbytes;
	offset = (word)(pms->count[0] >> 3) & 63;
	nbits = (md5_long)nbytes << 3;

	if (!nbytes || nbytes > 32768)
		return;

	/* Update the message length. */
	pms->count[0] += nbits;
	if (pms->count[0] < nbits)
		pms->count[1]++;

	/* Process an initial partial block. */
	if (offset) {
		copy = (offset + nbytes > 64 ? 64 - offset : nbytes);

		_f_memcpy(pms->buf + offset, p, copy);
		if (offset + copy < 64)
			return;
		p += copy;
		left -= copy;
		md4_process(pms, pms->buf);
	}

	/* Process full blocks. */
	for (; left >= 64; p += 64, left -= 64)
		md4_process(pms, p);

	/* Process a final partial block. */
	if (left)
		_f_memcpy(pms->buf, p, left);
}

/*** BeginHeader md4_finish */
void md4_finish(md5_state_t __far*pms, char __far *digest);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
md4_finish	                    <MD4.LIB>

SYNTAX: 			void md4_finish(md5_state_t *pms, char far *digest)

DESCRIPTION:   After md4_append has been called one or more times, this
					finish function can be called to return the computed
					MD4 hash of the data.

PARAMETER1:		The md4 id structure, as passed to md4_init.
               The md5 structure is used for both MD4 and MD5.
PARAMETER2:		The buffer to store the resulting MD4 hash into.  Must
					be exactly 16 bytes length.

SEE ALSO:		md4_init, md4_append, md4_sofar

END DESCRIPTION **********************************************************/

__nodebug void md4_finish(md5_state_t __far*pms, char __far *digest)
{
	static const __far byte pad[64] = {
		0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	};
	auto byte data[8];
	auto int i;

	/* Save the length before padding. */
	_f_memcpy(data, pms->count, 8);
	/* Pad to 56 bytes mod 64. */
	md4_append(pms, pad, (word)((55 - (pms->count[0] >> 3)) & 63) + 1);
	/* Append the length. */
	md4_append(pms, data, 8);
	_f_memcpy(digest, pms->abcd, 16);
}

/*** BeginHeader md4_sofar */
void md4_sofar(md5_state_t __far*pms, char __far *digest);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
md4_sofar	                    <MD4.LIB>

SYNTAX: 			void md4_sofar(md5_state_t *pms, char far *digest)

DESCRIPTION:   Similar to md4_finish, except that the digest "so far" is
               obtained without altering the state.  This is used in
               some protocols such as TLS.  It allows several digests
               to be obtained from the same data stream at various points,
               which is more efficient than running several digests of
               the same data stream in parallel.

PARAMETER1:		The md4 id structure, as passed to md4_init.
               The md5 structure is used for both MD4 and MD5.
PARAMETER2:		The buffer to store the resulting MD4 hash into.  Must
					be exactly 16 bytes length.

SEE ALSO:		md4_init, md4_append, md4_finish

END DESCRIPTION **********************************************************/

__nodebug void md4_sofar(md5_state_t __far*pms, char __far *digest)
{
	md5_state_t temp;
	_f_memcpy(&temp, pms, sizeof(temp));
	md4_finish(&temp, digest);
}

/*** BeginHeader hmac_md4 */

void
hmac_md4(
	unsigned char __far*	text,		/* pointer to data stream */
	unsigned int	text_len,	/* length of data stream */
	unsigned char __far*	key,		/* pointer to authentication key */
	unsigned int	key_len,	/* length of authentication key */
	unsigned char __far	digest[16]);		/* caller digest to be filled in */

/*** EndHeader */

/*
** Function: hmac_md4
** modified version from RFC 2104
*/

void
hmac_md4(
	unsigned char __far*	text,		/* pointer to data stream */
	unsigned int	text_len,	/* length of data stream */
	unsigned char __far*	key,		/* pointer to authentication key */
	unsigned int	key_len,	/* length of authentication key */
	unsigned char __far	digest[16])		/* caller digest to be filled in */
{
	md5_state_t context;
	unsigned char k_ipad[64];    /* inner padding - key XORd with ipad */
	unsigned char k_opad[64];    /* outer padding - key XORd with opad */
	unsigned char tk[16];
	int i;

	/* if key is longer than 64 bytes reset it to key=MD4(key) */
	if (key_len > 64) {
		md4_init(&context);
		md4_append(&context, key, key_len);
		md4_finish(&context, tk);

		key = tk;
		key_len = 16;
	}

	/*
	 * the HMAC_MD4 transform looks like:
	 *
	 * MD4(K XOR opad, MD4(K XOR ipad, text))
	 *
	 * where K is an n byte key
	 * ipad is the byte 0x36 repeated 64 times
	 * opad is the byte 0x5c repeated 64 times
	 * and text is the data being protected
	 */

	/* XOR key with ipad and opad values */
	for (i=0; i<64; i++) {
		if (i < key_len) {
	      k_ipad[i] = key[i] ^ 0x36;
	      k_opad[i] = key[i] ^ 0x5c;
		} else {
			k_ipad[i] = 0x36;
			k_opad[i] = 0x5c;
		}
	}
	/*
	 * perform inner MD4
	 */
	md4_init(&context);                   /* init context for 1st pass */
	md4_append(&context, k_ipad, 64);     /* start with inner pad */
	md4_append(&context, text, text_len); /* then text of datagram */
	md4_finish(&context, digest);         /* finish up 1st pass */
	/*
	 * perform outer MD4
	 */
	md4_init(&context);                   /* init context for 2nd pass */
	md4_append(&context, k_opad, 64);     /* start with outer pad */
	md4_append(&context, digest, 16);     /* then results of 1st hash */
	md4_finish(&context, digest);         /* finish up 2nd pass */
}




/*** BeginHeader md4_vector */
void md4_vector(size_t num_elem, const char __far * __far * addr,
					const size_t __far *len, char __far *mac);
/*** EndHeader */
__nodebug
void md4_vector(size_t num_elem, const char __far * __far * addr,
					const size_t __far *len, char __far *mac)
{
	auto word i;
	auto md5_state_t pms;

	md4_init(&pms);
	for (i = 0; i < num_elem; ++i)
		md4_append(&pms, addr[i], len[i]);
	md4_finish(&pms, mac);
}

/*** BeginHeader */
#endif
/*** EndHeader */

