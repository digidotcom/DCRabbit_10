/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/* START LIBRARY DESCRIPTION ********************************************

	Firmware Info

	This library contains functions for working with the firmware_info_t
	structure embedded into the BIOS of all programs compiled with Dynamic C
	version 10.54 and later.

	Use fiProgramInfo() to get a copy of the structure, and fiDump() to dump it
	to STDOUT.  If you just want to know how large your program is,
	fiProgramSize() returns the number of bytes in the firmware imaage.

	Optional Macros
	---------------
	FIRMWARE_INFO_VERBOSE	If defined, library will print status messages to
									STDOUT.

	FIRMWARE_INFO_DEBUG		If defined, functions will be debuggable (e.g., you
									can set breakpoints and single-step into them).

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __FIRMWARE_INFO_LIB
#define __FIRMWARE_INFO_LIB

#ifdef FIRMWARE_INFO_DEBUG
	#define _fi_debug __debug
#else
	#define _fi_debug __nodebug
#endif

/* START FUNCTION DESCRIPTION ********************************************
firmware_info_t														<firmware_info.lib>

	Structure embedded in the first 1024 bytes of each program.  Use
	fiProgramInfo() to get a copy of the structure from the current,
	running firmware.

typedef struct {
	unsigned long	magic;				| always set to _FIRMINFO_MAGIC_NUMBER
	char				struct_ver;			| version of this structure
	word				board_type;			| set to _BOARD_TYPE_ at compile time
	unsigned long	length;				| bytes of uncompressed firmware, w/CRC-32
	word				version;				| user-settable version, (0x0C21 = 12.21)
	word				compiler_ver;		| set to CC_VER at compile time
	word				flags;				| bitmask of settings related to build
         _FIRMINFO_FLAG_SEP_INST_DATA     | Separate I&D enabled
         _FIRMINFO_FLAG_RST28             | RST28 compiled in
         _FIRMINFO_FLAG_RAM_COMPILE       | Compile-to-RAM mode
         _FIRMINFO_FLAG_CAN_BE_SECONDARY  | Can run as secondary firmware
         _FIRMINFO_FLAG_WRAPPED_BIN       | Secondary firmware installed by RFU
	unsigned long	build_timestamp;	| build-time as seconds since Jan 1, 1980
	unsigned long	mb_type;				| set to _DC_MB_TYPE_ at compile time
	char				compiler_rev;     | set to 0 if no revision, otherwise a
												| printable character (e.g., 'B' for 10.72B)
	char				reserved[10];		| reserved for future use, set to 0x00
	char				user_defined[8];	| space reserved for user-defined variables
	char				program_name[20];	| null-terminated, user-defined program name

	unsigned long	header_crc32;		| CRC-32 of this structure
} firmware_info_t;

	program_name is set by the project macro _FIRMWARE_NAME_
	version is set by the project macro _FIRMWARE_VERSION_
	build_timestamp is set by the project macro _FIRMWARE_TIMESTAMP_

	_FIRMINFO_FLAG_CAN_BE_SECONDARY is set for an image that can be loaded from
	a non-zero offset on the serial boot flash.  Related to powerfail-safe
	updates.

	_FIRMINFO_FLAG_WRAPPED_BIN is set for a special firmware image created
	by RFU that allows for powerfail-safe updates on serial boot flash.
	This image has a bootloader, firmware markers and embedded firmware inside.

SEE ALSO:		fiValidate, fiDump, fiProgramInfo, fiProgramSize, buGetInfo

END DESCRIPTION **********************************************************/

// flag values used in firmware_info_t

#define _FIRMINFO_FLAG_SEP_INST_DATA   	0x0001   // Separate I&D enabled
#define _FIRMINFO_FLAG_RST28           	0x0002   // RST28 compiled in
#define _FIRMINFO_FLAG_RAM_COMPILE     	0x0004   // Compile-to-RAM mode

// image can load from non-zero flash address (secondary location on SBF)
#define _FIRMINFO_FLAG_CAN_BE_SECONDARY	0x4000

// wrapped binary image (A-image embedded in Z-image, see board_update.lib)
#define _FIRMINFO_FLAG_WRAPPED_BIN			0x8000

typedef struct firmware_info {
	unsigned long	magic;				// used to confirm struct present in image
		#define _FIRMINFO_MAGIC_NUMBER	0x21445542		// BUD! (LSB stored first)
	char				struct_ver;			// version of this structure
	word				board_type;			// set to _BOARD_TYPE_ at compile time
	long				length;				// bytes of uncompressed firmware, w/CRC-32
	word				version;				// user-settable version, (0x0C21 = 12.21)
	word				compiler_ver;		// set to CC_VER at compile time
	word				flags;				// bitmask of settings related to build
	unsigned long	build_timestamp;	// build-time as seconds since Jan 1, 1980
	unsigned long	mb_type;				// set to _DC_MB_TYPE_ at compile time
	char				compiler_rev;		// manually set in StdBios.c
	char				reserved[10];		// reserved for future use, set to 0x00
	char				user_defined[8];	// space reserved for user-defined variables
	char				program_name[20];	// null-terminated, user-defined string

	unsigned long	header_crc32;		// CRC-32 of this structure
} firmware_info_t;
#if sizeof(firmware_info_t) != 68
	#fatal "firmware_info_t must be 68 bytes (64 bytes + 4-byte CRC-32)"
#endif

// old macro for backward compatability -- should use _firmware_info directly
#define _fi_running	(&_firmware_info)

// NOTE: _FIRMINFO_FLAG_xxx macros are defined in StdBios.c.  Changes to this
//			structure will require updates to the assembly used to embed it in
//			the BIOS (in StdBios.c, starting at _fi_running_start).

/*** EndHeader */

/*** BeginHeader fiValidate */
int fiValidate (const __far firmware_info_t *fi);
/*** EndHeader */

#use "crc32.lib"			// uses crc32 routines from crc32.lib

/* START FUNCTION DESCRIPTION ********************************************
fiValidate                  									<firmware_info.lib>

SYNTAX: int fiValidate (const far firmware_info_t *fi)

DESCRIPTION:	Validate information stored in firmware_info_t structure.

PARAMETER 1:	Pointer to firmware info retrieved with buGetInfo or
					fiProgramInfo.

RETURN VALUE:	 0: Information is valid.
					-EINVAL: <fi> is NULL.
					-EILSEQ: Not a valid firmware_info_t struct (bad marker bytes
								or unsupported version of structure).
					-EBADMSG: Bad CRC (structure has been corrupted).

SEE ALSO:		firmware_info_t, fiDump, fiProgramInfo, buGetInfo

END DESCRIPTION **********************************************************/
_fi_debug
int fiValidate (const __far firmware_info_t *fi)
{
	auto unsigned long check_crc32;

	if (!fi)
	{
		return -EINVAL;
	}

	if (fi->magic != _FIRMINFO_MAGIC_NUMBER)
	{
		#ifdef FIRMWARE_INFO_VERBOSE
	      printf( "%s: Invalid magic number (0x%08lx should be 0x%08lx)\n",
				"fiValidate", fi->magic, _FIRMINFO_MAGIC_NUMBER);
		#endif
		return -EILSEQ;
	}
	if (fi->struct_ver != 1)
	{
		#ifdef FIRMWARE_INFO_VERBOSE
	      printf( "%s: Invalid structure version (%d should be 1)\n",
	         "fiValidate", fi->struct_ver);
		#endif
		return -EILSEQ;
	}

   check_crc32 = crc32_calc( (__far uint8 *) fi, 64, 0);
   if (check_crc32 != fi->header_crc32)
   {
		#ifdef FIRMWARE_INFO_VERBOSE
	      printf( "%s: bad CRC-32 (0x%08lx should be 0x%08lx)\n",
	         "fiValidate", fi->header_crc32, check_crc32);
		#endif
		return -EBADMSG;
   }

   return 0;
}

/*** BeginHeader fiDump */
int fiDump (const __far firmware_info_t *fi);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
fiDump 		                 								<firmware_info.lib>

SYNTAX: int fiDump (const far firmware_info_t *fi)

DESCRIPTION:	Dump information stored in firmware_info_t structure, in
					human-readable form, to stdout.

PARAMETER 1:	Pointer to firmware info retrieved with buGetInfo or
					fiProgramInfo.

RETURN VALUE:	Error codes shared with fiValidate:
					 0: Information is valid.
					-EINVAL: <fi> is NULL.
					-EILSEQ: Not a valid firmware_info_t struct (bad marker bytes
								or unsupported version of structure).
					-EBADMSG: Bad CRC (structure has been corrupted).

SEE ALSO:		firmware_info_t, fiValidate, fiProgramInfo, buGetInfo

END DESCRIPTION **********************************************************/
#include <time.h>				// for strftime()
_fi_debug
int fiDump (const __far firmware_info_t *fi)
{
	auto struct tm	time;
	auto int error;
	auto char buffer[60];

	if (!fi)
	{
		return -EINVAL;
	}

	#define _BUDUMPINFO(flag,prompt,en,dis) \
		printf( "\t" prompt ": %s\n", \
		fi->flags & _FIRMINFO_FLAG_ ## flag ? en : dis)

	error = fiValidate( fi);
	if (error)
	{
		printf( "%s: ERROR! invalid firmware_info_t\n", "fiDump");
	}

   printf( "program name: [%0.20ls]\n", fi->program_name);
   printf( "bytes in firmware: %ld bytes\n", fi->length);
   printf( "board type: 0x%04x\n", fi->board_type);
   printf( "MB type: 0x%08x\n", fi->mb_type);
   printf( "firmware version: %u.%02x\n", fi->version >> 8,
      fi->version & 0x00FF);
   printf( "compiler version: %u.%02x%c\n", fi->compiler_ver >> 8,
      fi->compiler_ver & 0x00FF,
      fi->compiler_rev ? fi->compiler_rev : ' ');
   printf( "compiler flags:\n");
   _BUDUMPINFO(SEP_INST_DATA, "separate I&D spaces", "enabled", "disabled");
   _BUDUMPINFO(RST28, "include debug instructions (RST28)", "yes", "no");
   _BUDUMPINFO(RAM_COMPILE, "compile to", "RAM", "FLASH");
   _BUDUMPINFO(CAN_BE_SECONDARY, "can load from secondary", "yes", "no");
   _BUDUMPINFO(WRAPPED_BIN, ".bin is", "wrapped", "normal");

   // convert timestamp to text and dump
	mktm (&time, fi->build_timestamp);
	strftime( buffer, sizeof buffer, "%c", &time);
   printf( "timestamp: %s (%lu)\n", buffer, fi->build_timestamp);

   printf( "header crc32: 0x%08lx\n", fi->header_crc32);

	return error;
}

/*** BeginHeader _fiCopyInfo */
int _fiCopyInfo (__far firmware_info_t *dst, const __far firmware_info_t *src);
/*** EndHeader */
// Common code from fiProgramInfo and buGetInfo.  Check parameters, zero
// out destination buffer on error, or copy src to dest if src is valid.
_fi_debug
int _fiCopyInfo (__far firmware_info_t *dst, const __far firmware_info_t *src)
{
	auto int error;

	if (!dst)
	{
		return -EINVAL;
	}

	if (!src)
	{
		error = -ENODATA;
	}
	else
	{
		error = fiValidate( src);
	}

	if (error)
	{
		// zero out the caller's buffer
		_f_memset (dst, 0, sizeof(*dst));
	}
	else
	{
		// copy firmware info to caller's buffer
		_f_memcpy (dst, src, sizeof(*dst));
	}

	return error;
}

/*** BeginHeader fiProgramInfo */
int fiProgramInfo (__far firmware_info_t *fi);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
fiProgramInfo 		                 							<firmware_info.lib>

SYNTAX: int fiProgramInfo (far firmware_info_t *fi)

DESCRIPTION:	Get a copy of the firmware info from the currently-executing
					program.

PARAMETER 1:	Buffer to receive copy of firmware info.

RETURN VALUE:	Error codes shared with fiValidate:
					 0: Information is valid.
					-EINVAL: <fi> is NULL.
					-EILSEQ: Not a valid firmware_info_t struct (bad marker bytes
								or unsupported version of structure).
					-EBADMSG: Bad CRC (structure has been corrupted).

SEE ALSO:		firmware_info_t, fiValidate, fiDump, buGetInfo

END DESCRIPTION **********************************************************/
_fi_debug
int fiProgramInfo (__far firmware_info_t *fi)
{
	return _fiCopyInfo( fi, &_firmware_info);
}

/*** BeginHeader fiProgramSize */
unsigned long fiProgramSize();
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
fiProgramSize 		                 							<firmware_info.lib>

SYNTAX: unsigned long fiProgramSize()

DESCRIPTION:	Get the size of the currently executing program.

RETURN VALUE:	Number of bytes in the firmware .BIN of the currently executing
					program.

SEE ALSO:		firmware_info_t, fiValidate, fiDump, buGetInfo

END DESCRIPTION **********************************************************/
_fi_debug
unsigned long fiProgramSize()
{
	return _firmware_info.length;
}

/*** BeginHeader */
#endif		// guard macro
/*** EndHeader */