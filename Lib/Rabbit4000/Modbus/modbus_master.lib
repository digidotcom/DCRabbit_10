/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/* Modbus_Master.Lib
	Modbus bundled with Dynamic C.

Modifications:
JLC	Apr 2009 1.04	MBM_WriteCoils: fix incorrect parameter length for
								byte count in PDU
                     added function: MBM_WriteRegs (by Phaheerathan Thankarajah)
JLC	Jun 2006	1.03	fix incorrect macro references in MBM_WriteCoils
JLC 	Nov 2006	1.02	documentation, minor mods for serial interface
								modified calculations to use &mbADU[0]
								added _MODBUS_VERS

JLC	Jun 2006			added MODBUS_CRC

This library supports the following MODBUS commands:

0x01 Read Coils
	int MBM_ReadCoils ( int MB_address, int* Result, unsigned Starting_Coil,
	   	int Nbr_of-Coils );

0x03 Read Holding Registers
	int MBM_ReadRegs ( int MB_address, int* Result, unsigned Starting_Reg,
   		int Nbr_of_Regs );

0x04 Read Input Registers
	int MBM_ReadInRegs ( int MB_address, int* Result, unsigned Starting_Reg,
   		int Nbr_of_Regs );

0x05 Write Single Coil
	int MBM_WriteCoil ( int MB_address, unsigned CoilNbr, int CoilState );

0x06 Write Single Register
	int MBM_WriteReg ( int MB_address, unsigned RegNbr, int RegData );

0x0F Write multiple Coils
	int MBM_WriteCoils ( int MB_address, unsigned StartCoilNbr, int NbrCoils,
	   	int CoilStates );

0x10 Write multiple Registers
	int MBM_WriteRegs (int MB_address, unsigned StartRegNbr, int Nbr_of_Regs,
   		int *RegsData);

It is independant of the communications method in use.  It is equally
compatible with TCP and serial interfaces.  Its primary function is to
develop the MODBUS APU.  It requires the following functions from the
appropriate interface library/program:
	MBM_Send_ADU ( *ADUaddress, ADUlength )
   	This function must send the ADU to the defined slave device and return
      an appropriate success/failure status value.  It must also insert
      the response ADU from the slave into the same ADU buffer.
*/



/*** BeginHeader */

#ifndef __MBMASTER
#define __MBMASTER

#define 	MB_SUCCESS		0
#define	MB_BADFUNC		0x01		//	Illegal Function
#define	MB_BADADDR		0x02		//	Illegal Data Address
#define	MB_BADDATA		0x03		//	Illegal Data Value
#define	MB_SLAVEFAILURE 0x04		// Slave Device Failure
#define	MB_BUSY			0x06		//	Target is busy with another request
#define	MB_NORESP		0x0B		//	No response from target
#define	MB_DEVNOTSET	0x10		// device not properly set up

#define	MBM_INVALID_PARAMETER -1
#define	MBM_PACKET_ERROR	-2
#define	MBM_BAD_ADDRESS	-3
#define	MBM_BAD_BYTECOUNT -4
#define	MB_CRC_ERROR		-5

// Rx message offsets
#define	ADU_OFF_ADDRESS	0
#define	ADU_OFF_FUNCTION	1
#define	ADU_OFF_EXCEPTION	2
#define	ADU_OFF_BYTECOUNT	2

#ifndef MODBUS_DEBUG
#define MODBUS_DEBUG __nodebug
#endif
/*** EndHeader */


/*** BeginHeader _initADU, _insertWord */

void _initADU ( int MB_address, int FunctionCode, int PDUbyteCount );
void _insertWord	( unsigned Value );
void _insertByte	( int Value );
int  _getADUword	( int Offset );

extern char mbADU[255];		// MODBUS packet
extern char *pmbADU;			//pointer to mbPacket

/*** EndHeader */

char mbADU[255];		// MODBUS packet
char *pmbADU;			//pointer to mbPacket

/* START FUNCTION DESCRIPTION ********************************************
_initADU											<Modbus_Master.LIB>

SYNTAX:			_initADU ( int MB_address, int FunctionCode, int PDUbyteCount )

DESCRIPTION:	Initialize the MODBUS ADU

PARAMETER1:		Modbus target address

PARAMETER2:		Modbus function

PARAMETER3:		nbr of data bytes in the PDU (ignored for serial master)

The format of a MODBUS Protocol Data Unit (PDU) is: Function Code, Data
The format of a MODBUS Application Data Unit (ADU) is: Address, PDU, CRC

RETURN VALUE:	none

NOTE: for a Modbus Serial Master #define the macro MODBUS_SERIAL_MASTER

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

MODBUS_DEBUG
void _initADU ( int MB_address, int FunctionCode, int PDUbyteCount )
{
	pmbADU = mbADU;							// init pointer
	#ifndef MODBUS_SERIAL_MASTER
	_initMBMpacket ( PDUbyteCount+1 );	// include Function code byte - TCP only!
	#endif
   *pmbADU++ = MB_address;					// insert target address
	*pmbADU++ = FunctionCode;				// and Function Code
	return;
}


// insert a word - MSByte first - into the transmit ADU
MODBUS_DEBUG
void _insertWord ( unsigned Value )
{
	*pmbADU++ = Value >> 8;					// insert high byte
	*pmbADU++ = Value;						// and low byte
   return;
}

// insert a byte into the transmit ADU
MODBUS_DEBUG
void _insertByte ( int Value )
{
	*pmbADU++ = Value;
   return;
}

// retrieve a word - MSByte first - from the received ADU
// Offset is the BYTE offset (0 relative) into the rcvd packet
MODBUS_DEBUG
int _getADUword ( int Offset )
{	auto ADUword;
	ADUword = mbADU[Offset]<<8;			// get MSByte
   ADUword |= mbADU[Offset+1];			// and LSByte
   return ADUword;
}

/* START FUNCTION DESCRIPTION ********************************************
MBM_ReadCoils 0x01

SYNTAX:			int MBM_ReadCoils ( int MB_address, int* Result,
						unsigned Starting_Coil, int Nbr_of-Coils );

DESCRIPTION:	Read the state of the specified coils.

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Address to put the result
					The state of the coils: 1 = on, 0 = off
					Each coil state will occupy one bit of the result with
					the first coil in bit 0, the next in bit 1, etc

PARAMETER3:    Starting coil number, 1 relative, to read

PARAMETER4:		Number of coils to read - max of 16

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_ReadCoils */
int MBM_ReadCoils ( int MB_address, int* Result, unsigned Starting_Coil,
	int Nbr_of_Coils );
/*** EndHeader */

MODBUS_DEBUG
int MBM_ReadCoils ( int MB_address, int* Result, unsigned Starting_Coil,
	int Nbr_of_Coils )
{
	auto int ADUStatus;
	auto int CoilStatus;

	if ( Nbr_of_Coils > 16  ||  Nbr_of_Coils < 0 )
	{
		return MBM_INVALID_PARAMETER;
	}

	_initADU( MB_address, 0x01, 4 );
   _insertWord ( Starting_Coil );
   _insertWord ( Nbr_of_Coils );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return ADUStatus;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

	if ( Nbr_of_Coils > 8 )
	{
		CoilStatus = _getADUword (3);
	}
   else
	{
		CoilStatus = (int)mbADU[3] & 0xFF;
	}

	*Result = CoilStatus;
	return MB_SUCCESS;
} // MBM_ReadCoils


/* START FUNCTION DESCRIPTION ********************************************
MBM_ReadRegs 0x03

SYNTAX:			int MBM_ReadRegs ( int MB_address, int* Result,
						unsigned Starting_Reg, int Nbr_of_Regs );

DESCRIPTION:	Read the specified registers.

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Starting address to put the results

PARAMETER3:    Starting register number, 1 relative, to read

PARAMETER4:		Number of registers to read

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_ReadRegs */
int MBM_ReadRegs ( int MB_address, int* Result, unsigned Starting_Reg,
	int Nbr_of_Regs );
/*** EndHeader */

MODBUS_DEBUG
int MBM_ReadRegs ( int MB_address, int* Result, unsigned Starting_Reg,
	int Nbr_of_Regs )
{
	auto int ADUStatus;
	auto int RegValue;
   auto int Count;

	if ( Nbr_of_Regs <= 0  ||  Nbr_of_Regs > 125 )
	{
		return MBM_INVALID_PARAMETER;
	}

	_initADU( MB_address, 0x03, 4 );
   _insertWord ( Starting_Reg );
   _insertWord ( Nbr_of_Regs );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return ADUStatus;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

   for ( Count=0; Count<Nbr_of_Regs; Count+=1 )
	{
   	*Result++ = _getADUword(3+(Count*2));
	}

	return MB_SUCCESS;
} // MBM_ReadRegs


/* START FUNCTION DESCRIPTION ********************************************
MBM_ReadInRegs 0x04

SYNTAX:			int MBM_ReadInRegs ( int MB_address, int* Result,
						unsigned Starting_Reg, int Nbr_of_Regs );

DESCRIPTION:	Read the specified input registers.

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Starting address to put the results

PARAMETER3:    Starting input register number, 1 relative, to read

PARAMETER4:		Number of registers to read

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_ReadInRegs */
int MBM_ReadInRegs ( int MB_address, int* Result, unsigned Starting_Reg,
	int Nbr_of_Regs );
/*** EndHeader */

MODBUS_DEBUG
int MBM_ReadInRegs ( int MB_address, int* Result, unsigned Starting_Reg,
	int Nbr_of_Regs )

{
	auto int ADUStatus;
	auto int RegValue;
   auto int Count;

	if ( Nbr_of_Regs <= 0  ||  Nbr_of_Regs > 125 )
	{
		return MBM_INVALID_PARAMETER;
	}

	_initADU( MB_address, 0x04, 4 );
   _insertWord ( Starting_Reg );
   _insertWord ( Nbr_of_Regs );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return ADUStatus;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

   for ( Count=0; Count<Nbr_of_Regs; Count+=1 )
   {
		*Result++ = _getADUword(3+(Count*2));
	}

	return MB_SUCCESS;
} // MBM_ReadInRegs


/* START FUNCTION DESCRIPTION ********************************************
MBM_WriteCoil 0x05

SYNTAX:        int MBM_WriteCoil ( int MB_address, unsigned CoilNbr,
						int CoilState );

DESCRIPTION:	write a value to a single coil

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Coil number

PARAMETER3:		Coil state

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_WriteCoil */
int MBM_WriteCoil ( int MB_address, unsigned CoilNbr, int CoilState );
/*** EndHeader */

MODBUS_DEBUG
int MBM_WriteCoil ( int MB_address, unsigned CoilNbr, int CoilState )
{
	auto int ADUStatus;

	if ( CoilState & 0xFFFE )
	{
		return MBM_INVALID_PARAMETER;
	}
	_initADU( MB_address, 0x05, 4 );
   _insertWord ( CoilNbr );
   if (CoilState)
	{
   	CoilState = 0xFF00;	// Modbus "coil on"
	}
   _insertWord ( CoilState );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return MBM_PACKET_ERROR;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

	return MB_SUCCESS;
} // MBM_WriteCoil


/* START FUNCTION DESCRIPTION ********************************************
MBM_WriteReg 0x06

SYNTAX:        int MBM_WriteReg ( int MB_address, unsigned RegNbr, int RegData );

DESCRIPTION:	write a value to a single register

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Register number

PARAMETER3:		Regester Data

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_WriteReg */
int MBM_WriteReg ( int MB_address, unsigned RegNbr, int RegData );
/*** EndHeader */

MODBUS_DEBUG
int MBM_WriteReg ( int MB_address, unsigned RegNbr, int RegData )
{
	auto int ADUStatus;

	_initADU( MB_address, 0x06, 4 );
   _insertWord ( RegNbr );
   _insertWord ( RegData );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return MBM_PACKET_ERROR;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

	return MB_SUCCESS;
} // MBM_WriteReg


/* START FUNCTION DESCRIPTION ********************************************
MBM_WriteCoils 0x0F

SYNTAX:        int MBM_WriteCoils ( int MB_address, unsigned StartCoilNbr,
						int NbrCoils, int CoilStates );

DESCRIPTION:	write a values to coils

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Starting Coil number

PARAMETER3:		Number of Coils

PARAMETER4:		Coil states - max of 16 with lowest coil nbr value in bit 0

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_WriteCoils */
int MBM_WriteCoils ( int MB_address, unsigned StartCoilNbr,
		int NbrCoils, int CoilStates );
/*** EndHeader */

MODBUS_DEBUG
int MBM_WriteCoils ( int MB_address, unsigned StartCoilNbr,
		int NbrCoils, int CoilStates )
{
	auto int ADUStatus;

	_initADU( MB_address, 0x0F, 7 );
   _insertWord ( StartCoilNbr );
   _insertWord ( NbrCoils );
	_insertByte ( 2 );						// byte count for up to 16 coils
   _insertWord ( CoilStates );

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - &mbADU[0] );

   if ( ADUStatus != MB_SUCCESS )
	{
		return MBM_PACKET_ERROR;
	}
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address )
	{
		return MBM_BAD_ADDRESS;
	}
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 )
	{
		return (int)mbADU[ADU_OFF_EXCEPTION];
	}

	return MB_SUCCESS;
} // MBM_WriteCoils



/* START FUNCTION DESCRIPTION ********************************************
MBM_WriteRegs 0x10

SYNTAX:        int MBM_WriteRegs (int MB_address, unsigned StartRegNbr,
						int Nbr_of_Regs, int *RegsData);

DESCRIPTION:	write a values to registers

PARAMETER1:		MODBUS addresss of the target device

PARAMETER2:		Starting Register number

PARAMETER3:		Number of Registers - maximum of 123

PARAMETER4:		Address of values for registers - 1 word per register

RETURN VALUE:	MB_SUCCESS
					MBM_INVALID_PARAMETER
               MBM_PACKET_ERROR
               MBM_BAD_ADDRESS

Note: This function is not re-entrant.
END DESCRIPTION **********************************************************/

/*** BeginHeader MBM_WriteRegs */
int MBM_WriteRegs (int MB_address, unsigned StartRegNbr, int Nbr_of_Regs,
		int *RegsData);
/*** EndHeader */

MODBUS_DEBUG
int MBM_WriteRegs (int MB_address, unsigned StartRegNbr, int Nbr_of_Regs,
		int *RegsData)
{
   auto int ADUStatus;
   auto int i;

   if (Nbr_of_Regs > 123) return MBM_INVALID_PARAMETER;

   _initADU( MB_address, 0x10, 5 + (Nbr_of_Regs*2) );
   _insertWord ( StartRegNbr );
   _insertWord ( Nbr_of_Regs );
   _insertByte ( Nbr_of_Regs * 2 );

	for (i = 0; i < Nbr_of_Regs; i++)
	{
		_insertWord ( *RegsData++ );
	}

   ADUStatus = MBM_Send_ADU ( mbADU, pmbADU - mbADU );

   if ( ADUStatus != MB_SUCCESS ) return MBM_PACKET_ERROR;
   if ( mbADU[ADU_OFF_ADDRESS] != MB_address ) return MBM_BAD_ADDRESS;
   if ( mbADU[ADU_OFF_FUNCTION] & 0x80 ) return (int)mbADU[ADU_OFF_EXCEPTION];

	return MB_SUCCESS;
}


/*** BeginHeader _initMBMpacket */
void _initMBMpacket(int bytecount);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
_initMBMpacket                <Modbus_Master.LIB>

SYNTAX:
   _initMBMpacket(int bytecount);

DESCRIPTION:
   Library function stub which exits with -ENOSYS, "Function not
   implemented." The User must provide in TCP-only application code a
   custom initMBMpacket() function to initialize the MODBUS PDU.

   The format of a MODBUS Protocol Data Unit (PDU) is:
      Function Code, Data.

   The format of a MODBUS Application Data Unit (ADU) is:
      Address, PDU, CRC.

PARAMETER1:
   Number of bytes in the PDU, i.e. function code byte plus data bytes.

RETURN VALUE:
   None.

NOTE: For a Modbus Serial Master #define the macro MODBUS_SERIAL_MASTER.

Note: This function is not re-entrant.
END DESCRIPTION *********************************************************/

MODBUS_DEBUG
void _initMBMpacket(int bytecount)
{
	// This library function stub exits with "Function not implemented."
	exit(-ENOSYS);
}


/*** BeginHeader */
#endif // __MBMASTER
/*** EndHeader */

