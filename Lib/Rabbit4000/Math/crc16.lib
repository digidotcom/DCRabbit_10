/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/* START LIBRARY DESCRIPTION ********************************************

	This library contains a function for calculating 16-bit CRCs using 0x1021
	as the polynomial.  The crc16_calc() function is non-reflected (used for
	XMODEM and SD Cards).  The crc16_reflected_calc() function is used for
	PPP.

	Define the macro CRC16_USE_TABLE in the project macros to use 512-byte
	tables for both the normal and reflected CRC functions.  The tables provide
	a 20% speed improvement at the cost of less space for code/constant data.

	This library has not been updated to take advantage of the Rabbit 6000's
	hardware CRC-16 routines.  We need to implement a semaphore on that resource,
	to prevent an interrupt from corrupting an in-progress CRC calculation.

	Macros:

	CRC16_DEBUG - If defined, functions will be debuggable (e.g., you can set
				breakpoints and single-step into them).

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifdef CRC16_DEBUG
	#define _crc16_debug __debug
#else
	#define _crc16_debug __nodebug
#endif
/*** EndHeader */

/*** BeginHeader crc16_table */
extern const __far uint16 crc16_table[256];
/*** EndHeader */
// Calculated with standard 0x1021 polynomial; table for XMODEM and
// "False CCITT" CRC.
const __far uint16 crc16_table[256] =
{
	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
	0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
	0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
	0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
	0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
	0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
	0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
	0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
	0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
	0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
	0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
	0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
	0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
	0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
	0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
	0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
	0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
	0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
	0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
	0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
	0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
	0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
	0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
	0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
	0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
	0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
	0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
	0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
	0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
	0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
	0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
	0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

/*** BeginHeader crc16_reflected_table */
extern const __far uint16 crc16_reflected_table[256];
/*** EndHeader */
// lookup table copied from RFC 1662
const __far uint16 crc16_reflected_table[256] =
{
	0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
	0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
	0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
	0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
	0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
	0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
	0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
	0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
	0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
	0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
	0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
	0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
	0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
	0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
	0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
	0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
	0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
	0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
	0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
	0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
	0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
	0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
	0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
	0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
	0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
	0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
	0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
	0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
	0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

/*** BeginHeader crc16_calc */
uint16 crc16_calc( const void __far *data, uint16 length, uint16 current);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
crc16_calc                                                     <crc16.lib>

SYNTAX: uint16 crc16_calc( const void far *data, uint16 length, uint16 current)

DESCRIPTION:	Calculate CRC-16 of a data buffer using polynomial (0x1021)
					without reflection.  See crc16_reflected_calc for a CRC-16
					using the 0x1021 polynomial and reflection (used for Kermit,
					PPP and "TRUE CCITT".

					If CRC16_USE_TABLE is defined, a 512-byte CRC table is stored as
					a constant array to speed CRC calculations.

PARAMETER 1:	Pointer to data to CRC.

PARAMETER 2:	Number of bytes to CRC.

PARAMETER 3:	When calculating a CRC-16 over a stream or a large range of
					bytes, it is necessary to call crc16_calc multiple times.

					Use an initial value of 0x0000 to generate an "XMODEM" CRC.
					Use an initial value of 0xFFFF to generate a "FALSE CCITT" CRC.

RETURN VALUE:	CRC-16, without reflection, for <length> bytes of <data>, using
					<current> as the starting CRC and 0x1021 as a polynomial.

REFERENCE:		See http://regregex.bbcmicro.net/crc-catalogue.htm#appendix.a
					for details on various 16-bit CRC algorithms.

END DESCRIPTION **********************************************************/
/*
	// C implementation of table lookup (for reference and/or testing):

	unsigned char far *bytes = data;

	while (length--)
	{
		current = (current << 8) ^ crc16_table[(current >> 8) ^ *bytes++];
	}
	return current;
*/
_crc16_debug __root
uint16 crc16_calc( const void __far *data, uint16 length, uint16 current)
{
	#asm __nodebug
#ifdef CRC16_USE_TABLE
		; px already points to data
		ld		hl, (sp+@SP+length)
		ld		bc, hl
		test	hl									; set Z flag
		ld		hl, (sp+@SP+current)
		jr		z, .done							; return <current> if length == 0
		ld		py, crc16_table
		ld		e, 0
	.loop:
		; current = (current << 8) ^ crc16_table[(current >> 8) ^ *bytes++];
		ld		d, l					; de = current << 8
		ld		a, (px)
		xor	h						; (current >> 8) ^ *bytes
		ld		px, px+1				; bytes++

		clr	hl
		ld		l, a
		rl		hl						; Carry flag is reset (clear) from xor, above
		ld		ix, (py+hl)
		ld		hl, ix				; hl = crc16_table[(current >> 8) & *bytes]
		xor	hl, de
		dwjnz	.loop
	.done:
		; return value is in HL
#else
		; px is already set to <data>
		ld		hl, (sp+@sp+length)
		test	hl
		ld		hl', (sp+@sp+current)
		jr		z, .done
		ld		bc, hl
	.tloop:
		ld		a, (px)
		ld		px, px + 1
		exx				; protect loop counter (BC) and swap in running CRC (HL')

		; crc16_ccitt_f
        XOR     H
        LD      B,A
        LD      C,L
        RRCA
        RRCA
        RRCA
        RRCA
        LD      L,A
        AND     0x0F
        LD      H,A
        XOR     B
        LD      B,A
        XOR     L
        AND     0xF0
        LD      L,A
        XOR     C
        ADD     HL,HL
        XOR     H
        LD      H,A
        LD      A,L
        XOR     B
        LD      L,A

		exx				; swap out running CRC (HL) and restore loop counter (BC')
		dwjnz	.tloop
	.done:
		exx				; swap HL' back to HL as return value
#endif
	#endasm
}


/*** BeginHeader crc16_reflected_calc */
uint16 crc16_reflected_calc( const void __far *data, uint16 length,
																					uint16 current);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
crc16_reflected_calc                                           <crc16.lib>

SYNTAX: uint16 crc16_reflected_calc( const void far *data, uint16 length,
																					uint16 current)

DESCRIPTION:	Calculate CRC-16 of a data buffer using polynomial (0x1021)
					with reflection.  See crc16_calc for a CRC-16 using the 0x1021
					polynomial without reflection (used for XMODEM and
					"FALSE CCITT").

					If CRC16_USE_TABLE is defined, a 512-byte CRC table is stored as
					a constant array to speed CRC calculations.

PARAMETER 1:	Pointer to data to CRC.

PARAMETER 2:	Number of bytes to CRC.

PARAMETER 3:	When calculating a CRC-16 over a stream or a large range of
					bytes, it is necessary to call crc16_calc multiple times.

					Use an initial value of 0x0000 to generate a Kermit, PPP or
					"TRUE CCITT" CRC-16.

					Use an initial value of 0xFFFF and xor the result with 0xFFFF
					to generate an X.25 CRC-16.

RETURN VALUE:	CRC-16, with reflection, for <length> bytes of <data>, using
					<current> as the starting CRC and 0x1021 as a polynomial.

REFERENCE:		See http://regregex.bbcmicro.net/crc-catalogue.htm#appendix.a
					for details on various 16-bit CRC algorithms.

END DESCRIPTION **********************************************************/
_crc16_debug __root
uint16 crc16_reflected_calc( const void __far *data, uint16 length,
																					uint16 current)
{
	#asm __nodebug
// PPP code will bring in crc16_reflected_table, might as well make use of it
// even if the user didn't define CRC16_USE_TABLE.
#if defined CRC16_USE_TABLE || (defined USE_PPP_SERIAL && USE_PPP_SERIAL)
		; px already points to data
		ld		hl, (sp+@SP+length)
		ld		bc, hl
		test	hl									; set Z flag
		ld		hl, (sp+@SP+current)
		jr		z, .done							; return <current> if length == 0
		ld		py, crc16_reflected_table
		ld		d, 0
	.loop:
		; (current >> 8) ^ crc16_reflected_table[(current & 0xFF) ^ *bytes++]

		ld		e, h					; de = current >> 8
		ld		a, (px)
		xor	l						; (current & 0xFF) ^ *bytes
		ld		px, px+1				; bytes++

		clr	hl
		ld		l, a
		rl		hl						; Carry flag is reset (clear) from xor, above
		ld		ix, (py+hl)
		ld		hl, ix				; hl = crc16_table[(current & 0xFF) & *bytes]
		xor	hl, de
		dwjnz	.loop
	.done:
		; return value is in HL
#else
		; px is already set to <data>
		ld		hl, (sp+@sp+length)
		test	hl
		ld		hl', (sp+@sp+current)
		jr		z, .done
		ld		bc, hl
	.tloop:
		ld		a, (px)
		ld		px, px + 1
		exx				; protect loop counter (BC) and swap in running CRC (HL')

		; kermit_f:
        XOR     L
        LD      L,A
        ADD     A,A
        ADD     A,A
        ADD     A,A
        ADD     A,A
        XOR     L
        LD      L,A
        RLCA
        RLCA
        RLCA
        LD      B,A
        AND     0x07
        XOR     L
        LD      L,A
        LD      A,B
        AND     0xF8
        XOR     H
        LD      H,A
        LD      A,B
        RLCA
        AND     0x0F
        XOR     H
        LD      H,L
        LD      L,A

		exx				; swap out running CRC (HL) and restore loop counter (BC')
		dwjnz	.tloop
	.done:
		exx				; swap HL' back to HL as return value
#endif
	#endasm
}

/*** BeginHeader getcrc */
__root
int getcrc(const char *Data, char count, int accum);
#define getcrc( data, count, accum)		crc16_calc( data, count, accum)
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
getcrc                                                         <CRC16.LIB>

NOTE: This function has been deprecated by crc16_calc() in CRC16.LIB.

SYNTAX:       int getcrc(char *dataarray, char count, int accum);

PARAMETER1:   Character array for which CRC is to be computed.

PARAMETER2:   Number of bytes to be checked in dataarray

PARAMETER3:   Base CRC for the data array

DESCRIPTION:  Computes CRC of a data array.  "dataarray" points to "count"
              number of bytes.  "accum" is the base CRC for the data array.
              "count" max is 255.

RETURN VALUE: CRC value.
END DESCRIPTION **********************************************************/
__nodebug __root
int (getcrc)(const char *Data, char count, int accum)
{
	return crc16_calc( Data, count, accum);
}

/*** BeginHeader getfarcrc */
__root word getfarcrc(const __far char *dataarray, int count, word accum);
#define getfarcrc( data, len, accum)		crc16_calc( data, len, accum)
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
getfarcrc                                                      <CRC16.LIB>

NOTE: This function has been deprecated by crc16_calc() in CRC16.LIB.

SYNTAX:       word getfarcrc(const far char *dataarray, int count, word accum);

PARAMETER1:   Far character array for which CRC is to be computed.

PARAMETER2:   Number of bytes to be checked in dataarray

PARAMETER3:   Base CRC for the data array

DESCRIPTION:  Computes CRC of a data array.  "dataarray" points to "count"
              number of bytes.  "accum" is the base CRC for the data array.
              "count" max is 65535.

              This is the 16-bit CCITT CRC (with polynomial 0x1021).

RETURN VALUE: CRC value.
END DESCRIPTION **********************************************************/
__nodebug __root
word (getfarcrc)(const __far char *dataarray, int count, word accum)
{
	return crc16_calc( dataarray, count, accum);
}


/*** BeginHeader MODBUS_CRC */
unsigned MODBUS_CRC(const unsigned char *pcMess, unsigned wLen);
/*** EndHeader */
const unsigned char MODBUS_CRC_MSB[] ={
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40,	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,
	0x00,0xC1,0x81,0x40,	0x01,0xC0,0x80,0x41,	0x01,0xC0,0x80,0x41,	0x00,0xC1,0x81,0x40
};

const unsigned char MODBUS_CRC_LSB[] ={
   0x00,0xC0,0xC1,0x01,	0xC3,0x03,0x02,0xC2,	0xC6,0x06,0x07,0xC7,	0x05,0xC5,0xC4,0x04,
   0xCC,0x0C,0x0D,0xCD,	0x0F,0xCF,0xCE,0x0E,	0x0A,0xCA,0xCB,0x0B,	0xC9,0x09,0x08,0xC8,
   0xD8,0x18,0x19,0xD9,	0x1B,0xDB,0xDA,0x1A,	0x1E,0xDE,0xDF,0x1F,	0xDD,0x1D,0x1C,0xDC,
   0x14,0xD4,0xD5,0x15,	0xD7,0x17,0x16,0xD6,	0xD2,0x12,0x13,0xD3,	0x11,0xD1,0xD0,0x10,
   0xF0,0x30,0x31,0xF1,	0x33,0xF3,0xF2,0x32,	0x36,0xF6,0xF7,0x37,	0xF5,0x35,0x34,0xF4,
	0x3C,0xFC,0xFD,0x3D,	0xFF,0x3F,0x3E,0xFE,	0xFA,0x3A,0x3B,0xFB,	0x39,0xF9,0xF8,0x38,
	0x28,0xE8,0xE9,0x29,	0xEB,0x2B,0x2A,0xEA,	0xEE,0x2E,0x2F,0xEF,	0x2D,0xED,0xEC,0x2C,
	0xE4,0x24,0x25,0xE5,	0x27,0xE7,0xE6,0x26,	0x22,0xE2,0xE3,0x23,	0xE1,0x21,0x20,0xE0,
	0xA0,0x60,0x61,0xA1,	0x63,0xA3,0xA2,0x62,	0x66,0xA6,0xA7,0x67,	0xA5,0x65,0x64,0xA4,
	0x6C,0xAC,0xAD,0x6D,	0xAF,0x6F,0x6E,0xAE,	0xAA,0x6A,0x6B,0xAB,	0x69,0xA9,0xA8,0x68,
	0x78,0xB8,0xB9,0x79,	0xBB,0x7B,0x7A,0xBA,	0xBE,0x7E,0x7F,0xBF,	0x7D,0xBD,0xBC,0x7C,
	0xB4,0x74,0x75,0xB5,	0x77,0xB7,0xB6,0x76,	0x72,0xB2,0xB3,0x73,	0xB1,0x71,0x70,0xB0,
	0x50,0x90,0x91,0x51,	0x93,0x53,0x52,0x92,	0x96,0x56,0x57,0x97,	0x55,0x95,0x94,0x54,
	0x9C,0x5C,0x5D,0x9D,	0x5F,0x9F,0x9E,0x5E,	0x5A,0x9A,0x9B,0x5B,	0x99,0x59,0x58,0x98,
	0x88,0x48,0x49,0x89,	0x4B,0x8B,0x8A,0x4A,	0x4E,0x8E,0x8F,0x4F,	0x8D,0x4D,0x4C,0x8C,
	0x44,0x84,0x85,0x45,	0x87,0x47,0x46,0x86,	0x82,0x42,0x43,0x83,	0x41,0x81,0x80,0x40
};

/* START FUNCTION DESCRIPTION ********************************************
MODBUS_CRC		                                                <CRC16.LIB>

SYNTAX:        unsigned MODBUS_CRC(unsigned char *pcMess, unsigned wLen)

DESCRIPTION:	16-bit CRC calculation for Modbus protocol (0x8005 polynomial,
               initialized with 0xFFFF).

PARAMETER1:		address of data for CRC calculation

PARAMETER2:		number of bytes in data

RETURN VALUE:	CRC value.  Note that for legacy reasons this API returns
               the CRC in reversed byte order.

Note: to use this alternate CRC function for Modbus Slave, you must insert
#define USE_MODBUS_CRC
before the #use directives for the Modbus libraries.

END DESCRIPTION **********************************************************/
_crc16_debug
unsigned MODBUS_CRC(const unsigned char *pcMess, unsigned wLen)
{
	auto unsigned char cHi,cLo;			//	CRC Accumulators (MSB & LSB)
	auto unsigned w;							//	CRC Shift In Index

	cHi = cLo = 0xFF;							//	Init CRC
	while (wLen--)
	{												//	For Each Byte
		w = cHi ^ *pcMess++;					//	Next Table Index
		cHi = cLo ^ MODBUS_CRC_MSB[w];	//	Next CRC
		cLo = MODBUS_CRC_LSB[w];
	}
	return ((unsigned) cHi << 8) | cLo;	//	merge the bytes and return
}


