/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *	rweb-xml.lib -- RabbitWeb XML-specific functionality
 *
 *    This library includes the library support for the RabbitWeb HTTP
 *    enhancements.
 */


/*****************************************************************************
******************************************************************************

Serialization/De-serialization: XML


These functions convert between #web variables and a string serialized format.
The string format is RCI (Remote Command Interface) which is an XML application.
RCI is used by Device Cloud, however it is a fairly basic XML app so the functions
herein could be used as a basis for some other custom XML.

In addition, there are some specialized routines to generate RCI descriptors
based on a selected subset of #web variables.  RCI descriptors is another
XML application which describes the available variables (rather than
actually reading or updating them).  It is thus a useful source of metadata
for the embedded application.  It is used by Device Cloud client applications in
particular.


******************************************************************************
*****************************************************************************/

/*** BeginHeader  */
#ifndef _RWEB_XML_INCL
#define _RWEB_XML_INCL

#ifndef _RWEB_GENERIC_INCL
#use "rweb_generic.lib"
#endif
#ifndef _SAX2_INCL
#use "sax2.lib"
#endif

/*** EndHeader */


/*** BeginHeader _web_xml_chars */
void _web_xml_chars(xmlCtx __far * ctx, xmlSE __far * se,
   							char __far * ch, long len);
/*** EndHeader */

_web_debug
void _web_xml_chars(xmlCtx __far * ctx, xmlSE __far * se,
   							char __far * ch, long len)
{
	char name[_WEB_MAX_FQNLEN];
	WebParseX_t __far * wpx = (WebParseX_t __far *)ctx->userData;
	int insn;

	if (wpx->wif->parser_callback && !wpx->skip)
		insn = wpx->wif->parser_callback(wpx, WPJ_STRING, ch, len);
	else
		insn = WPI_CONTINUE;
}

/*** BeginHeader _web_xml_end */
void _web_xml_end(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */

_web_debug
void _web_xml_end(xmlCtx __far * ctx, xmlSE __far * se)
{
	WebParseX_t __far * wpx = (WebParseX_t __far *)ctx->userData;

	if (wpx->wif->parser_callback)
		wpx->wif->parser_callback(wpx,
				wpx->chld[wpx->level+1] ? WPJ_END_OBJECT : WPJ_END_LEAF,
				se->element, se->index-1);

	--wpx->level;

	if (wpx->cursor) {
		if (wpx->level >= wpx->start_level) {
			if (wpx->skip)
				wpx->skip = 0;
			else {
	         if (web_dimension(wpx->cursor))
	            web_cursor_up(wpx->cursor);
	         web_cursor_up(wpx->cursor);
	      }
		}
	}
}

/*** BeginHeader _web_xml_start */
void _web_xml_start(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */

_web_debug
int _web_lookup_index(WebCursor_t __far * wc, xmlSE __far * se)
{
	int alist[MAX_ATTRS];
	const char __far * __far * attr;
	int rc;
	int aidx;
	int midx;
	int x;

	for (aidx = 0, midx = 0, attr = se->attrArray; *attr; attr += 2, aidx += 2) {
		if (!memcmp(attr, "index", 5)) continue;
		// Try to locate field name
		rc = web_cursor_down(wc, *attr, 0);
		if (rc < 0)
			continue;
		if (web_type(wc) == TSTRING) {
	      // Has this attribute as a field name, and it's a string.
	      alist[midx++] = aidx;
		}
		web_cursor_up(wc);
	}
	if (!midx)
		return -EAGAIN;	// No matching attrs found
	// Else scan all objects at this (array) level and stop on first one which
	// matches all attribute values.  Sinced we insist on only allowing string
	// types in this sort of selection procedure, it's easy to do the comparison.
	// For now, always use case insensitive compare (strcmpi).
	for (rc = web_cursor_find(wc, NULL, 0); rc >= 0; rc = web_cursor_next(wc)) {
		for (x = 0; x < midx; ++x) {
			aidx = alist[x];
			web_cursor_down(wc, se->attrArray[aidx], 0);
			rc = strcmpi((char __far *)web_loc(wc), se->attrArray[aidx+1]);
			web_cursor_up(wc);
			if (rc)
				break;	// not matching
		}
		if (x == midx)
			// All matched
			return web_index(wc);
	}
	return rc;
}

_web_debug
void _web_xml_start(xmlCtx __far * ctx, xmlSE __far * se)
{
	WebParseX_t __far * wpx = (WebParseX_t __far *)ctx->userData;
	int insn, rc;

   if (!wpx->chld[wpx->level+1] && wpx->wif->parser_callback)
      // First child of this level, it's an "object"
      wpx->wif->parser_callback(wpx, WPJ_START_OBJECT, se[-1].element, se[-1].index-1);

	++wpx->level;
   ++wpx->chld[wpx->level];

   if (wpx->level < _WEB_MAX_X_NEST) {
      wpx->idx[wpx->level] = (int)(se->index-1);
      wpx->key[wpx->level] = se->element;
      wpx->arry[wpx->level] = 0;	// Don't know if it's an array
      wpx->chld[wpx->level+1] = 0;

		if (wpx->cursor) {
	      if (wpx->level == wpx->start_level)
	         web_cursor_start(wpx->cursor);
	      else if (wpx->level > wpx->start_level) {
				rc = web_cursor_down(wpx->cursor, se->element, 0);
				if (rc < 0) {
	            if (wpx->wif->parser_callback)
	               wpx->wif->parser_callback(wpx, WPJ_BAD_KEY, se->element, se->index-1);
	            wpx->skip = 1;
					return;	// Skip this and inner elements
				}
				if (web_next_dimension(wpx->cursor)) {
					// Array level.  There may be attributes which match lower level
					// field names.  If so, compute the corresponding index.

					rc = web_cursor_down(wpx->cursor, NULL, (int)(se->index-1));
	            if (rc < 0) {
	               web_cursor_up(wpx->cursor);
	            	if (wpx->wif->parser_callback)
	               	wpx->wif->parser_callback(wpx, WPJ_BAD_KEY_IDX, se->element, se->index-1);
	            	wpx->skip = 1;
	               return;
					}
					else {
						// Successful "down".  If this is an object level (i.e. has
						// fields), scan for matching attribute names in the XML element,
						// and (if found) locate the index which matches them.  Go
						// back up then down to the correct index.
						rc = _web_lookup_index(wpx->cursor, se);
						if (rc != -EAGAIN && rc < 0) {
                     web_cursor_up(wpx->cursor);
                     web_cursor_up(wpx->cursor);
                     if (wpx->wif->parser_callback)
                        wpx->wif->parser_callback(wpx, WPJ_BAD_KEY_MATCH,
                                                se->element, rc);
                     wpx->skip = 1;
                     return;
						}
					}
				}
				else {
					// Not an arrayed field
					if (se->index != 1) {
	               if (wpx->wif->parser_callback)
	                  wpx->wif->parser_callback(wpx, WPJ_BAD_KEY_IDX, se->element, se->index-1);
	               wpx->skip = 1;
	               return;  // Skip this and inner elements
					}
				}
	      }
      }
   }
   else
   	// Don't process elements too far nested
   	return;
	if (wpx->wif->parser_callback) {
		insn = wpx->wif->parser_callback(wpx, WPJ_KEY_IDX, se->element, se->index-1);
		if (insn != WPI_CONTINUE)
			// Skip inner elements
			return;
	}

	// Reload callbacks so we get to see inner structure
	se->startElement = _web_xml_start;
	se->endElement = _web_xml_end;
	se->characters = _web_xml_chars;

}

/*** BeginHeader web_parse_xml */
/*
	The XML parser currently assumes the following XML structure:

	<outer>
		<reqtype>
			<#web root var>...</>
			<#web root var>...</>
			...
		</reqtype>
	</outer>

	In other words, the root level #web variable names occur inside
	2 levels of "wrapper" elements.  "outer" is just boilerplate (like
	<rci_request>), and "reqtype" is intended to contain some information
	about the purpose of the XML document, such as whether it is a set,
	get or metadata query.

*/
long web_parse_xml(char __far * xml, long xml_len,
			WebTrans_t __far * wtp, WebIteratorFilter_t __far * wif,
			int start_level);
/*** EndHeader */

_web_debug
long web_parse_xml(char __far * xml, long xml_len,
			WebTrans_t __far * wtp, WebIteratorFilter_t __far * wif,
			int start_level)
{
	WebParseX_t wpx;
	WebCursor_t wc;
	xmlSE wrapper;
	long rc;

	memset(&wpx, 0, sizeof(wpx));
	wpx.wif = wif;

	// Transaction to be built.  May be NULL if only calling for execution
	// of parser event callback (wif->parser_callback).
	wpx.wtp = wtp;
	if (wtp) {
	   rc = web_transaction_start(wtp);
	   if (rc)
	      return rc;
	}

   // Init a cursor
	wpx.start_level = start_level;
	if (start_level >= 0)
	   wpx.cursor = &wc;
	else
		wpx.cursor = NULL;

	// Start at -1, since first element increases it to 0.
	wpx.level = -1;

	memset(&wrapper, 0, sizeof(wrapper));
	wrapper.startElement = _web_xml_start;
	wrapper.endElement = _web_xml_end;
	wrapper.characters = _web_xml_chars;
	rc = xmlSAXUserParseMemory(&wpx, xml, xml_len, &wrapper);
	if (!rc && wif->parser_callback && wpx.chld[0])
      wif->parser_callback(&wpx, WPJ_END_OBJECT, NULL, 0);

	if (rc < 0 && wtp)
		web_transaction_free(wtp);
	return rc;

}

/*** BeginHeader */
#endif
/*** EndHeader */

