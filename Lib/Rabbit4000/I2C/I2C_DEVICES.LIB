/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __I2C_DEVICES_LIB
#define __I2C_DEVICES_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
I2C_DEVICES.LIB

This library contains higher level functions for specific I2C devices

The library currently has routines for

serial EEPROM devices:
	I2CWrite
	I2CRead
	XL24C08_put
	XL24C08_get
	WriteEEPROM
	ReadEEPROM

I2C DAC chips(MAX517/518/519):
	I2CSetDAC


	 Acknowledgement:
				 	This library contains code written for Rabbit Semiconductor
				 	 	by
               KENT JOHANSEN
               ANAKRON / ANAKRON CANADA INC
               www.anakron.com
               kent@anakron.com


END DESCRIPTION *********************************************************/

/*** BeginHeader */
#use "I2C.LIB"
/*** EndHeader */

/*** BeginHeader I2CWrite */
int I2CWrite(uint8 slave, uint8 index, char *buf, uint8 len);
/*** EndHeader */


/* START FUNCTION DESCRIPTION *****************************************
I2CWrite                      <I2C_DEVICES.LIB>
SYNTAX:
   int I2CWrite(uint8 slave, uint8 index, char *buf, uint8 len);

DESCRIPTION:
   Uses the EEPROM scheme to write data to slave. Sends START, slave
   address, index, data, then STOP. Generic interface that may be used
   to communicate with another processor. Waits for slave to respond.
   EEPROM does not respond while internal write takes place.

PARAMETER1:
   I2C slave address.

PARAMETER2:
   I2C slave's write index (e.g. EEPROM write address).

PARAMETER3:
   Pointer to buffer containing data to be written.

PARAMETER4:
   Length of data to be written.

RETURN VALUE:
   0 or error code (see code).
END DESCRIPTION ******************************************************/

__nodebug
int I2CWrite(uint8 slave, uint8 index, char *buf, uint8 len)
{
#ifndef I2C_USE_RABBIT_HW
	// Not Rabbit 6000 or greater, use software library
	auto short int err;
	auto unsigned char cnt;

	if (err = i2c_startw_tx())
	{
		i2c_stop_tx();
		return -10 + err;	// Return too long stretching
	}
	if (err = i2c_wr_wait(slave))
	{
		i2c_stop_tx();
		return -20 + err;	// Return no ack on slave (retried)
	}
	if (err = i2c_write_char(index))
	{
		i2c_stop_tx();
		return -30 + err;	// Return no ack on index
	}
	for (cnt = 0; cnt < len; ++cnt)
	{
		if (err = i2c_write_char(buf[cnt]))
		{
			i2c_stop_tx();
			return -40 + err;	// Return no ack on data
		}
	}
	i2c_stop_tx();
	return 0;
#else
	// Use the Rabbit 6000 or greater I2C hardware.

	// Write data to the I2C slave device at the specified start index.
	return I2C_WriteToSlave((uint16) slave << 8 | index,	// slave's address
	                        buf,				// write data buffer pointer
	                        len,				// length of write data
	                        1,					// blocking mode
	                        I2C_WRITE_TIMEOUT(len));	// default for <len> data
#endif // ndef I2C_USE_RABBIT_HW
}

/*** BeginHeader I2CRead */
int I2CRead(uint8 slave, uint8 index, char *buf, uint8 len);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
I2CRead                       <I2C_DEVICES.LIB>
SYNTAX:
   int I2CRead(uint8 slave, uint8 index, char *buf, uint8 len);

DESCRIPTION:
   Uses the EEPROM scheme to read data from slave. Sends START, slave
   address, index START, slave address + 1, reads data (sending ACKs
   and NAK on last data), STOP. Generic interface that may be used to
   communicate with another processor. Waits for slave to respond.
   EEPROM does not respond while internal write takes place.

PARAMETER1:
   I2C slave address.

PARAMETER2:
   I2C slave's read index (e.g. EEPROM read address).

PARAMETER3:
   Pointer to buffer for data to be read.

PARAMETER4:
   Length of data to be read.

RETURN VALUE:
   0 or error code (see code).
END DESCRIPTION ******************************************************/

__nodebug
int I2CRead(uint8 slave, uint8 index, char *buf, uint8 len)
{
	auto short int err;
#ifndef I2C_USE_RABBIT_HW
	auto unsigned char cnt;

	// Not Rabbit 6000 or greater, use software library
	if (err = i2c_startw_tx())
	{
		i2c_stop_tx();
		return -10 + err;	// Return too long stretching
	}
	if (err = i2c_wr_wait(slave))
	{
		i2c_stop_tx();
		return -20 + err;	// Return no ack on slave
	}
	if (err = i2c_write_char(index))
	{
		i2c_stop_tx();
		return -30 + err;	// Return no ack on index
	}
	//i2c_Delay(10);
	if (err = i2c_startw_tx())
	{
		i2c_stop_tx();
		return -40 + err;	// Return too long stretch on read
	}
	if (err = i2c_wr_wait(slave + 1))
	{
		i2c_stop_tx();
		return -50 + err;	// Send read to slave - no ack (retried) return -5
	}
	for (cnt = 0; cnt < len - 1; ++cnt)
	{
		if (err = i2c_read_char(&buf[cnt]))
		{
			i2c_stop_tx();
			return -60 + err;
		}
		if (cnt == len - 1) {
			i2c_send_nak();
		}
		else
		{
			i2c_send_ack();
		}
	}
	i2c_stop_tx();
	return 0;
#else
	// Use the Rabbit 6000 or greater I2C hardware

	// Read data from the I2C slave device at the specified start index.
	return I2C_ReadFromSlave((uint16) slave << 8 | index,	// slave's address
	                         buf,				// read data buffer pointer
	                         len,				// length of read data
	                         1,				// blocking mode
	                         I2C_READ_TIMEOUT(len));	// default for <len> data
#endif // ndef I2C_USE_RABBIT_HW
}

/*** BeginHeader XL24C08_put */
void XL24C08_put(unsigned int index, char content);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
XL24C08_put                   <I2C_DEVICES.LIB>

SYNTAX:
   void XL24C08_put(unsigned int index, char content);

KEYWORDS:
   i2c

DESCRIPTION:
   Writes a char to a 24C08 EEPROM on the I2C bus.

PARAMETER1:
   device address (in MSB) + index in EEPROM to write to (in LSB)

PARAMETER2:
   char to write to EEPROM

RETURN VALUE:
   none
END DESCRIPTION ******************************************************/

__nodebug
void XL24C08_put(unsigned int index, char content)
{
	auto unsigned char res;

	//Send control word + page NUM
	res = (((unsigned char) (index >> 7)) & 0x0E) | 0xA0;
	I2CWrite(res, index & 0x00FF, &content, 1);
}

/*** BeginHeader XL24C08_get */
unsigned char XL24C08_get(unsigned int index);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
XL24C08_get                   <I2C_DEVICES.LIB>

SYNTAX:
   unsigned char XL24C08_get(unsigned int index);

KEYWORDS:
   i2c

DESCRIPTION:
   Reads a char from a 24C08 EEPROM on the I2C bus.

PARAMETER1:
   device address (in MSB) + index in EEPROM to read from (in LSB)

RETURN VALUE:
   value read from EEPROM
END DESCRIPTION ******************************************************/

__nodebug
unsigned char XL24C08_get(unsigned int index)
{
	auto unsigned char res;

	//Send control word + page NUM
	res = (((unsigned char) (index >> 7)) & 0x0E) | 0xA0;
	I2CRead(res, index & 0x00FF, &res, 1);
	return res;
}

/*** BeginHeader WriteEEPROM */
void WriteEEPROM(unsigned int index, unsigned char *data, unsigned int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
WriteEEPROM                   <I2C_DEVICES.LIB>

SYNTAX:
   void WriteEEPROM(unsigned int index, unsigned char *data,
                    unsigned int length);

KEYWORDS:
   i2c

DESCRIPTION:
   Writes data to a 24C08 on the I2C bus one byte at a time.

PARAMETER1:
   initial index in in EEPROM to write to

PARAMETER2:
   write data buffer pointer

PARAMETER3:
   length of data

RETURN VALUE:
   none
END DESCRIPTION ******************************************************/

__nodebug
void WriteEEPROM(unsigned int index, unsigned char *data, unsigned int length)
{
	auto unsigned i;

	for (i = 0; i < length; i++)
	{
		XL24C08_put(index, *data);
		index++;
		data++;
	}
}

/*** BeginHeader ReadEEPROM */
void ReadEEPROM(unsigned char *data, unsigned int index, unsigned int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
ReadEEPROM                    <I2C_DEVICES.LIB>

SYNTAX:
   void ReadEEPROM(unsigned char *data, unsigned int index,
                   unsigned int length);

KEYWORDS:
   i2c

DESCRIPTION:
   Reads data from a 24C08 on the I2C bus one byte at a time.

PARAMETER1:
   read data buffer pointer

PARAMETER2:
   initial index in EEPROM to read from

PARAMETER3:
   length of data

RETURN VALUE: none
END DESCRIPTION ******************************************************/

__nodebug
void ReadEEPROM(unsigned char *data, unsigned int index, unsigned int length)
{
	auto unsigned i;

	for (i = 0; i < length; i++)
	{
		*data = XL24C08_get(index);
		index++;
		data++;
	}
}

/*** BeginHeader I2CSetDAC */
int I2CSetDAC(char address, char channel, char setting);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *****************************************
I2CSetDAC                     <I2C_DEVICES.LIB>

SYNTAX:
   int I2CSetDAC(char address, char channel, char setting);

KEYWORDS:
   i2c

DESCRIPTION:
   Sends a set channel command to a Maxim MAX517/518/519 series ADC.

PARAMETER1:
   address - I2C address of slave device

PARAMETER2:
   channel - which DAC channel to set (0 or 1)

PARAMETER3:
   setting - new value for DAC channel

RETURN VALUE:
   0 or error code
END DESCRIPTION ******************************************************/

__nodebug
int I2CSetDAC(char address, char channel, char setting)
{
#ifndef I2C_USE_RABBIT_HW
	// Not Rabbit 6000 or greater, use software libary
	if(i2c_startw_tx())
	{
		return -1;
	}
	// 7-bit slave device address is left shifted by 1 bit
	if(i2c_write_char(address * 2))
	{
		return -1;
	}
	if(i2c_write_char(channel))
	{
		return -1;
	}
	if(i2c_write_char(setting))
	{
		return -1;
	}
	i2c_stop_tx();
	return 0;
#else
	// Rabbit 6000 or greater

	/*
	   The 7-bit slave device address is placed into the 7 MSbits of the first
	   parameter, the channel is placed into the LSB of the first parameter.
	*/
	return I2C_WriteToSlave((uint16) address << 9 | channel,	// slave's channel
	                        &setting,	// write data buffer pointer
                           1U,			// length of write data
                           1,				// blocking mode
                           I2C_WRITE_TIMEOUT(1));  // default for 1 data byte
#endif // ndef I2C_USE_RABBIT_HW
}

/*** BeginHeader */
#endif
/*** EndHeader */


