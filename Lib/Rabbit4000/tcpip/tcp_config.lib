/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
TCP_CONFIG.LIB

DESCRIPTION:
	This library handles compile-time configuration for the Rabbit TCP/IP
	stack.  See the function help for TCPCONFIG for information on using
	this library.

END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
TCPCONFIG										<TCP_CONFIG.LIB>

Description:
	Most of our networking samples can be run over Ethernet, Wi-Fi, or PPP.
	This set of instructions will explain how to configure the sample
	programs for your network setup.

	Compile-time configuration is performed by defining specific macros.
	These macros can either be defined within the sample program or within
	the Defines window.  You can find the Defines window by selecting
	the Options menu, then Project Options, then the Defines tab.  Using
	the Defines window is demonstrated later in these instructions.  If you
	define the macros within your program, note that they need to be
	defined before the #use "dcrtcp.lib" line.

Ethernet (and basic TCP/IP) Configuration
-----------------------------------------
	Ethernet uses some basic TCP/IP network configuration.  Wi-Fi uses
	these parameters as well, although Wi-Fi has some unique configuration
	that is covered in a later section of these instructions.

	*** EXAMPLES ***

	   Static Configuration
	   --------------------
	   See the examples below to create a static Ethernet network
	   configuration for your Rabbit device.  A description of the
	   configuration macros follows the Examples section.

   	To configure within your program, copy and paste the following into
	   your sample program and modify as necessary for your situation:

	      #define TCPCONFIG           1
	      #define _PRIMARY_STATIC_IP  "10.10.6.100"
	      #define _PRIMARY_NETMASK    "255.255.255.0"
	      #define MY_GATEWAY          "10.10.6.1"
	      #define MY_NAMESERVER       "10.10.6.1"

	   Alternatively, you can configure within the Defines window.  This
	   way, you can run many of the sample programs without modification.
	   Here is an example--copy and paste into the Defines window and
	   modify as necessary:

	      TCPCONFIG          = 1;
	      _PRIMARY_STATIC_IP = "10.10.6.100";
	      _PRIMARY_NETMASK   = "255.255.255.0";
	      MY_GATEWAY         = "10.10.6.1";
	      MY_NAMESERVER      = "10.10.6.1";

		To have the Rabbit automatically select an available link-local address
		(in the range 169.254.1.0 to 169.254.254.255) on a local-only network
		(no gateway to other networks), use the following defines:

			C source code:
	         #define USE_LINKLOCAL
	         #define TCPCONFIG				1
	         #define _PRIMARY_STATIC_IP	"169.254.0.0"
	         #define _PRIMARY_NETMASK	"255.255.0.0"
	         #define MY_GATEWAY			"0.0.0.0"
	         #define MY_NAMESERVER		"0.0.0.0"

			Project defines:
	         USE_LINKLOCAL
	         TCPCONFIG				= 1
	         _PRIMARY_STATIC_IP	= "169.254.0.0"
	         _PRIMARY_NETMASK		= "255.255.0.0"
	         MY_GATEWAY				= "0.0.0.0"
	         MY_NAMESERVER			= "0.0.0.0"

	   DHCP (Dynamic) Configuration
	   ----------------------------
	   For DHCP configuration, your Rabbit device will automatically
	   discover the network parameters from a DHCP server.  This means that
	   you will need a DHCP server on your local network to use this
	   configuration method.  DHCP configuration is very simple; see the
	   examples below as well as the description of the TCPCONFIG macro.

	   To configure within your program, copy and paste the following into
	   your sample program and modify as necessary for your situation:

	      #define TCPCONFIG 5

	   Alternatively, you can configure within the Defines window.  This
	   way, you can run many of the sample programs without modification.
	   Here is an example--copy and paste into the Defines window and
	   modify as necessary:

	      TCPCONFIG = 5;

		To fall back on using a randomly-selected link-local address if a
		DHCP server is not available, define the following macros:

			C source code:
	         #define USE_LINKLOCAL
	         #define TCPCONFIG				7
	         #define _PRIMARY_STATIC_IP	"169.254.0.0"
	         #define _PRIMARY_NETMASK	"255.255.0.0"
	         #define MY_GATEWAY			"0.0.0.0"
	         #define MY_NAMESERVER		"0.0.0.0"

			Project defines:
	         USE_LINKLOCAL
	         TCPCONFIG				= 7
	         _PRIMARY_STATIC_IP	= "169.254.0.0"
	         _PRIMARY_NETMASK		= "255.255.0.0"
	         MY_GATEWAY				= "0.0.0.0"
	         MY_NAMESERVER			= "0.0.0.0"

	*** DESCRIPTION ***

   	To configure your Rabbit device for an Ethernet network connection,
   	you will need to define a number of macros.  As shown in the
   	Examples section above, these can be defined in either the C
   	program or the Defines window.  These macros are defined below:

	   TCPCONFIG
	      Define to 1 for a static address configuration.  Define to 5 for
	      a DHCP (dynamic) address configuration.  Define to 7 for DHCP
			with a fallback to a static address if no DHCP server is available.

	      A complete list of TCPCONFIG values and their meanings is given later
	      in these instructions.  If this is defined in the Defines window, you
	      may get a warning about a macro redefinition; this can be safely
	      ignored as the Defines window value will be used.

	   _PRIMARY_STATIC_IP   (default "10.10.6.100")
	      The desired static IP address for your Rabbit device, e.g.
	      "10.10.6.100".  Note that the quotes are necessary.  If TCPCONFIG
	      is set to 7, this address is used as the fallback address if a
	      DHCP server is unavailable.

	      If USE_LINKLOCAL is defined and _PRIMARY_STATIC_IP is set to
	      an address with 169.254 as the starting octets (e.g., "169.254.0.0"),
	      the Rabbit will randomly select an unused address in the range
	      169.254.1.0 to 169.254.254.255.

	      If _PRIMARY_STATIC_IP is set to a valid link-local address (169.254.1.0
	      to 169.254.254.255), the Rabbit will only select a random address if
	      that preferred address is not available.

	   _PRIMARY_NETMASK     (default "255.255.255.0")
	      The desired netmask for your Rabbit device, e.g. "255.255.255.0".

	   MY_GATEWAY           (default "10.10.6.1")
	      The gateway IP address for your Rabbit device.  This is needed if
	      you want your Rabbit device to be able to communicate with remote
	      networks--the gateway is the server that is responsible for
	      routing to other networks.  The gateway is sometimes called a
	      default router.

	   MY_NAMESERVER        (default "10.10.6.1")
	      The nameserver's IP address for your Rabbit device.  This is only
	      used if you need to resolve domain names, e.g. resolving
	      "www.digi.com" to "66.77.174.69".


Wi-Fi Configuration
-------------------
	Wi-Fi has some specific configuration parameters.  These parameters are
	covered in this section.  The basic TCP/IP parameters covered in the
	above section are also used for Wi-Fi, so please see the Ethernet and
	basic TCP/IP parameters section above for more information.  Also note
	that a Wi-Fi interface can be configured for DHCP support as well; the
	examples in this section will show only static configuration.

   *** EXAMPLES ***

	   Infrastructure, Open (no encryption) Configuration
	   --------------------------------------------------
	   The simplest way to configure a Wi-Fi network interface is to use an
	   open configuration.  This means that no encryption or authentication
	   is used.  This example is configured for infrastructure mode, which
	   means that you will also need a Wi-Fi access point or Wi-Fi router.
	   Note that your wireless access point will need to match these
	   settings (in particular, the SSID, or network name, must be the
	   same, and the AP must not have encryption enabled).

      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG            1
         #define _PRIMARY_STATIC_IP   "10.10.6.100"
         #define _PRIMARY_NETMASK     "255.255.255.0"
         #define MY_GATEWAY           "10.10.6.1"
         #define MY_NAMESERVER        "10.10.6.1"
         #define IFC_WIFI_SSID        "rabbitTest"
         #define IFC_WIFI_ROAM_ENABLE 1
         #define IFC_WIFI_ROAM_BEACON_MISS 20
         #define IFC_WIFI_MODE        IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION      IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION  IFPARAM_WIFI_ENCR_NONE

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG            = 1;
         _PRIMARY_STATIC_IP   = "10.10.6.100";
         _PRIMARY_NETMASK     = "255.255.255.0";
         MY_GATEWAY           = "10.10.6.1";
         MY_NAMESERVER        = "10.10.6.1";
         IFC_WIFI_SSID        = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE        = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION      = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION  = IFPARAM_WIFI_ENCR_NONE;

		Ad-hoc, Open (no encryption) Configuration
		------------------------------------------
		Another simple way to configure a Wi-Fi network interface is to use
		an open configuration in ad-hoc mode.  An ad-hoc Wi-Fi network does
		not require an access point or Wi-Fi router to operate.  Instead,
		the Wi-Fi devices communicate directly with each other.  This is
		useful for an isolated Wi-Fi network, but it is not typically used
		when devices need to communicate outside of their own network.  Note
		that all Wi-Fi devices on an ad-hoc network need to match these
		settings (in particular, the SSID and the channel number must be the
		same).

      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG             1
         #define _PRIMARY_STATIC_IP    "10.10.6.100"
         #define _PRIMARY_NETMASK      "255.255.255.0"
         #define MY_GATEWAY            "10.10.6.1"
         #define MY_NAMESERVER         "10.10.6.1"
         #define IFC_WIFI_SSID         "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_CHANNEL      1
         #define IFC_WIFI_MODE         IFPARAM_WIFI_ADHOC
         #define IFC_WIFI_REGION       IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION   IFPARAM_WIFI_ENCR_NONE

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG             = 1;
         _PRIMARY_STATIC_IP    = "10.10.6.100";
         _PRIMARY_NETMASK      = "255.255.255.0";
         MY_GATEWAY            = "10.10.6.1";
         MY_NAMESERVER         = "10.10.6.1";
         IFC_WIFI_SSID         = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_CHANNEL      = 1;
         IFC_WIFI_MODE         = IFPARAM_WIFI_ADHOC;
         IFC_WIFI_REGION       = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION   = IFPARAM_WIFI_ENCR_NONE;

      Note that currently, the only supported encryption setting for ad-hoc
      mode is IFPARAM_WIFI_ENCR_NONE.

		Infrastructure, WEP Encryption Configuration
		--------------------------------------------
		WEP is a type of encryption for Wi-Fi networks.  It is now
		considered insecure, but it is commonly supported by Wi-Fi devices.
		To use WEP, all devices including the access point or Wi-Fi router
		will need to be configured with the same WEP keys (and, of course,
		the same SSID).  WEP allows multiple keys to be defined; all devices
		will need to be configured to use the same key.

      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG                1
         #define _PRIMARY_STATIC_IP       "10.10.6.100"
         #define _PRIMARY_NETMASK         "255.255.255.0"
         #define MY_GATEWAY               "10.10.6.1"
         #define MY_NAMESERVER            "10.10.6.1"
         #define IFC_WIFI_SSID            "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  	1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_MODE            IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION          IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION      IFPARAM_WIFI_ENCR_WEP
         #define IFC_WIFI_WEP_KEYNUM      0
         #define IFC_WIFI_WEP_KEY0_HEXSTR "0123456789abcdef0123456789"

      (alternate method to define a WEP key:)

         #define IFC_WIFI_WEP_KEY0_BIN   \
         	0x01, 0x23, 0x45, 0x67, 0x89, 0xab,0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG                = 1;
         _PRIMARY_STATIC_IP       = "10.10.6.100";
         _PRIMARY_NETMASK         = "255.255.255.0";
         MY_GATEWAY               = "10.10.6.1";
         MY_NAMESERVER            = "10.10.6.1";
         IFC_WIFI_SSID            = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  	 = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE            = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION          = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION      = IFPARAM_WIFI_ENCR_WEP;
         IFC_WIFI_WEP_KEYNUM      = 0;
         IFC_WIFI_WEP_KEY0_HEXSTR = "0123456789abcdef0123456789";

		(alternate method to define a WEP key:)

         IFC_WIFI_WEP_KEY0_BIN = 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89;

		Infrastructure, WPA/TKIP Encryption Configuration, Pre-shared Key
		-----------------------------------------------------------------
		TKIP (often called "WPA Encryption) is an encryption method for
		Wi-Fi networks.  It is considered much more secure than WEP and is
		commonly available.  The Rabbit Wi-Fi driver supports TKIP/WPA
		encryption with Pre-Shared Keys (PSK).  These keys can be specified
		as a 256-bit key or as a passphrase that is expanded into a key.
		Note that the code for this encryption method is not compiled unless
		you define the macro WIFI_USE_WPA.

      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG             1
         #define _PRIMARY_STATIC_IP    "10.10.6.100"
         #define _PRIMARY_NETMASK      "255.255.255.0"
         #define MY_GATEWAY            "10.10.6.1"
         #define MY_NAMESERVER         "10.10.6.1"
         #define WIFI_USE_WPA
         #define IFC_WIFI_SSID         "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_MODE         IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION       IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION   IFPARAM_WIFI_ENCR_TKIP

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG                = 1;
         _PRIMARY_STATIC_IP       = "10.10.6.100";
         _PRIMARY_NETMASK         = "255.255.255.0";
         MY_GATEWAY               = "10.10.6.1";
         MY_NAMESERVER            = "10.10.6.1";
         WIFI_USE_WPA;
         IFC_WIFI_SSID            = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  	 = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE            = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION          = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION      = IFPARAM_WIFI_ENCR_TKIP;

      Note: For setting the WPA Pre-Shared Key (PSK) info see the
      "WPA Pre-Shared Key (PSK)" section below.

      Infrastructure, WPA2/CCMP Encryption Configuration, Pre-shared Key
		------------------------------------------------------------------
      WPA2 is a more secure replacement for WEP.  This implementation
   	uses the Advanced Encryption Standard (AES) based algorithm, also known
   	as CCMP (Counter Mode with Cipher Block Chaining Message Authentication
   	Code Protocol) cypher suite. The Rabbit Wi-Fi driver supports CCMP/WPA2
		encryption with Pre-Shared Keys (PSK). These keys can be specified
		as a 256-bit key or as a passphrase that is expanded into a key.
		Note that the code for this encryption method is not compiled unless
		you define the macros WIFI_USE_WPA and WIFI_AES_ENABLED.

      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG             1
         #define _PRIMARY_STATIC_IP    "10.10.6.100"
         #define _PRIMARY_NETMASK      "255.255.255.0"
         #define MY_GATEWAY            "10.10.6.1"
         #define MY_NAMESERVER         "10.10.6.1"
         #define WIFI_USE_WPA
         #define WIFI_AES_ENABLED
         #define IFC_WIFI_SSID         "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_MODE         IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION       IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION   IFPARAM_WIFI_ENCR_CCMP

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG                = 1;
         _PRIMARY_STATIC_IP       = "10.10.6.100";
         _PRIMARY_NETMASK         = "255.255.255.0";
         MY_GATEWAY               = "10.10.6.1";
         MY_NAMESERVER            = "10.10.6.1";
         WIFI_USE_WPA;
         WIFI_AES_ENABLED;
         IFC_WIFI_SSID            = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  	 = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE            = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION          = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION      = IFPARAM_WIFI_ENCR_CCMP;

      Note: For setting the WPA Pre-Shared Key (PSK) info see the
      "WPA Pre-Shared Key (PSK)" section below.

      WPA Pre-Shared Key (PSK)
      ------------------------
      When using WPA/TKIP or WPA2/CCMP, you will also need to define the WPA
      Pre-Shared Key (PSK).  This can be done by specifying a passphrase that
      the driver will expand to a 256-bit key or by specifying the 256-bit
      key itself.  Note that expanding a passphrase takes a significant
      amount of time at startup--up to about 20 seconds.

      To specify the WPA passphrase, you will need something like the
      following:

         #define IFC_WIFI_WPA_PSK_PASSPHRASE "myPassphrase"

      To specify the WPA Pre-Shared Key itself, use the following:

         #define IFC_WIFI_WPA_PSK_HEXSTR \
         	"1122334455667788990011223344556677889900112233445566778899001122"

      To specify the WPA passphrase in the Project Defines window, use the
      following:

         IFC_WIFI_WPA_PSK_PASSPHRASE = "myPassphrase";

      To specify the WPA Pre-Shared Key itself, use the following:

         IFC_WIFI_WPA_PSK_HEXSTR = "1122334455667788990011223344556677889900112233445566778899001122";

		Infrastructure, WPA Enterprise using EAP/TLS and CCMP Encryption
		-----------------------------------------------------------------
      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG             1
         #define _PRIMARY_STATIC_IP    "10.10.6.100"
         #define _PRIMARY_NETMASK      "255.255.255.0"
         #define MY_GATEWAY            "10.10.6.1"
         #define MY_NAMESERVER         "10.10.6.1"
         #define WIFI_USE_WPA
         #define WIFI_AES_ENABLED
         #define IFC_WIFI_SSID         "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_MODE         IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION       IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION   IFPARAM_WIFI_ENCR_CCMP
			// <- the above defines are identical to using CCMP with PSK

	      #define WPA_USE_EAP     		WPA_USE_EAP_TLS
	      #define IFC_WIFI_WPA_PROTOCOL IFPARAM_WIFI_WPA_PROTOCOL_WPA2
	      #define IFC_WIFI_IDENTITY     "userid"
	      #ximport "certs/root.pem"           root_ca_cert
	      #ximport "certs/my_client.pem"      my_client_cert
	      #define IFC_WIFI_CLIENT_CERT_XIM    my_client_cert, my_client_cert
	      #define IFC_WIFI_CA_CERT_XIM        root_ca_cert

      Because it is necessary to ximport SSL certificates for use with this
      encryption method, it isn't possible to completely configure WPA
      Enterprise with EAP/TLS and CCMP using the Project Defines.

      Provided you include these two ximports in your program:

	      #ximport "certs/root.pem"           root_ca_cert
	      #ximport "certs/my_client.pem"      my_client_cert

      you can provide the rest of the configuration in the Project Defines.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG                = 1;
         _PRIMARY_STATIC_IP       = "10.10.6.100";
         _PRIMARY_NETMASK         = "255.255.255.0";
         MY_GATEWAY               = "10.10.6.1";
         MY_NAMESERVER            = "10.10.6.1";
         WIFI_USE_WPA;
         WIFI_AES_ENABLED;
         IFC_WIFI_SSID            = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  	 = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE            = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION          = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION      = IFPARAM_WIFI_ENCR_CCMP;

	      WPA_USE_EAP     		    = WPA_USE_EAP_TLS;
	      IFC_WIFI_WPA_PROTOCOL    = IFPARAM_WIFI_WPA_PROTOCOL_WPA2;
	      IFC_WIFI_IDENTITY        = "userid";
	      IFC_WIFI_CLIENT_CERT_XIM = my_client_cert, my_client_cert;
	      IFC_WIFI_CA_CERT_XIM     = root_ca_cert;

	   NOTE: when using certificates (which are required in one form or
	   another for any WPA Enterprise configuration), it is very important
	   that the Real-Time Clock (RTC) on the Rabbit is set to the correct
	   date.  This is because certificates are always checked for their
	   validity period, which is expressed as calendar dates.  If the RTC
	   is not set correctly, then association may fail, and it is not always
	   obvious that this is the cause.  When testing your application, you can
	     #define X509_NO_RTC_AVAILABLE
	   at the top of your application in order to bypass the date-based
	   validity checks.

		Infrastructure, WPA Enterprise using PEAP and TKIP Encryption
		-----------------------------------------------------------------
      To configure within your program, copy and paste the following into
      your sample program and modify as necessary for your situation:

         #define TCPCONFIG             1
         #define _PRIMARY_STATIC_IP    "10.10.6.100"
         #define _PRIMARY_NETMASK      "255.255.255.0"
         #define MY_GATEWAY            "10.10.6.1"
         #define MY_NAMESERVER         "10.10.6.1"
         #define WIFI_USE_WPA
         #define IFC_WIFI_SSID         "rabbitTest"
			#define IFC_WIFI_ROAM_ENABLE  1
			#define IFC_WIFI_ROAM_BEACON_MISS  20
         #define IFC_WIFI_MODE         IFPARAM_WIFI_INFRASTRUCTURE
         #define IFC_WIFI_REGION       IFPARAM_WIFI_REGION_AMERICAS
         #define IFC_WIFI_ENCRYPTION   IFPARAM_WIFI_ENCR_TKIP
			// <- the above defines are identical to using TKIP with PSK
	      #define WPA_USE_EAP     		WPA_USE_EAP_PEAP
	      #define IFC_WIFI_IDENTITY     "my_user1d"
	      #define IFC_WIFI_PASSWORD     "my_passw0rd"
	      #ximport "certs/root.pem"           root_ca_cert
	      #define IFC_WIFI_CA_CERT_XIM        root_ca_cert
	      #define IFC_WIFI_CLIENT_CERT_XIM    0L,0L

	   The last parameter is explicitly setting the client certificate to
	   "none".  This is because client certificates are normally not
	   used with PEAP authentication.

      Alternatively, you can configure within the Defines window.  This
      way, you can run many of the sample programs without modification.
      Here is an example--copy and paste into the Defines window and
      modify as necessary:

         TCPCONFIG                = 1;
         _PRIMARY_STATIC_IP       = "10.10.6.100";
         _PRIMARY_NETMASK         = "255.255.255.0";
         MY_GATEWAY               = "10.10.6.1";
         MY_NAMESERVER            = "10.10.6.1";
         WIFI_USE_WPA;
         IFC_WIFI_SSID            = "rabbitTest";
			IFC_WIFI_ROAM_ENABLE  	 = 1;
			IFC_WIFI_ROAM_BEACON_MISS = 20;
         IFC_WIFI_MODE            = IFPARAM_WIFI_INFRASTRUCTURE;
         IFC_WIFI_REGION          = IFPARAM_WIFI_REGION_AMERICAS;
         IFC_WIFI_ENCRYPTION      = IFPARAM_WIFI_ENCR_TKIP;

	      WPA_USE_EAP     		    = WPA_USE_EAP_PEAP;
	      IFC_WIFI_IDENTITY        = "my_user1d";
	      IFC_WIFI_PASSWORD        = "my_passw0rd";
	      IFC_WIFI_CA_CERT_XIM     = root_ca_cert;
	      IFC_WIFI_CLIENT_CERT_XIM = 0L,0L;

	   Note that #ximport cannot be directly specified in the project
	   options box; it needs to be inserted in the project code e.g. as

	      #ximport "certs/root.pem"           root_ca_cert

		Infrastructure, WPA Enterprise with TLS 1.0(PEAP & EAP/TLS, TKIP & CCMP)
		------------------------------------------------------------------------
		By default, Dynamic C uses TLS version 1.2 for all of its connections.
		Many WPA Enterprise access points continue (2016) to use TLS 1.0 and
		do not support TLS 1.2 connections.
		
		To connect to a WPA Enterprise network using TLS 1.0, you must define
		SSL_ALLOW_TLS10_CLIENT_FALLBACK in your program.  This enables fallback
		support in the TLS library.  In addition, you can force TLS 1.0 for
		a connection using:
		
		ifconfig(IF_WIFI0, IFS_WIFI_EAP_TLS_FLAGS, SSL_F_FORCE_TLS10, IFS_END);
		
		To disable TLS 1.0 fallback and alwyas use TLS 1.2, use the flag
		SSL_F_DISABLE_TLS10 instead of SSL_F_FORCE_TLS10.
		
		You can define the macro IFC_WIFI_EAP_TLS_FLAGS in the project or your
		program to set the default, compile-time configuration.


	*** DESCRIPTION ***

   	To configure your Rabbit device for a Wi-Fi network connection, you
   	will need to define a number of macros.  As shown in the	Examples
   	section above, these can be defined in either the C program or the
   	Defines window.  Note that the macros in the Ethernet section (above
   	the Wi-Fi section) apply for Wi-Fi devices as well.  This section
   	only covers the macros specific to Wi-Fi.  These macros are defined
   	below:

	   TCPCONFIG
	   	This macro works the same for a Wi-Fi interface as it does for an
	   	Ethernet interface.  Use the value 1 for a static TCP/IP network
	   	configuration, or 5 for a DHCP (dynamic) configuration.

		IFC_WIFI_SSID          (default "rabbitTest")
			This is the SSID (Service Set Identifier) or name of the wireless
			network that you want your Rabbit device to connect to.  All
			other devices on your wireless network (including your access
			point or wireless router) must have this same name.

		IFC_WIFI_ROAM_ENABLE		(default 1)
         This turns roaming on or off

		IFC_WIFI_ROAM_BEACON_MISS	(default 20)
      	This sets the number of beacons that are missed continuously in order
         for scanning for a better access point and subsequent association to
         take place.

		IFC_WIFI_MODE          (default IFPARAM_WIFI_INFRASTRUCTURE)
			Specifies the network architecture mode for your wireless network.
			This macro has two possible values.  IFPARAM_WIFI_INFRASTRUCTURE
         means that the device will attach to an infrastructure network.  An
			infrastructure network includes at least one access point that
			coordinates communication on the wireless network.  IFPARAM_WIFI_ADHOC
			means that the device will use an ad-hoc mode network.  An ad-hoc
			network does not have an access point; all devices on the wireless
			network simply communicate directly with each other.

		IFC_WIFI_CHANNEL
         Sets the channel (0, or 1 - 14*) to use.  Mandatory for an ad-hoc
         network, it should usually be 0 (automatic) for infrastructure mode.
         Valid channels depend on the region selected by IFC_WIFI_REGION.

		IFC_WIFI_REGION   (default IFPARAM_WIFI_REGION_AMERICAS)
			This macro sets the channel range and maximum power limit for the
			region selected.  Different regions have different regulations on
			Wi-Fi communication.  This macro can have the values:

   IFPARAM_WIFI_REGION_AMERICAS           Americas, including the US (ch. 1-11)
   IFPARAM_WIFI_REGION_AUSTRALIA				Australia (ch. 1-11)
   IFPARAM_WIFI_REGION_CANADA					Canada (ch. 1-11)
   IFPARAM_WIFI_REGION_CHINA					China (ch. 1-11)
   IFPARAM_WIFI_REGION_EMEA					Europe, Middle East, Africa (ch. 1-13)
   IFPARAM_WIFI_REGION_FRANCE					France (ch. 10-13)
   IFPARAM_WIFI_REGION_ISRAEL					Israel (ch. 3-11)
   IFPARAM_WIFI_REGION_JAPAN					Japan (ch. 1-13)
   IFPARAM_WIFI_REGION_MEXICO_INDOORS		Mexico indoors (ch. 1-11)
   IFPARAM_WIFI_REGION_MEXICO_OUTDOORS		Mexico outdoors (ch. 9-11)

         See the IFS_WIFI_REGION section of the ifconfig() function help for
			more information.

		IFC_WIFI_ENCRYPTION     (default IFPARAM_WIFI_ENCR_NONE)
			This macro controls the type of encryption used.  It accepts a
         combination (with multiple values ORed together) of the following
         values:

         IFPARAM_WIFI_ENCR_ANY			Use any type of encryption
         IFPARAM_WIFI_ENCR_NONE			No encryption used
         IFPARAM_WIFI_ENCR_WEP			Use WEP encryption (see below to set keys)

         If you define WIFI_USE_WPA, you can use this value as well:

         IFPARAM_WIFI_ENCR_TKIP			Use TKIP encryption (WPA)

			If you define both WIFI_USE_WPA and WIFI_AES_ENABLED, you can use:

         IFPARAM_WIFI_ENCR_CCMP			Use CCMP encryption (WPA2)

         Note that currently, the only supported encryption setting for
         ad-hoc mode is IFPARAM_WIFI_ENCR_NONE.

			Use of IFC_WIFI_ENCRYPTION with either TKIP or CCMP:
			----------------------------------------------------
			When it is desired to associate with an AP which supports either WPA
			or WPA-2 (i.e. TKIP or CCMP), it is necessary to explicitly allow
			both forms of encryption i.e.
				#define IFC_WIFI_ENCRYPTION  \
     				IFPARAM_WIFI_ENCR_CCMP | IFPARAM_WIFI_ENCR_TKIP

			If you don't allow TKIP, then it is not possible to agree on an
			acceptable group transient key.  In summary, use the above bitwise
			OR of the two encryption settings when defining the encryption suite.
			This will work also with APs set to just use CCMP.  If an AP is set
			to just TKIP, then don't use IFPARAM_WIFI_ENCR_CCMP otherwise it will
			not associate, since it would not be correct to allow association
			with a theoretically weaker form of protection (TKIP) when a stronger
			protection (CCMP) was specified.


		IFC_WIFI_WEP_KEYNUM       (default 0)
			Select the WEP key to use when using WEP encryption.  This can
			have the value 0, 1, 2, or 3.  See the WEP key macros description
         below -- one or more of these macros need to be defined as well.

		IFC_WIFI_WEP_KEY0_BIN
		IFC_WIFI_WEP_KEY1_BIN
		IFC_WIFI_WEP_KEY2_BIN
		IFC_WIFI_WEP_KEY3_BIN
		   (defaults to undefined)
			Specifies the WEP keys to use for WEP encryption.  These keys
			can be either 40-bit or 104-bit (i.e., 5 bytes or 13 bytes).
			These must be defined as a comma-separated list of byte values.
			Note that you do not necessarily need to define all four WEP
			keys.  You can typically just define one key, make sure it matches
			the key used on all other devices, and set IFC_WIFI_WEP_KEYNUM
			to point to the correct key.

		IFC_WIFI_WEP_KEY0_HEXSTR
		IFC_WIFI_WEP_KEY1_HEXSTR
		IFC_WIFI_WEP_KEY2_HEXSTR
		IFC_WIFI_WEP_KEY3_HEXSTR
		   (defaults to undefined)
			Specifies the WEP keys to use for WEP encryption.  These keys
			can be either 40-bit or 104-bit (i.e., a string of either 10 or 26
         hex characters).
			Note that you do not necessarily need to define all four WEP
			keys.  You can typically just define one key, make sure it matches
			the key used on all other devices, and set IFC_WIFI_WEP_KEYNUM
			to point to the correct key.

         If both IFC_WIFI_WEP_KEY#_HEXSTR and IFC_WIFI_WEP_KEY#_BIN are
         defined for a particular key, the HEX version will be used.

		WIFI_USE_WPA
			Define this macro to compile WPA functionality into the Wi-Fi
			driver.  This is necessary to enable TKIP encryption.  Because
			the WPA code has a significant size, it is not compiled by
			default.

      IFC_WIFI_WPA_PSK_PASSPHRASE
			TKIP/WPA encryption requires a passphrase or a key.  This macro
			allows you to define a passphrase with an ASCII string.  The
			Wi-Fi driver will expand the passphrase into a key using a
			standard algorithm.  This process takes up to about 20 seconds.
			The same passphrase must be configured on all devices on the
			same Wi-Fi network.

         If possible, you should use IFC_WIFI_WPA_PSK_HEXSTR instead of
         IFC_WIFI_WPA_PSK_PASSPHRASE to set the key.

		IFC_WIFI_WPA_PSK_HEXSTR
			Instead of a passphrase, you can specify a key directly for
			TKIP/WPA encryption.  The key must be given as a series of hex
			digits within an ASCII string.  The key must be 256 bits, or 64
			hex digits.  Specifying the key directly means that a passphrase
			does not need to be expanded, resulting in a faster startup time.

	   WPA_USE_EAP
	   	Set to a bitwise OR combination of the following:
	   		WPA_USE_EAP_TLS
	   		WPA_USE_EAP_PEAP
	   	which specifies the enterprise authentication method to use,
	   	currently either EAP/TLS or EAP/PEAP/MSCHAPv2 respectively.
	   	Use of this macro will bring in a lot of library code so support
	   	enterprise level authentication and key management.  This will
	   	require configuration of the access point as well as a
	   	separate machine to be used as an Authentication Server (e.g.
	   	Radius server).

	  IFC_WIFI_WPA_PROTOCOL
	  		Set to bitwise OR of
	  			IFPARAM_WIFI_WPA_PROTOCOL_WPA2
	  			IFPARAM_WIFI_WPA_PROTOCOL_WPA
	  		in order to support WPA2 (RSN, Robust Security Network i.e. with CCMP)
	  		or WPA (the original TKIP-based Wifi Protected Access).

     IFC_WIFI_CLIENT_CERT_XIM    my_client_cert, my_client_key
			Set to two parameters: first parameter is public certificate of
			this (client) machine for EAP/TLS.  Second parameter is for
			the corresponding private key.  These are generally #ximported
			files, which are the .der or .pem certificate/private key files.
			Currently, the private key file must *not* itself be encrypted.
			This is only used for EAP/TLS.

			Note: if certificates have been generated by the Rabbit Certificate
			Utility, then you should #ximport the <basename>s.pem and
			<basename>key.pem files, where <basename> is the file name you
			selected for the client certificate.  For example, if the file
			name was "client" then
			  #ximport "certs/clients.pem" my_client_cert
			  #ximport "certs/clientkey.pem" my_client_key

	  IFC_WIFI_CA_CERT_XIM        root_ca_cert
	  		Set to the #ximported file containing the trusted certificate
	  		authority for validating the Authentication Server's public
	  		certificate.  This may be a .pem or .der format file.
			This is used for EAP/TLS, and should also be used for PEAP since PEAP
			uses TLS "under the covers".  In either case, it is important to
			be able to verify the authenticity of the Authentication Server
			itself.  This is done by having the trusted CA certificate available.

			Note: if you generated your own Certificate Authority (CA) using the
			Rabbit Certificate Utility, then you should #ximport the
			<basename>.der or <basename>.pem file for the CA.  For example, if the
			file name was "my_ca" then
			  #ximport "private/my_ca.der" root_ca_cert

	  IFC_WIFI_IDENTITY     "my_user1d"
			Define an identity for PEAP.  Using this macro sets both the
			inner and outer identity to the same value.  If your application
			requires a different outer "plaintext" identity, then your application
			will need to use the ifconfig() function directly.

			This is also required for EAP-TLS.  The userID may be set to a
			dummy value, depending on the requirements of the Authentication
			Server.

	  IFC_WIFI_PASSWORD     "my_passw0rd"
			Define a password for PEAP.  Not used for EAP-TLS.



	*** DESCRIPTION:  FURTHER WI-FI MACROS ***

   	A few other Wi-Fi compile-time configuration macros are available
   	that were not used in the examples above.  These macros are
   	described here:

		IFC_WIFI_AUTHENTICATION     (default depends on other macros)
			Specifies the authentication mode to use for this Wi-Fi network.

			Note that the default for this parameter depends on whether
			WPA_USE_EAP is defined.  If defined to zero, the default for this
			parameter is IFPARAM_WIFI_AUTH_OPEN.  If WPA_USE_EAP is defined to
			non-zero, then the default is IFPARAM_WIFI_AUTH_WPA_8021X.
			Otherwise if WPA_USE_EAP is not defined then, for backward
			compatibility only, the default is IFPARAM_WIFI_AUTH_ANY.

			The IFPARAM_WIFI_AUTH_ANY default is not now recommended; instead,
			the application should explicitly set this parameter to the desired
			authentication method, since that will promote upward compatibility.

			It accepts a combination (with multiple values ORed together) of the
         following values:

	         IFPARAM_WIFI_AUTH_ANY
	         								use any method.
                                    Don't use this when using EAP
                                    authentication.  Always set to one of
                                    the following, as appropriate.
	         IFPARAM_WIFI_AUTH_OPEN
	         								use open authentication
	         IFPARAM_WIFI_AUTH_SHAREDKEY
	         								use WEP shared-key authentication

         If you define WIFI_USE_WPA, you can use this value as well:

	         IFPARAM_WIFI_AUTH_WPA_PSK
	         								use WPA pre-shared key (TKIP, CCMP)

         If you define WPA_USE_EAP, you can use the following value as well.
         Note that in this case, do not use IFPARAM_WIFI_AUTH_ANY, and do not
         OR in a number of different values.  Select the appropriate
         authentication method explicitly, otherwise network performance
         will be degraded.

        		IFPARAM_WIFI_AUTH_WPA_8021X
        										WPA with 802.1X (EAP) authentication.

		IFC_WIFI_FRAG_THRESHOLD   (default 0)
			Set the fragmentation threshold.  Frames (or packets) that are
			larger than this threshold are split into multiple fragments.
			This can be useful on busy or noisy networks.  The value can be
			between 256 and 2346, or 0 which means no fragmentation.

		IFC_WIFI_RTS_THRESHOLD    (default 2347, no RTS/CTS)
			Set the RTS threshold, the frame size at which the RTS/CTS
			mechanism is used.  This is sometimes useful on busy or noisy
			networks.  The value can be between 1 and 2347.

PPP Configuration
-----------------
	PPP Configuration is a complex topic and is highly dependent on the
	serial port(s) used, the method of connecting to the PPP server, etc.
	Complete details are outside the scope of these instructions; please
	see the User's Manual for the PPP module for more information.

	A predefined PPP configuration can be used by defining TCPCONFIG to 8.
	This configuration makes a number of assumptions:  serial port B will
	be used, hardware flow control will be used, etc.  These assumptions
	will need to be modified for your specific situation.  Search for the
	section within TCP_CONFIG.LIB that begins with this line:

	#if TCPCONFIG == 8

	This section defines the configuration settings for a TCPCONFIG value
	of 8.  See the documentation for ifconfig() for more information on
	the settings here.  You can make changes directly if you would like,
	or you can use the custom config method which is detailed later in
	these instructions.

PPPoE Configuration
-------------------
	PPPoE (PPP over Ethernet) configuration is not covered by the
	pre-defined TCPCONFIG configurations.  Typically, TCPCONFIG should
	be set to 0 (meaning no configuration), and the compile-time
	configuration is done within the sample program or the Defines
	window.  See the sample program Samples\PPP\pppoe_test.c for an
	example of configuring PPPoE.

Custom Configurations (custom_config.lib)
-----------------------------------------
   If TCPCONFIG is set to a number 100 or greater, then a library called
   "custom_config.lib" will be used.  This library is not distributed with
   Dynamic C; it is expected that it will be created by each user with
   appropriate test (or production) settings.  The advantage of creating
   custom_config.lib is that it will not be replaced by new releases of
   Dynamic C.

   When a new release of Dynamic C is installed, the only action necessary
   to use custom_config.lib is the addition of its location to the LIB.DIR
   file.

   custom_config.lib can be initially created, using this library file as
   a template.

   See the documentation or function help for ifconfig() for information
   about the possible configuration parameters.

TCPCONFIG Predefined Configuration Table
----------------------------------------

	The following table is an overview of the predefined TCPCONFIG
	configuration values.  Note that "Runtime" means that that value
	only allows runtime configuration.

   TCPCONFIG | Ethernet | PPP | DHCP | Runtime | Comments
             |  and/or  |     |      |         |
             |   WiFi   |     |      |         |
   ----------+----------+-----+------+---------+-------------------------------
       1     |   Yes    | No  | No   |   No    | Simple Ethernet or Wifi
             |          |     |      |         | configuration with static
             |          |     |      |         | IP addresses
   ----------+----------+-----+------+---------+-------------------------------
       2     |   No     | Yes | No   |   No    | Obsolete: use 8 instead
   ----------+----------+-----+------+---------+-------------------------------
       3     |   Yes    | No  | Yes  |   No    | Obsolete: use 5 instead
   ----------+----------+-----+------+---------+-------------------------------
       4     |   Yes    | Yes | No   |   No    | Multiple interface example
   ----------+----------+-----+------+---------+-------------------------------
       5     |   Yes    | No  | Yes  |   No    | As for (1), but use DHCP.
   ----------+----------+-----+------+---------+-------------------------------
       6     |   Yes    | No  | No   |   Yes   | "Empty": runtime setup req'd
   ----------+----------+-----+------+---------+-------------------------------
       7     |   Yes    | No  | Yes  |   No    | DHCP, with static IP fallback
   ----------+----------+-----+------+---------+-------------------------------
       8     |   No     | Yes | Yes  |   No    | PPP with modem support **
   ----------+----------+-----+------+---------+-------------------------------
       9     |   Yes    | No  | Yes  |   Yes   | Device Cloud recomended setting
   ----------+----------+-----+------+---------+-------------------------------
       11    |   Yes    | No  | No   |   No    | As for (1), plus loopback
   ----------+----------+-----+------+---------+-------------------------------
       15    |   Yes    | No  | Yes  |   No    | As for (5), plus loopback
   ----------+----------+-----+------+---------+-------------------------------
       16    |   Yes    | No  | No   |   Yes   | As for (6), plus loopback
             |          |     |      |         | Device Cloud recomended setting
             |          |     |      |         | for static IP addresses
   ----------+----------+-----+------+---------+-------------------------------


   ** Config 8 (PPP) assumes a modem is connected to serial port B, with
      hardware flow control.  This is unlikely to work without modification.
      It is intended more as a template for setting up your own configuration.

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef TCP_CONFIG_H
#define TCP_CONFIG_H

#ifndef TCPCONFIG
	// Check for a common mistake.  TCPCONFIG is the correct macro name, but
	// it's easy to try TCP_CONFIG instead.  Flag a warning and use the value
	// anyway in that case.
	#ifndef TCP_CONFIG
   	#warnt "TCPCONFIG was not defined.  Defaulting to 0 (no predefined config)."
      #warnt "   To get rid of this warning, explicitly #define TCPCONFIG 0 (or"
      #warnt "   some other value -- See tcp_config.lib for details)."
		#define TCPCONFIG		0		// Zero means do not do any configuration: expects
											// all config items to be defined in the main
											// program.
	#else
		#define TCPCONFIG TCP_CONFIG
		#warnt "TCPCONFIG is the correct TCP/IP config macro. Using TCP_CONFIG anyway..."
	#endif
#endif

/*******************************************
  These macros define the various types of
  authentication which are supported using
  the WPA library.  They need to be here so
  that conditional compilation works.
********************************************/
#define	WPA_USE_EAP_LEAP					0x00000001L
#define	WPA_USE_EAP_PEAP					0x00000002L
#define	WPA_USE_EAP_TLS					0x00000004L
#define	WPA_USE_EAP_TTLS					0x00000008L
#define	WPA_USE_EAP_GTC					0x00000100L
#define	WPA_USE_EAP_MD5					0x00000200L
#define	WPA_USE_EAP_MSCHAPV2				0x00000400L
#define	WPA_USE_EAP_OTP					0x00000800L
#define	WPA_USE_EAP_TTLS_CHAP			0x00010000L
#define	WPA_USE_EAP_TTLS_MSCHAP			0x00020000L
#define	WPA_USE_EAP_TTLS_MSCHAPV2		0x00040000L
#define	WPA_USE_EAP_TTLS_PAP				0x00080000L
/*******************************************
********************************************/


#if TCPCONFIG >= 100
	#use "custom_config.lib"
#elif TCPCONFIG == 0
	// do nothing
#else

	/*
	 * General Configuration:  You can specify your IP address, netmask,
	 * name server, and gateway here, and they will be used in each of
	 * the individual configurations below.
	 */
	#define _USE_DEFAULT_STATICS (TCPCONFIG == 1 || TCPCONFIG == 4 || TCPCONFIG == 7)

	#if _USE_DEFAULT_STATICS
		#ifndef _PRIMARY_STATIC_IP
	      #warns "_PRIMARY_STATIC_IP has not been defined.  Using a default of 10.10.6.100."
	      #define _PRIMARY_STATIC_IP    "10.10.6.100"
	      #define _USE_DEFAULT_STATICS_WI
	   #endif
	   #ifndef _PRIMARY_NETMASK
	      #warns "_PRIMARY_NETMASK has not been defined.  Using a default of 255.255.255.0."
	      #define _PRIMARY_NETMASK      "255.255.255.0"
	      #define _USE_DEFAULT_STATICS_WI
	   #endif
	   #ifndef MY_NAMESERVER
	      #warns "MY_NAMESERVER has not been defined.  Using a default of 10.10.6.1."
	      #define MY_NAMESERVER         "10.10.6.1"
	      #define _USE_DEFAULT_STATICS_WI
	   #endif
	   #ifndef MY_GATEWAY
	      #warns "MY_GATEWAY has not been defined.  Using a default of 10.10.6.1."
	      #define MY_GATEWAY            "10.10.6.1"
	      #define _USE_DEFAULT_STATICS_WI
	   #endif
	   #ifdef _USE_DEFAULT_STATICS_WI
	      #warns "   Perform a function lookup (ctrl-H) on TCPCONFIG for more information."
	   #endif
	#endif

	/*
		Massive disclaimer: Most of tcp_config needs to change radically before
		we release the RCM6000.

		Top preference would be run-time configuration using parameters stored
		in the UserBlock.  Include samples to demonstrate managing those
		parameters via ADDP daemon, RabbitWeb pages, and a command-line interface
		that could run over a TCP socket or serial connection (including STDIO).

		If we have to keep macros, I'd prefer to see us move to macros like this,
		kind of how we were moving with the IFC_WIFI macros.  I'd also prefer
		to see TCPCONFIG go away completely...

		// Static IP on ETH0
		#define IFC_ETH_IPADDR				IPADDR(10,10,6,100)
		#define IFC_ETH_NETMASK				IPADDR(255,255,255,0)
		#define IFC_ETH_ROUTER				IPADDR(10,10,6,1)
		#define IFC_ETH_NAMESERVER			IPADDR(10,10,6,1)

		// Static IP on ETH0, using strings
		#define IFC_ETH_IPADDR_STR			"10.10.6.100"
		#define IFC_ETH_NETMASK_STR		"255.255.255.0"
		#define IFC_ETH_ROUTER_STR			"10.10.6.1"
		#define IFC_ETH_NAMESERVER_STR	"10.10.6.1"

		// DHCP on ETH0 with fallback to link-local
		#define IFC_ETH_DHCP					1
		#define IFC_ETH_DHCP_FALLBACK		1
		#define IFC_ETH_DHCP_FB_IPADDR	IPADDR(169,254,0,0)

		// DHCP on ETH1 (hypothetical dual-Ethernet board)
		#define IFC_ETH1_DHCP				1
		#define IFC_ETH1_DHCP_FALLBACK	1
		#define IFC_ETH1_DHCP_FB_IPADDR	IPADDR(169,254,0,0)

		// Static IP on WIFI0
		#define IFC_WIFI_IPADDR				IPADDR(192,168,0,100)
		#define IFC_WIFI_NETMASK			IPADDR(255,255,255,0)
		#define IFC_WIFI_ROUTER				IPADDR(192,168,0,1)
		#define IFC_WIFI_NAMESERVER		IPADDR(192,168,0,1)

		// Wi-Fi settings, using existing macro syntax
      #define IFC_WIFI_SSID					"rabbitTest"
      #define IFC_WIFI_ROAM_ENABLE			1
      #define IFC_WIFI_ROAM_BEACON_MISS	20
      #define IFC_WIFI_MODE					IFPARAM_WIFI_INFRASTRUCTURE
      #define IFC_WIFI_REGION					IFPARAM_WIFI_REGION_AMERICAS
      #define IFC_WIFI_ENCRYPTION			IFPARAM_WIFI_ENCR_NONE
	*/

	#if ETHERNET_ONBOARD
		#ifdef _PRIMARY_STATIC_IP
	   	#define _ETH_STATIC_IP  _PRIMARY_STATIC_IP
	   #endif
	   #ifdef _PRIMARY_NETMASK
	   	#define _ETH_NETMASK    _PRIMARY_NETMASK
	   #endif
	   #if WIFI_ONBOARD
         #if _USE_DEFAULT_STATICS
	      	#ifndef _SECONDARY_STATIC_IP
	            #warns "_SECONDARY_STATIC_IP has not been defined.  Using a default of 10.10.6.101."
	            #define _SECONDARY_STATIC_IP    "10.10.6.101"
	         #endif
	         #ifndef _SECONDARY_NETMASK
	            #warns "_SECONDARY_NETMASK has not been defined.  Using a default of 255.255.255.0."
	            #define _SECONDARY_NETMASK      "255.255.255.0"
	         #endif
	      #endif
	      #ifdef _SECONDARY_STATIC_IP
	      	#define _WIFI_STATIC_IP _SECONDARY_STATIC_IP
	      #endif
	      #ifdef _SECONDARY_NETMASK
	      	#define _WIFI_NETMASK   _SECONDARY_NETMASK
	      #endif
	   #endif
	#elif WIFI_ONBOARD
		#ifdef _PRIMARY_STATIC_IP
	   	#define _WIFI_STATIC_IP _PRIMARY_STATIC_IP
	   #endif
	   #ifdef _PRIMARY_NETMASK
	   	#define _WIFI_NETMASK   _PRIMARY_NETMASK
	   #endif
	#endif


#if WIFI_ONBOARD

   /*
    * WiFi Configuration: The following parameters can be changed to suit your
    * 						  WiFi network configurations.
    *
    */

   /*** support for old-style configuration macros (pre-10.40) ***/
   #ifdef _WIFI_KEY0
   	#warns "_WIFI_KEY0 deprecated, use IFC_WIFI_WEP_KEY0_BIN or ...KEY0_HEXSTR instead."
   	#define IFC_WIFI_WEP_KEY0_BIN _WIFI_KEY0
   #endif
   #ifdef _WIFI_KEY1
   	#warns "_WIFI_KEY1 deprecated, use IFC_WIFI_WEP_KEY1_BIN or ...KEY1_HEXSTR instead."
   	#define IFC_WIFI_WEP_KEY1_BIN _WIFI_KEY1
   #endif
   #ifdef _WIFI_KEY2
   	#warns "_WIFI_KEY2 deprecated, use IFC_WIFI_WEP_KEY2_BIN or ...KEY2_HEXSTR instead."
   	#define IFC_WIFI_WEP_KEY2_BIN _WIFI_KEY2
   #endif
   #ifdef _WIFI_KEY3
   	#warns "_WIFI_KEY3 deprecated, use IFC_WIFI_WEP_KEY3_BIN or ...KEY3_HEXSTR instead."
   	#define IFC_WIFI_WEP_KEY3_BIN _WIFI_KEY3
   #endif
   #ifdef _WIFI_USEKEY
   	#warns "_WIFI_USEKEY deprecated, use IFC_WIFI_WEP_KEYNUM instead."
      #warns "  (and remove the quotes from the key number)"
   	#define IFC_WIFI_WEP_KEYNUM			atoi(_WIFI_USEKEY)
   #endif
   #ifdef _WIFI_MODE
   	#warns "_WIFI_MODE deprecated, use IFC_WIFI_MODE instead."
      #warns "  (set to IFPARAM_WIFI_INFRASTRUCTURE or IFPARAM_WIFI_ADHOC)"
		#define IFC_WIFI_MODE			_wifi_ioctl_mode(_WIFI_MODE)
   #endif
	#ifdef _WIFI_SSID
   	#warns "_WIFI_SSID deprecated, use IFC_WIFI_SSID instead."
   	#define IFC_WIFI_SSID _WIFI_SSID
   #endif
   #ifdef _WIFI_OWNCHANNEL
   	#warns "_WIFI_OWNCHANNEL deprecated, use IFC_WIFI_CHANNEL instead."
      #warns "  (and remove the quotes from the channel number)"
		#define IFC_WIFI_CHANNEL atoi(_WIFI_OWNCHANNEL)
   #endif
   #ifdef _WIFI_REGION_REQ
   	#warns "_WIFI_REGION_REQ deprecated, use IFC_WIFI_REGION instead."
      #warns "  (see the TCPCONFIG documentation for valid IFPARAM_WIFI_REGION_ options)"
   	#define IFC_WIFI_REGION _WIFI_REGION_REQ
   #endif
   #ifdef _WIFI_TX_POWER
    	#fatal "Use IFC_WIFI_REGION or ifconfig for FCC requirements"
   #endif
   #ifdef _WIFI_CHANNEL_MASK
    	#fatal "Use IFC_WIFI_REGION or ifconfig for FCC requirements"
   #endif
	#ifdef _WIFI_FRAG_THRESH
   	#warns "_WIFI_FRAG_THRESH deprecated, use IFC_WIFI_FRAG_THRESHOLD instead."
      #warns "  (and remove the quotes from the number)"
		#define IFC_WIFI_FRAG_THRESHOLD	atoi(_WIFI_FRAG_THRESH)
	#endif
	#ifdef _WIFI_RTS_THRESH
   	#warns "_WIFI_RTS_THRESH deprecated, use IFC_WIFI_RTS_THRESHOLD instead."
      #warns "  (and remove the quotes from the number)"
		#define IFC_WIFI_RTS_THRESHOLD	atoi(_WIFI_RTS_THRESH)
	#endif
	#ifdef _WIFI_WEP_FLAG
   	#warns "_WIFI_WEP_FLAG deprecated, use IFC_WIFI_ENCRYPTION instead."
      #warns "  (see the TCPCONFIG documentation for valid IFPARAM_WIFI_ENCR_ options)"
   	#define IFC_WIFI_ENCRYPTION		_wifi_ioctl_encr_type(_WIFI_WEP_FLAG)
   #endif
	#ifdef _WIFI_AUTH_MODE
   	#warns "_WIFI_AUTH_MODE deprecated, use IFC_WIFI_AUTHENTICATION instead."
      #warns "  (see the TCPCONFIG documentation for valid IFPARAM_WIFI_AUTH_ options)"
   	#define IFC_WIFI_AUTHENTICATION		_wifi_ioctl_auth_type(_WIFI_AUTH_MODE)
   #endif
   #ifdef WIFI_USE_WPA
   	#ifdef _WIFI_PSK_PASSPHRASE
	   	#warns "_WIFI_PSK_PASSPHRASE deprecated, use IFC_WIFI_WPA_PSK_PASSPHRASE instead."
			#define IFC_WIFI_WPA_PSK_PASSPHRASE _WIFI_PSK_PASSPHRASE
      #endif
      #ifdef _WIFI_PSK_HEX
	   	#warns "_WIFI_PSK_HEX deprecated, use IFC_WIFI_WPA_PSK_HEXSTR instead."
			#define IFC_WIFI_WPA_PSK_HEXSTR _WIFI_PSK_HEX
      #endif
	#endif

   /*** end of support for old-style configuration macros (pre-10.40) ***/

   // Configuration macros for setting WEP Keys:

  	// One of four keys can be selected, when using WEP encryption.
   // Keys can be modified to match your access point or peer.
   // Note that keys can be either 5 or 13 bytes long.

	// sample of setting a 13-byte key via a hex string:
   // #define IFC_WIFI_WEP_KEY0_HEXSTR "0123456789abcdef0123456789"

	// sample of setting a 5-byte key via a hex string:
   // #define IFC_WIFI_WEP_KEY1_HEXSTR "0123456789"

	// sample of setting a 13-byte key via an array of bytes:
   // #define IFC_WIFI_WEP_KEY2_BIN \
   // 	0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67,0x89

	// sample of setting a 5-byte key via an array of bytes:
   // #define IFC_WIFI_WEP_KEY3_BIN 0x01,0x23,0x45,0x67,0x89

	#ifdef IFC_WIFI_WEP_KEY0_HEXSTR
		#define IFC_WEP_KEY0 IFS_WIFI_WEP_KEY_HEXSTR, 0, IFC_WIFI_WEP_KEY0_HEXSTR
   #else
	   #ifndef IFC_WIFI_WEP_KEY0_BIN
	      #define IFC_WEP_KEY0 IFS_NOP
		#else
	      const byte _wifi_key0[] = { IFC_WIFI_WEP_KEY0_BIN };
	      #define IFC_WEP_KEY0 IFS_WIFI_WEP_KEY_BIN, 0, sizeof(_wifi_key0), _wifi_key0
		#endif
	#endif

	#ifdef IFC_WIFI_WEP_KEY1_HEXSTR
		#define IFC_WEP_KEY1 IFS_WIFI_WEP_KEY_HEXSTR, 1, IFC_WIFI_WEP_KEY1_HEXSTR
   #else
	   #ifndef IFC_WIFI_WEP_KEY1_BIN
	      #define IFC_WEP_KEY1 IFS_NOP
		#else
	      const byte _wifi_key1[] = { IFC_WIFI_WEP_KEY1_BIN };
	      #define IFC_WEP_KEY1 IFS_WIFI_WEP_KEY_BIN, 1, sizeof(_wifi_key1), _wifi_key1
		#endif
	#endif

	#ifdef IFC_WIFI_WEP_KEY2_HEXSTR
		#define IFC_WEP_KEY2 IFS_WIFI_WEP_KEY_HEXSTR, 2, IFC_WIFI_WEP_KEY2_HEXSTR
   #else
	   #ifndef IFC_WIFI_WEP_KEY2_BIN
	      #define IFC_WEP_KEY2 IFS_NOP
		#else
	      const byte _wifi_key2[] = { IFC_WIFI_WEP_KEY2_BIN };
	      #define IFC_WEP_KEY2 IFS_WIFI_WEP_KEY_BIN, 2, sizeof(_wifi_key2), _wifi_key2
		#endif
	#endif

	#ifdef IFC_WIFI_WEP_KEY3_HEXSTR
		#define IFC_WEP_KEY3 IFS_WIFI_WEP_KEY_HEXSTR, 3, IFC_WIFI_WEP_KEY3_HEXSTR
   #else
	   #ifndef IFC_WIFI_WEP_KEY3_BIN
	      #define IFC_WEP_KEY3 IFS_NOP
		#else
	      const byte _wifi_key3[] = { IFC_WIFI_WEP_KEY3_BIN };
	      #define IFC_WEP_KEY3 IFS_WIFI_WEP_KEY_BIN, 3, sizeof(_wifi_key3), _wifi_key3
		#endif
	#endif

   // IFC_WIFI_WEP_KEYNUM specifies which key from the above 4 keys, 0 through 3,
   // to use for WEP encryption.
   #ifndef IFC_WIFI_WEP_KEYNUM
   	#define IFC_WIFI_WEP_KEYNUM			0
   #endif

   // IFC_WIFI_MODE can be defined as IFPARAM_WIFI_INFRASTRUCTURE or
   // IFPARAM_WIFI_ADHOC
   #ifndef IFC_WIFI_MODE
      #define IFC_WIFI_MODE			IFPARAM_WIFI_INFRASTRUCTURE
   #endif

   // IFC_WIFI_SSID is the name of the Service Set you prefer to connect to.
   // Length of string can be 0-32 characters.  Set the SSID option to
   // restrict it to a specific access point (again, the channel can be
   // chosen automatically).  See the WiFi documentation for more configuration
   // information.
   #ifndef IFC_WIFI_SSID
         #warnt "IFC_WIFI_SSID has not been defined.  Using a default of \"rabbitTest\"."
         #warnt "   Perform a function lookup (ctrl-H) on TCPCONFIG for more information."
   	#define IFC_WIFI_SSID          "rabbitTest"
	#endif

   // IFC_WIFI_ROAM_ENABLE specified is WiFi roaming is enabled.
   // See the WiFi documentation for more configuration information.
   #ifndef IFC_WIFI_ROAM_ENABLE
      #define IFC_WIFI_ROAM_ENABLE   1
      #endif

   // IFC_WIFI_ROAM_BEACON_MISS specified the number of continuous
   // missed beacons in order for driver to try and scan and associate with
   // a better access point.
   // See the WiFi documentation for more configuration information.
   #ifndef IFC_WIFI_ROAM_BEACON_MISS
      #define IFC_WIFI_ROAM_BEACON_MISS 20
	#endif

	// IFC_WIFI_CHANNEL sets the channel (0, or 1 - 14) to use.  Must be non-zero
	// for an ad-hoc network.  It should usually be 0 (automatic) when in
	// infrastructure mode.
   #ifndef IFC_WIFI_CHANNEL
	   #define IFC_WIFI_CHANNEL	0	// Channel 0 through 14. Note that different
	#endif   								// regions have different channel usage
                                    // restrictions. Please check your country's
                                    // RF regulatory commission for appropriate
                                    // channels to use for IEEE 802.11 networks.


   // This sets country information at compile time for allowable channels
   // and power level limit. By default, this is set for the Americas,
   // allowable channels 1 - 11, and power limit is less than 20dbm.
   //
   // Due to varying regulations in different countries, the region may need
   // to be altered. See the function help ifconfig() IFS_WIFI_REGION for
   // other predefined region macros.

	#ifndef IFC_WIFI_REGION
   	#define IFC_WIFI_REGION IFPARAM_WIFI_REGION_AMERICAS
   #endif

	// Set the fragmentation threshold.  This can be between 256 and 2346, where
	// 0 is the default (no fragmentation).
	#ifndef IFC_WIFI_FRAG_THRESHOLD
		#define IFC_WIFI_FRAG_THRESHOLD	0
	#endif

	// Set the RTS threshold (the frame size at which the RTS/CTS mechanism
	// is used).  Its range is 1-2347, where 2347 is the default (no RTS/CTS).
	#ifndef IFC_WIFI_RTS_THRESHOLD
		#define IFC_WIFI_RTS_THRESHOLD	2347
	#endif

   // IFC_WIFI_ENCRYPTION set to one of
   //    IFPARAM_WIFI_ENCR_ANY			Use any type of encryption
   //    IFPARAM_WIFI_ENCR_NONE			No encryption used
   //    IFPARAM_WIFI_ENCR_WEP			Use WEP encryption (see below to set keys)
   //    IFPARAM_WIFI_ENCR_TKIP			Use TKIP encryption (WPA)
   //    IFPARAM_WIFI_ENCR_CCMP			Use CCMP encryption (WPA2)
   // TKIP and CCMP can only be used if you define WIFI_USE_WPA (see next)

	#ifndef IFC_WIFI_ENCRYPTION
   	#define IFC_WIFI_ENCRYPTION		IFPARAM_WIFI_ENCR_NONE
   #endif

   // WIFI_USE_WPA must be defined to compile in WPA (WiFi Protected Access)
   // support.  This is not defined by default, since it brings in quite a lot
   // of code and adds considerable run-time overhead.  However, it is
   // recommended if security from eavesdropping and/or active attacks are
   // required for the application.  If using WPA, you must define WIFI_USE_WPA
   // and a passphrase - see below.  The passphrase can be specified at compile
   // time with either IFC_WIFI_WPA_PSK_HEXSTR or IFC_WIFI_WPA_PSK_PASSPHRASE.
   // To specify a passphrase at run time, see ifconfig() and the
   // IFS_WIFI_WPA_PSK_HEXSTR and IFS_WIFI_WPA_PSK_PASSPHRASE commands.
   //
   // Must define WIFI_USE_WPA when using CCMP(AES) and/or TKIP
   //#define WIFI_USE_WPA   (automatically enables TKIP encryption)
   //
   // When using CCMP(AES) must also define the following:
   //#define WIFI_AES_ENABLED

   // IFC_WIFI_AUTH_MODE specifies which authentication algorithm to use when
   // connecting to another BSS.  Choose from IFPARAM_WIFI_AUTH_ANY,
   // IFPARAM_WIFI_AUTH_OPEN, IFPARAM_WIFI_AUTH_SHAREDKEY,
   // IFPARAM_WIFI_WPA_PSK or IFPARAM_WIFI_AUTH_WPA_8021X
	#ifndef IFC_WIFI_AUTHENTICATION
		#ifdef WPA_USE_EAP
			#if WPA_USE_EAP
   			#define IFC_WIFI_AUTHENTICATION		IFPARAM_WIFI_AUTH_WPA_8021X
   		#else
   			#define IFC_WIFI_AUTHENTICATION		IFPARAM_WIFI_AUTH_OPEN
   		#endif
   	#else
   		#define IFC_WIFI_AUTHENTICATION		IFPARAM_WIFI_AUTH_ANY
   	#endif
   #endif

	// Define an ASCII passphrase here, from 1 to 63 characters inclusive.
	// This is only used if you did NOT specify a hexadecimal key (see below,
	// for the IFC_WIFI_WPA_PSK_HEXSTR macro).  The passphrase will be combined
   // with the SSID at run-time and converted into a binary key using a
	// complex algorithm with runs for 17 seconds on the RCM4400W.
	//#define IFC_WIFI_WPA_PSK_PASSPHRASE "now is the time"

	// If you specify a hex key here, it is used instead of the passphrase
	// above.  Hex keys should be exactly 64 hex digits long (i.e. 32 bytes).
	// Following is valid for "now is the time" used with SSID="parvati".
	// NOTE: see samples\rcm4400w\tcpip\passphrase.c for more details.
	//#define IFC_WIFI_WPA_PSK_HEXSTR \
	//        "75BA7FD02288E764DCE26382768F58BE96EBB59B8CB952C871AED8B0356922E8"

	// Here is a simple key for testing
	//#define IFC_WIFI_WPA_PSK_HEXSTR \
	//        "1010101010101010101010101010101010101010101010101010101010101010"

	// You do not have to hard-code keys as a string.  You can
	// also refer to a program variable as in the following...
	// (note that passphrases are conventionally limited to 63 characters).
	//char my_psk[64];
	//#define IFC_WIFI_WPA_PSK_HEXSTR my_psk

   #ifndef WIFI_USE_WPA
		#define IFC_WPA_PSK IFS_NOP
	#else
	   #ifdef IFC_WIFI_WPA_PSK_HEXSTR
	      #define IFC_WPA_PSK IFS_WIFI_WPA_PSK_HEXSTR, IFC_WIFI_WPA_PSK_HEXSTR
	      #ifdef IFC_WIFI_WPA_PSK_PASSPHRASE
	         #warnt "Both IFC_WIFI_WPA_PSK_HEXSTR and IFC_WIFI_WPA_PSK_PASSPHRASE are defined."
	         #warnt "   Only the value for IFC_WIFI_WPA_PSK_HEXSTR will be used."
	         #undef IFC_WIFI_WPA_PSK_PASSPHRASE
	      #endif
      #else
      	#ifdef IFC_WIFI_WPA_PSK_PASSPHRASE
				#define IFC_WPA_PSK IFS_WIFI_WPA_PSK_PASSPHRASE, IFC_WIFI_WPA_PSK_PASSPHRASE
         #else
         	#define IFC_WPA_PSK IFS_NOP		// no PSK defined, nothing to set
         #endif
	   #endif
	#endif

	#define IFC_WPA_EAP			IFS_NOP
	#ifdef WIFI_USE_WPA
		#ifdef WPA_USE_EAP
			#ifndef IFC_WIFI_IDENTITY
				#define IFC_WIFI_IDENTITY ""
			#endif
			#ifndef IFC_WIFI_ANONYMOUS_IDENTITY
				#define IFC_WIFI_ANONYMOUS_IDENTITY ""
			#endif
			#ifndef IFC_WIFI_PASSWORD
				#define IFC_WIFI_PASSWORD ""
			#endif
			#ifndef IFC_WIFI_CA_CERT_XIM
				#define IFC_WIFI_CA_CERT_XIM 			0L
			#endif
			#ifndef IFC_WIFI_CLIENT_CERT_XIM
				#define IFC_WIFI_CLIENT_CERT_XIM 	0L, 0L
			#endif
			#ifndef IFC_WIFI_WPA_PROTOCOL
				#define IFC_WIFI_WPA_PROTOCOL IFPARAM_WIFI_WPA_PROTOCOL_ALL
			#endif
			#ifndef IFC_WIFI_EAP_METHODS
				// By default, allow all implemented methods
				#define IFC_WIFI_EAP_METHODS  WPA_USE_EAP
			#endif
			#ifndef IFC_WIFI_EAP_TLS_FLAGS
				#define IFC_WIFI_EAP_TLS_FLAGS 		0x0000
			#endif

			#undef IFC_WPA_EAP
			#define IFC_WPA_EAP \
				IFS_WIFI_EAP_METHODS, (long)(IFC_WIFI_EAP_METHODS),\
				IFS_WIFI_EAP_TLS_FLAGS, (word)(IFC_WIFI_EAP_TLS_FLAGS), \
				IFS_WIFI_IDENTITY, IFC_WIFI_IDENTITY,					\
				IFS_WIFI_ANONYMOUS_IDENTITY, IFC_WIFI_ANONYMOUS_IDENTITY,	\
				IFS_WIFI_PASSWORD, IFC_WIFI_PASSWORD,					\
				IFS_WIFI_CA_CERT_XIM, IFC_WIFI_CA_CERT_XIM,			\
				IFS_WIFI_CLIENT_CERT_XIM, IFC_WIFI_CLIENT_CERT_XIM,\
				IFS_WIFI_WPA_PROTOCOL, IFC_WIFI_WPA_PROTOCOL,      \
				IFS_NOP

		#endif
	#endif

   #define WIFI_INIT ifconfig (IF_WIFI0,         					\
      IFS_WIFI_SSID, strlen(IFC_WIFI_SSID), IFC_WIFI_SSID,     \
		IFS_WIFI_ROAM_ENABLE, IFC_WIFI_ROAM_ENABLE,					\
		IFS_WIFI_ROAM_BEACON_MISS, IFC_WIFI_ROAM_BEACON_MISS,		\
      IFS_WIFI_MODE, IFC_WIFI_MODE,                            \
      IFS_WIFI_CHANNEL, IFC_WIFI_CHANNEL,                      \
      IFS_WIFI_FRAG_THRESHOLD, IFC_WIFI_FRAG_THRESHOLD,			\
      IFS_WIFI_RTS_THRESHOLD, IFC_WIFI_RTS_THRESHOLD,				\
      IFS_WIFI_ENCRYPTION, IFC_WIFI_ENCRYPTION,                \
      IFS_WIFI_AUTHENTICATION, IFC_WIFI_AUTHENTICATION,			\
      IFS_WIFI_WEP_KEYNUM, IFC_WIFI_WEP_KEYNUM,                \
      IFC_WEP_KEY0, IFC_WEP_KEY1, IFC_WEP_KEY2, IFC_WEP_KEY3,	\
      IFC_WPA_PSK,															\
      IFC_WPA_EAP,															\
      IFS_END);
   /*
    * End WiFi Configuration
    */
#endif


	// TCPCONFIG == 1: Static IP address configurations for Ethernet or WiFi
	//  Note: it is possible (on the RCM6000 etc.) to have both Ethernet and
	//  WiFi interfaces.  In this case, IF_ETH0 is the primary (and default)
	//  interface, and the wifi interface must have its IP settings defined
	//  using _SECONDARY_STATIC_IP etc.
	#if TCPCONFIG == 1
		/*
		 * Config 1: Simple static configuration of single ethernet interface
		 */
		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_IPADDR,aton(_ETH_STATIC_IP), \
	            IFS_NETMASK,aton(_ETH_NETMASK), \
	            IFS_UP
		#endif

		#if WIFI_ONBOARD
	      #define USE_WIFI     1
	      #define IFCONFIG_WIFI0 \
	            IFS_IPADDR,aton(_WIFI_STATIC_IP), \
	            IFS_NETMASK,aton(_WIFI_NETMASK), \
	            IFS_UP
		#endif
	#endif

	#if TCPCONFIG == 2
		/*
		 * Config 2: Simple configuration with serial PPP interface on serial port C.
		 */
		#define USE_PPP_SERIAL	0x04		// Serial port C
		#define PPP_SPEED			19200L

	#endif

	#if TCPCONFIG == 3
		/*
		 * Config 3: Dynamic configuration of single ethernet interface using DHCP.
		 *           No fallbacks.
		 */
		#define USE_DHCP
		#define DHCP_NUM_SMTP 1		// Get an SMTP server if possible
		#define DHCP_CLASS_ID "Rabbit-TCPIP:Z-World:DHCP-Test:1.0.0"
		#define DHCP_CLIENT_ID_MAC

		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DHCP, 1, \
	            IFS_UP
		#endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DHCP, 1, \
	            IFS_UP
		#endif

	#endif

	#if TCPCONFIG == 4
		/*
		 * Config 4: Static configuration of both ethernet (or wifi) and PPP over
		 *  serial port C.
		 */
		#define USE_PPP_SERIAL	0x04		// Serial port C
		#define PPP_SPEED			19200L
		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_IPADDR,aton(_ETH_STATIC_IP), \
	            IFS_NETMASK,aton(_ETH_NETMASK), \
	            IFS_UP
	   #endif
		#if WIFI_ONBOARD
	      #define USE_WIFI     1
	      #define IFCONFIG_WIFI0 \
	            IFS_IPADDR,aton(_WIFI_STATIC_IP), \
	            IFS_NETMASK,aton(_WIFI_NETMASK), \
	            IFS_UP
		#endif

	#endif

	// TCPCONFIG == 5: Dynamic IP address configurations for Ethernet or WiFi
	#if TCPCONFIG == 5
		/*
		 * Config 5: Dynamic configuration of single ethernet interface using DHCP.
		 *           Same as config #3, except does not predefine any of the
		 *           optional flags.  This is a "blank slate" setting.
		 */
      #define USE_DHCP

		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DHCP, 1, \
	            IFS_UP
	   #endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DHCP, 1, \
	            IFS_UP
	   #endif
	#endif

	#if TCPCONFIG == 6
		/*
		 * Config 6: Empty Ethernet config that sets up nothing.  This is
		 *           useful if all configuration will be done at run-time.
		 */
		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DOWN
		#endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DOWN
		#endif

	#endif

	#if TCPCONFIG == 7
		/*
		 * Config 7: DHCP Config with fallback to static address.
		 *
		 */

		#define USE_DHCP

		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET 1
	      #define  IFCONFIG_ETH0        \
	            IFS_DHCP, 1, \
	            IFS_IPADDR,aton(_ETH_STATIC_IP), \
	            IFS_NETMASK,aton(_ETH_NETMASK), \
	            IFS_DHCP_FALLBACK, 1, \
	            IFS_UP
		#endif
		#if WIFI_ONBOARD
	      #define USE_WIFI 1
	      #define  IFCONFIG_WIFI0        \
	            IFS_DHCP, 1, \
	            IFS_IPADDR,aton(_WIFI_STATIC_IP), \
	            IFS_NETMASK,aton(_WIFI_NETMASK), \
	            IFS_DHCP_FALLBACK, 1, \
	            IFS_UP
		#endif

	#endif

	#if TCPCONFIG == 8
		/*
		 * Config 8: PPP over serial port B, with typical 57.6k Hayes-compatible modem handling.
		 * DTE speed is set to 115200bps.
       * Hardware flow control used, with CTS pin is assumed to be on PB0, RTS pin on PB6.
       * This should be used as a template for your own configuration, since there are so
       * many possibilities.
		 */

	   #define USE_PPP_SERIAL 0x02      // 0x02 for SERB, 0x04 for SERC, 0x08 for SERD, 0x10 for SERE
	   #define IFCONFIG_PPP1   IFS_PPP_SPEED, 115200L, \
	                           IFS_PPP_RTSPIN, PBDR, NULL, 6, \
	                           IFS_PPP_CTSPIN, PBDR, 0, \
	                           IFS_PPP_FLOWCONTROL, 1, \
	                           IFS_PPP_REMOTEAUTH, "isp_logonid", "mY_PAsSwOrD", \
	                           IFS_PPP_SENDEXPECT, "ATZ0E0 OK ATDT5555555 #ogin: %0 #word: %1 ~", \
	                           IFS_PPP_MODEMESCAPE, 1, \
	                           IFS_PPP_HANGUP, "ATH0 #ok", \
	                           IFS_PPP_PASSIVE, 0, \
	                           IFS_PPP_USEMODEM, 1, \
	                           IFS_PPP_REMOTEIP, 0x0A0A0A01, \
	                           IFS_UP
	#endif

	#if TCPCONFIG == 9
		/*
		 * Config 9: Device Cloud recommended setting.  Like config 6, except
		 *           brings in DHCP.
		 */
		#define USE_DHCP
      #define USE_LOOPBACK	1
      #define IFCONFIG_LOOPBACK IFS_UP
		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DOWN
		#endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DOWN
		#endif

	#endif

	#if TCPCONFIG == 11
		/*
		 * Config 11: Like (1), plus loopback
		 */
      #define USE_LOOPBACK	1
      #define IFCONFIG_LOOPBACK IFS_UP

		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_IPADDR,aton(_ETH_STATIC_IP), \
	            IFS_NETMASK,aton(_ETH_NETMASK), \
	            IFS_UP
		#endif

		#if WIFI_ONBOARD
	      #define USE_WIFI     1
	      #define IFCONFIG_WIFI0 \
	            IFS_IPADDR,aton(_WIFI_STATIC_IP), \
	            IFS_NETMASK,aton(_WIFI_NETMASK), \
	            IFS_UP
		#endif
	#endif

	#if TCPCONFIG == 15
		/*
		 * Config 15: Like (5), plus loopback
		 */
      #define USE_DHCP
      #define USE_LOOPBACK	1

      #define IFCONFIG_LOOPBACK IFS_UP

		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DHCP, 1, \
	            IFS_UP
	   #endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DHCP, 1, \
	            IFS_UP
	   #endif
	#endif

	#if TCPCONFIG == 16
		/*
		 * Config 15: Like (6), plus loopback
		 */
      #define USE_LOOPBACK	1
      #define IFCONFIG_LOOPBACK IFS_UP
		#if ETHERNET_ONBOARD
	      #define USE_ETHERNET    1
	      #define IFCONFIG_ETH0 \
	            IFS_DOWN
		#endif
		#if WIFI_ONBOARD
	      #define USE_WIFI    1
	      #define IFCONFIG_WIFI0 \
	            IFS_DOWN
		#endif

	#endif



#endif

#ifdef USE_DHCP
	#define NUM_DHCP_IF (ETHERNET_ONBOARD + WIFI_ONBOARD)
   #if NUM_DHCP_IF < 1
   	// Min 1, else compilation problems
   	#undef NUM_DHCP_IF
      #define NUM_DHCP_IF 1
   #endif
#endif

#endif	// TCP_CONFIG_H
/*** EndHeader */