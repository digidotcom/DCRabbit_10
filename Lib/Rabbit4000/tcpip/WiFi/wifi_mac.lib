/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11b wireless network interface
// MAC layer internal defines
//
// This includes MAC data structures used by the rest of the driver.

/*** BeginHeader */
#ifndef _WIFI_MAC_LIB
#define _WIFI_MAC_LIB
/*** EndHeader */

/*** BeginHeader */

#use "crc32.lib"

#use "wifi_mac_api.lib"

//
// Implementation constants
//
#define	_WIFI_RXCACHE_NUM			10		// Receive cache size

#define	_WIFI_TIMER_PERIOD		50		// MAC timer period (in msecs)

#define	_WIFI_MGMT_PERIOD			500	// Management timer period (in msecs)
#define	_WIFI_MGMT_RETRY_LIMIT	4		// Management frame retry limit

#ifndef _WIFI_SCAN_PERIOD
	#define	_WIFI_SCAN_PERIOD			5		// Active scan timer period (in msecs)
#endif

#ifndef _WIFI_SCAN_LIMIT
	#define	_WIFI_SCAN_LIMIT			3		// Scan ticks per channel
#endif

#define	_WIFI_SCAN_MIN_TIME		5000	// Min time between scans (in msecs)
#define	_WIFI_SCAN_MAX_TIME		90000	// Max scan data lifetime (in msecs)

#ifdef WIFIG_VERBOSE
#define	_WIFI_IR_TIMEOUT			1500	// Trasmitter idle timeout (in msecs)
#else
#define	_WIFI_IR_TIMEOUT			500	// Trasmitter idle timeout (in msecs)
#endif
#define	_WIFI_MICFAIL_TIMEOUT	60000	// MIC failure timer (in msecs)

#define	_WIFI_BEACON_INT			100	// IBSS Beacon interval in TU

#ifndef _WIFI_RSSI_SCALE_SHIFT
   #define	_WIFI_RSSI_SCALE_SHIFT	5	// RSSI samples to average as a power of 2
#endif
#ifndef _WIFI_RSSI_SCALE
                                       // Number of RSSI samples to average
   #define	_WIFI_RSSI_SCALE		(1u<<_WIFI_RSSI_SCALE_SHIFT)
#endif

#define	_WIFI_REPLAY_WINDOW		16		// TKIP/CCMP replay window size


// Preferred SSID if searching for any SSID
#define	_WIFI_PREF_SSID			"Connect"
#define	_WIFI_PREF_SSID_LEN		((sizeof _WIFI_PREF_SSID)-1)

//
// 802.11 MIB constants
//
#define	_WIFI_SHORT_RETRY_LIMIT	7			// Small frame transmit retry limit
#define	_WIFI_LONG_RETRY_LIMIT	4			// Large frame transmit retry limit

#define	_WIFI_CW_MIN				31			// Min contention window size
#define	_WIFI_CW_MAX				1023		// Max contention window size

#define 	_WIFI_TU						1024L/1000	// Time unit (in msecs)
#define	_WIFI_MAX_TX_LIFETIME		(512*_WIFI_TU)	// Transmit lifetime limit
																	// (in msecs)
#define	_WIFI_MAX_RX_LIFETIME		(512*_WIFI_TU)	// Receive lifetime limit
																	// (in msecs)

//
// 802.11 MAC frame formats
//
#define	_WIFI_IV_SIZE			4		// Initialization vector size
#define	_WIFI_EXT_IV_SIZE		8		// IV and extended IV size
#define	_WIFI_ICV_SIZE			4		// Integrity check value size
#define	_WIFI_MIC_SIZE			8		// Message integrity check size
#define	_WIFI_FCS_SIZE			4		// FCS (CRC-32) size

#define	_WIFI_WEP_SIZE			(_WIFI_IV_SIZE+_WIFI_ICV_SIZE)		// Total WEP size
#define	_WIFI_TKIP_SIZE		(_WIFI_EXT_IV_SIZE+_WIFI_ICV_SIZE)	// Total TKIP size
#define	_WIFI_CCMP_SIZE		(_WIFI_EXT_IV_SIZE+_WIFI_MIC_SIZE)	// Total CCMP size

#define _WIFI_TKIP_KEY_SIZE	32		// TKIP/MIC key size
#define _WIFI_CCMP_KEY_SIZE	16		// CCMP key size

#define	_WIFI_CHAL_SIZE		128	// Authentication challenge size

#define	_WIFI_RTS_SIZE			20		// RTS frame size
#define	_WIFI_CTS_SIZE			14		// CTS frame size
#define	_WIFI_DATA_SIZE		28		// Data frame header+FCS size
#define	_WIFI_ACK_SIZE			14		// ACK frame size

// Max total MAC frame size
#define	_WIFI_MAX_FRAME_SIZE	(_WIFI_DATA_SIZE+_WIFI_BUF_SIZE+_WIFI_TKIP_SIZE+_WIFI_MIC_SIZE)

#define	_WIFI_SNAP_SIZE		8		// LLC/SNAP header size, including
												// "Ethernet" type field (2)
#if _WIFI_SILKEN_DAC
	#define	_WIFI_BUF_SIZE			(MAX_MTU+_WIFI_SNAP_SIZE+10)
#else
	#define	_WIFI_BUF_SIZE			(MAX_MTU+_WIFI_SNAP_SIZE)
#endif

// Max number of fragments
#define	_WIFI_MAX_FRAGS		16

// Frame header modulation type field
#define	_WIFI_MOD_PSKCCK			0x00	// PSK/CCK modulation
#define	_WIFI_MOD_OFDM				0xee	// OFDM modulation

// PSK/CCK PLCP service field bits
#define	_WIFI_SERVICE_LOCKED		0x04	// Locked clocks
#define	_WIFI_SERVICE_MODSEL		0x08	// Modulation selection
#define	_WIFI_SERVICE_LENEXT		0x80	// Length extension

// MAC type field values
#define	_WIFI_TYPE_ASSOC_REQ		0x00	// Association request
#define	_WIFI_TYPE_ASSOC_RESP	0x10	// Association response
#define	_WIFI_TYPE_REASSOC_REQ	0x20	// Reassociation request
#define	_WIFI_TYPE_REASSOC_RESP	0x30	// Reassociation response
#define	_WIFI_TYPE_PROBE_REQ		0x40	// Probe request
#define	_WIFI_TYPE_PROBE_RESP	0x50	// Probe response

#define	_WIFI_TYPE_BEACON			0x80	// Beacon
#define	_WIFI_TYPE_ATIM			0x90	// Annoucement traffice indication
#define	_WIFI_TYPE_DISASSOC		0xa0	// Disassociation
#define	_WIFI_TYPE_AUTH			0xb0	// Authentication
#define	_WIFI_TYPE_DEAUTH			0xc0	// Deauthentication

#define 	_WIFI_TYPE_RTS				0xb4	// Request to send
#define 	_WIFI_TYPE_CTS				0xc4	// Clear to send
#define 	_WIFI_TYPE_ACK				0xd4	// Acknowledgement

#define 	_WIFI_TYPE_DATA			0x08	// Data

// TRUE if buf is data or management frame
#define	_WIFI_IS_DATA(buf)		(((buf)->macHdr.fc.type & 0xcf) == _WIFI_TYPE_DATA)
#define	_WIFI_IS_MGMT(buf)		(((buf)->macHdr.fc.type & 0x0f) == 0)

// Use short preamble if allowed in BSS and params and rate > 1 mbps.
#define	_WIFI_USE_SHORTPRE(rate)	((rate) > 0 && \
							 !(_wifi_erpInfo & _WIFI_ERP_BARKER) && \
							 (_wifi_macParams.options & WLN_OPT_SHORTPRE))

// MAC address macros
#define	_WIFI_MAC_GROUP			0x01	// Broadcast or multicast address
#define	_WIFI_MAC_LOCAL			0x02	// Locally administered address

#define	_WIFI_IS_GROUP_ADDR(addr)	((addr)[0] & _WIFI_MAC_GROUP)
#define	_WIFI_EQUAL_ADDR(a1, a2)	(memcmp (a1, a2, WLN_ADDR_SIZE) == 0)
#define	_WIFI_SET_ADDR(a1, a2)		(_f_memcpy (a1, a2, WLN_ADDR_SIZE))

// Authentication algorithm number field values
#define	_WIFI_AUTH_OPEN			0x00	// Open system
#define	_WIFI_AUTH_SHAREDKEY		0x01	// Shared key
#define	_WIFI_AUTH_LEAP			0x80	// LEAP

// Capability information field bits
#define	_WIFI_CAP_ESS				0x01	// Extended service set (infrastructure)
#define	_WIFI_CAP_IBSS				0x02	// Independent BSS (ad hoc)
#define	_WIFI_CAP_POLLABLE		0x04	// Contention free pollable
#define	_WIFI_CAP_POLLREQ			0x08	// Contention free poll request
#define	_WIFI_CAP_PRIVACY			0x10	// Privacy (WEP) required
#define	_WIFI_CAP_SHORTPRE		0x20	// Short preambles allowed
#define	_WIFI_CAP_PBCC				0x40	// PBCC modulation allowed
#define	_WIFI_CAP_AGILITY			0x80	// Channel agility in use
#define	_WIFI_CAP_SHORTSLOT		0x0400	// Short slot time in use
#define	_WIFI_CAP_DSSSOFDM		0x2000	// DSSS-OFDM in use

// Status code field values
#define	_WIFI_STAT_SUCCESS		0

// Reason code field values
#define	_WIFI_REAS_NOLONGERVALID	2
#define	_WIFI_REAS_DEAUTH_LEAVING	3
#define	_WIFI_REAS_INACTIVITY		4

// Information element IDs
#define	_WIFI_ELEM_SSID			0		// Service set ID
#define	_WIFI_ELEM_SUPRATES		1		// Supported rates
#define	_WIFI_ELEM_DSPARAM		3		// DS parameter set
#define	_WIFI_ELEM_IBSSPARAM		6		// IBSS parameter set
#define  _WIFI_ELEM_COUNTRY      7     // Country information
#define	_WIFI_ELEM_CHALLENGE		16		// Challenge text
#define 	_WIFI_ELEM_ERPINFO		42		// Extended rate PHY info
#define 	_WIFI_ELEM_RSN				48		// Robust security network (WPA2)
#define	_WIFI_ELEM_EXTSUPRATES	50		// Extended supported rates
#define 	_WIFI_ELEM_VENDOR			221	// Vendor extension (WPA)

// 802.11d related defines
// minimum length field value in country information elelment
#define _WIFI_COUNTRY_INFO_MIN_LEN   6

// Supported rates bits
#define	_WIFI_RATE_BASIC			0x80	// Bit set if basic rate

// TRUE if channel number in 5 GHz band
#define	_WIFI_CHAN_5G(chan)		((chan) > 14)

// ERP info bits
#define	_WIFI_ERP_NONERP			0x01	// Non-ERP present
#define	_WIFI_ERP_USEPROTECT		0x02	// Use protection
#define	_WIFI_ERP_BARKER			0x04	// Barker (long) preamble mode

// WPA/RSN info length field
#define	wpa_info_len		wpa_info[1]

// Key ID byte in data frame body
#define	_WIFI_EXT_IV				0x20	// Extended IV is present

// Correct CRC-32 check value
#define	_WIFI_GOOD_CRC32			0x2144df1c

// These macros help get bit fields within header structures.
#define _WIFI_GET_FIELDx(x, offset, mask)	(((x) >> (offset)) & (mask))
#define _WIFI_GET_FIELD(x, field)   _WIFI_GET_FIELDx(x, field)

//
// 802.11 MAC frame structures.
// These structures lay out a complete PLCP/MAC frame in a single memory region.
// They are compiler dependent.
//


// Receive frame header

// Offsets within the 8-bit rssInfo field and the masks needed for each field
#define _WIFI_RX_RSSI_VGA			0,0x1f
#define _WIFI_RX_RSSI_LNA			5,0x03
#define _WIFI_RX_RECV_ANTENNA		7,0x01
typedef struct {
	uint8 modType;			// Modulation type
   uint8 rssiInfo;		// RSSI VGA setting (5 bits)
                        // RSSI LNA setting (2 bits)
                        // Receive antenna indicator (1 bit)
   int16 freqOff;			// Frequency offset
} WiFiRxFrameHeader;


// Transmit frame header

// Offset within the 16-bit length field and the mask needed for length
#define _WIFI_TX_LENGTH		0,0x1FF
typedef struct {
	uint8 modType;		// Modulation type
	uint16 length;		// Length in words (9 bits)
   						// Padding (7 bits)
	uint8 _pad;			// Padding
} WiFiTxFrameHeader;

// Union of frame header types
typedef union {
	WiFiRxFrameHeader rx;	// Receive frame header
	WiFiTxFrameHeader tx;	// Transmit frame header (needs byte swap)
	uint32 hdr32;				// Frame header as 32-bit int
} WiFiFrameHeader;

// PSK/CCK PLCP header
typedef struct {
	uint8	signal;			// Signal (rate in 100 kbps)
	uint8	service;			// Service: OR of SERVICE_xxx
	uint16	length;		// Length in usecs (needs byte swap)
} WiFiPskCckHeader;

// OFDM PLCP header

// Offsets within the 32-bit info field and the masks needed for each field
#define _WIFI_OFDM_RATE		0, 0x000f
#define _WIFI_OFDM_LENGTH	5, 0x0fff
#define _WIFI_OFDM_PARITY	17,0x0001
typedef struct {
	uint32 info;		// Data rate (4 bits)
   		 				// Reserved (1 bit)
                     // Length in bytes (12 bits)
                     // Even parity bit (1 bit)
                     // Padding (14 bits)
} WiFiOfdmHeader;

// Union of PLCP header types
typedef union {
	WiFiPskCckHeader pskcck;		// PLCP header for PSK/CCK
	WiFiOfdmHeader ofdm;			// PLCP header for OFDM (needs byte swap)
	uint32 plcp32;				// PLCP header as 32-bit int
} WiFiPlcpHeader;

// Frame control field

// Flags for the flags field
#define _WIFI_FCNTRL_TODS		0x01	// To distribution service (AP)
#define _WIFI_FCNTRL_FROMDS	0x02	// From distribution service (AP)
#define _WIFI_FCNTRL_MOREFRAG	0x04	// More fragments
#define _WIFI_FCNTRL_RETRY		0x08 	// Retransmission
#define _WIFI_FCNTRL_PWRMGT	0x10	// Power management state
#define _WIFI_FCNTRL_MOREDATA	0x20	// More data buffered
#define _WIFI_FCNTRL_PROTECT	0x40	// Encrypted
#define _WIFI_FCNTRL_ORDER		0x80	// Strictly ordered
typedef struct {
	uint8 type;		// Type, subtype, version
   uint8 flags;	// To distribution service (AP)
   					// From distribution service (AP)
                  // More fragments
                  // Retransmission
                  // Power management state
                  // More data buffered
                  // Encrypted
                  // Strictly ordered
} WiFiFrameControl;

// MAC address
typedef uint8 MacAddr[WLN_ADDR_SIZE];

// Sequence control field

// Offsets within the 16-bit info field and the masks needed for each field
#define _WIFI_SEQCNTRL_FRAG	0,0x000f
#define _WIFI_SEQCNTRL_SEQ		4,0x0fff
typedef struct {
	uint16 info;		// Fragment number (4 bits)
   						// Sequence number (12 bits)
} WiFiSeqControl;

// Union of sequence control types
typedef union {
	WiFiSeqControl sq;		// Sequence control fields
	uint16 sq16;				// Sequence control as 16-bit int (needs byte swap)
} WiFiSeqControlU;

// MAC header
typedef struct {
	WiFiFrameControl fc;			// Frame control
	uint16	duration;			// Duration/ID (needs byte swap)
	MacAddr	addr1;				// Address 1
	MacAddr	addr2;				// Address 2
	MacAddr	addr3;				// Address 3
	WiFiSeqControlU squ;			// Sequence control fields
} WiFiMacHeader;

// MAC buffer, including complete MAC frame
typedef struct WiFiMacBuffer {
	ll_prefix __far * LL;					// Root buffer prefix info
	struct  WiFiMacBuffer __far  * next;		// Next buffer in list
	uint16	length;					// Length including MAC header, body, FCS
	uint8	rx_signal;					// Received signal strength
	uint8	tx_rate;						// Transmit rate index

	WiFiFrameHeader	frameHdr;	// Frame header
	WiFiPlcpHeader	plcpHdr;			// PLCP header
	WiFiMacHeader	macHdr;			// MAC header

	// IV, body, MIC, ICV, FCS
	uint8 	body[_WIFI_TKIP_SIZE+_WIFI_MIC_SIZE+_WIFI_FCS_SIZE];
	// Additional _WIFI_BUF_SIZE bytes of body follow
} WiFiMacBuffer;

#if CPU_ID_MASK(_CPU_ID_) == R5000
	// includes 10 bytes for SILKEN_DAC
	#define _WIFI_OVERHEAD	(sizeof(WiFiMacBuffer) + _WIFI_SNAP_SIZE + 10)
#else
	#define _WIFI_OVERHEAD	(sizeof(WiFiMacBuffer) + _WIFI_SNAP_SIZE)
#endif
#if WIFI_OVERHEAD != _WIFI_OVERHEAD
	#fatal "WIFI_OVERHEAD (in net.lib) calculation is incorrect!"
#endif

// LLC/SNAP (802.2) header on data frames
typedef struct
{
    uint8	dsap;
    uint8	ssap;
    uint8	control;
    uint8	oui[3];
    uint16	eptype;
} WiFiLLC_SNAP;

#define	_WIFI_SAP_SNAP	0xaa		// Subnetwork address protocol
#define _WIFI_XDLC_U		0x03		// Unnumbered frame

#define	_WIFI_EP_8021X	_WIFI_SWAP16(0x8e88)	// 802.1x (EAPOL) protocol type

// Ethernet (802.3) MAC header
typedef struct
{
	MacAddr	dst;
	MacAddr	src;
	uint16	eptype;
	uint8 data;
} WiFiether_hdr;

//
// Internal defines
//

// Transmitter state
typedef enum {
	_WIFI_ST_IDLE,		// Transmitter idle
	_WIFI_ST_CTS,		// Sent RTS, waiting for CTS
	_WIFI_ST_ACK,		// Sent data, waiting for ACK
	_WIFI_ST_BC,		// Sent BC data, waiting for txEnd
	_WIFI_ST_BUSY,		// Sent frame, waiting for txEnd
} WiFiTxState;

// IBSS beacon/ATIM state
typedef enum {
	_WIFI_SB_DATA,		// Data frames allowed
	_WIFI_SB_TBTT,		// Time to transmit beacon
	_WIFI_SB_BEACON,	// Transmitting beacon
	_WIFI_SB_ATIM,		// ATIM window
} WiFiBcnState;

// Station management state
typedef enum {
	_WIFI_SS_WAIT,		// Waiting to restart
	_WIFI_SS_SCAN,		// Scanning
	_WIFI_SS_BEACON,	// Waiting to receive beacon
	_WIFI_SS_JOIN,		// Joined a BSS
	_WIFI_SS_AUTH,		// Authenticated
	_WIFI_SS_ASSOC,	// Associated with AP or joined IBSS
} WiFiStaState;

// 802.11 authentication state, in order of method attempted
typedef enum {
	_WIFI_SA_INIT,		// Initial state
	_WIFI_SA_LEAP = _WIFI_SA_INIT,	// LEAP
	_WIFI_SA_SHARED,	// Shared key
	_WIFI_SA_OPEN,		// Open System
	_WIFI_SA_FAIL,		// Above attempts failed
	_WIFI_SA_SHARED2,	// Shared key response
	_WIFI_SA_FAIL2,	// Shared key response failed
} WiFiAuthState;

// Expected event after sending a frame
enum {
	_WIFI_SF_NONE,		// No event
	_WIFI_SF_TXEND, 	// Interrupt on txEnd
	_WIFI_SF_RX,		// Receive a frame
	_WIFI_SF_RX_TX,	// Receive a frame, then transmit another
};

// Encryption cipher operations
typedef struct {
	int ivSize;				// Initialization vector size
	int perMSDU_add;		// Amount added to data payload, per MSDU - this is
	                        // 0, except for TKIP, which adds a MIC of 8 bytes.
	                        // The LLC/SNAP header is always assumed.
	int perMPDU_add;		// Amount added to data payload, per MPDU - including
									// MAC header and FCS.
	BOOL is_TKIP;			// Hack to support TKIP MIC efficiently
	BOOL (*SetKey)  ();
	BOOL (*Encrypt) ();
	BOOL (*Decrypt) ();
} WiFiMacCipher;



// Rate values
#define	_WIFI_RATE_MASK_A			0x0ff0
#define	_WIFI_RATE_MASK_B			0x000f
#define	_WIFI_RATE_MASK_G			0x0fff

#define	_WIFI_RATE_MASK_PSK		0x0003
#define	_WIFI_RATE_MASK_CCK		0x000c
#define	_WIFI_RATE_MASK_OFDM		0x0ff0
// DEVIDEA:  This was originally 0x0153.  It is basically a balance between
// speed and range for ad-hoc broadcasted frames.  This was reduced so that, by
// default, G devices and B devices on the same ad-hoc network could communicate
// via broadcasts.  As it was, a G device would broadcast at the highest rate
// in this mask, which is an OFDM rate.  These frames would not be able to be
// received by an 802.11b device.  This setting probably needs to be made run-
// time configurable.
//
// For now, this setting has been set up so that it can be overridden at
// compile time.  This setting is not currently documented, however.  The value
// currently assigned is 0x0003, which comprises the data rates that we
// currently consider part of the basic set.
#ifndef _WIFI_RATE_MASK_BASIC
	#define	_WIFI_RATE_MASK_BASIC	0x0003	// Ad hoc basic rates
#endif

#define	_WIFI_RATE_MIN_A			4
#define	_WIFI_RATE_MIN_B			0

// Buffer queue
typedef struct {
	__far WiFiMacBuffer  *head;		// Head of queue, NULL if empty
	__far WiFiMacBuffer  *tail;		// Tail of queue if not empty
	int count;							// Number of buffers queued
} WiFiMacQueue;

// Queue macros
#define	_WIFI_TXQ_GET(buf)		((buf) = _wifi_GetQueue (&_wifi_txQueue))
#define	_WIFI_TXQ_PUT(buf)		(_wifi_PutQueue (&_wifi_txQueue, buf))

#define	_WIFI_RXQ_GET(buf)		((buf) = _wifi_GetQueue (&_wifi_rxQueue))
#define	_WIFI_RXQ_PUT(buf)		(_wifi_PutQueue (&_wifi_rxQueue, buf))

#define	_WIFI_GET_TIME()			MS_TIMER

#ifndef WIFIG_VERBOSE
	#define WIFIG_VERBOSE 0
#endif

// Debugging macros
#if WIFIG_VERBOSE
	// First, print out the time in ms.  Then print the following information.
   #define  DPRINTF           /*printf("%lu - ", MS_TIMER);*/ printf
   #define  DPRINTF2          /*printf("%lu - ", MS_TIMER);*/ printf
   #define  DPRINTF3          /*printf("%lu - ", MS_TIMER);*/ printf
   #define  DPRINTF4          /*printf("%lu - ", MS_TIMER);*/ printf
   // Anything more than 4 parms, wrap with #if WIFIG_VERBOSE
#else
	#define DPRINTF(x)
	#define DPRINTF2(x,y)
	#define DPRINTF3(x,y,z)
	#define DPRINTF4(w,x,y,z)
#endif

#ifdef WIFIG_DEBUG
   #define  _WIFI_ASSERT(x)     ((x) ? 0 : (printf("ASSERT FAIL %s:%d:" #x "\n", __FILE__, __LINE__), _wifi_assert_break()))
#else
	#define _WIFI_ASSERT(x)
#endif


// These are required to be counting (nestable) locks.  Do something like
//   int level = _WIFI_DISABLE();
//   ...
//   _WIFI_ENABLE(level);

#define _WIFI_DISABLE() _wc_lock()		// returns nest count
#define _WIFI_ENABLE(x) _wc_unlock(x)	// restores to given nest count


// Host to network byte order macros.
// MAC layer is little endian, so big endian CPUs must swap.
// Rabbit is L.E. so no swap
#define	_WIFI_SWAP16(x)			(x)
#define	_WIFI_SWAP32(x)			(x)
#define	_WIFI_HTON16(x)			_WIFI_SWAP16(x)
#define	_WIFI_NTOH16(x)			_WIFI_SWAP16(x)

// Rabbit note: the following set/get macros used to be in array form, but
// we use a simpler form since the Rabbit doesn't care about alignment...
// Get 16 bits at byte pointer
#define	_WIFI_GET16(bp)				(*(word *)(bp))
#define	_WIFI_GET16_FAR(bp)			(*(word __far *)(bp))
// Store 16 bits at byte pointer
#define	_WIFI_SET16(bp, data)		(*(word *)(bp) = (data))
#define	_WIFI_SET16_FAR(bp, data)	(*(word __far *)(bp) = (data))
// Get 32 bits at byte pointer
#define	_WIFI_GET32(bp)				(*(unsigned long *)(bp))
#define	_WIFI_GET32_FAR(bp)			(*(unsigned long __far *)(bp))
// Store 32 bits at byte pointer
#define	_WIFI_SET32(bp, data)		(*(unsigned long *)(bp) = (data))
#define	_WIFI_SET32_FAR(bp, data)	(*(unsigned long __far *)(bp) = (data))

#use "wifi_mac_buf.lib"
#use "wifi_mac_data.lib"


#if RCM5400W_SERIES || RCM5600W_SERIES
	#use "wifi_piper_hw.lib"
#elif RCM4400W_SERIES
	#use "wifi_rabbitears_hw.lib"
#elif _BOARD_TYPE_ == R6000TESTW || RCM6600W_SERIES
	#use "wifi_chopper_hw.lib"
#endif

#use "wifi_mac_hw.lib"
#use "wifi_mac_ir.lib"
#use "wifi_mac_mgmt.lib"
#use "wifi_mac_rate.lib"
#use "wifi_mac_wep.lib"


#ifdef WIFI_USE_WPA
	#ifdef WPA_USE_EAP
		#use "wpa.lib"
		#use "wifi_drv_eap.lib"
	   #use "wifi_eloop.lib"
	   #use "wifi_sha1.lib"
	   #use "wifi_mac_tkip.lib"
	   #use "wifi_mac_ccmp.lib"
	#else
		// The PSK-only code is from an earlier version of WPA Supplicant,
		// and uses considerably less code space.  Thus, we support it
		// as a separate set of libraries.
	   #use "wifi_config.lib"
	   #use "wifi_driver.lib"
	   #use "wifi_eloop.lib"
	   #use "wifi_sha1.lib"
	   #use "wifi_mac_tkip.lib"
	   #use "wifi_wpa.lib"
	   #use "wifi_wpa_supplicant.lib"
	   #use "wifi_mac_ccmp.lib"
	#endif
#endif


//
// Internal data and fuctions
//

// mac_buf.c
extern WiFiMacQueue _wifi_txQueue;
extern WiFiMacQueue _wifi_rxQueue;

#ifdef WIFI_AES_ENABLED
// mac_ccmp.c
extern const WiFiMacCipher _wifi_ccmpCipher;
BOOL _wifi_CcmpGetData (__far WiFiMacBuffer *buf, _wifi_WiFiCcmpData *data);
#endif


// mac_data.c
extern const WiFiMacCipher _wifi_openCipher;
extern WiFiMacStats _wifi_macStats;
extern int _wifi_maxFragSize;

// mac_drv.c
extern BOOL wln_params_set;

// mac_ir.c
extern WiFiTxState _wifi_txState;
extern WiFiBcnState _wifi_bcnState;
extern uint32 _wifi_bcnTime;
extern WiFiMacBuffer _wifi_ctsFrame;

// mac_mgmt.c
extern wln_params _wifi_macParams;
extern wln_status _wifi_macStatus;
extern __far WiFiMacBuffer *_wifi_bcnFrame;
extern __far WiFiMacBuffer *_wifi_respFrame;
extern WiFiStaState _wifi_staState;
extern uint16 _wifi_bcnInt;
extern uint16 _wifi_atimWindow;
extern uint16 _wifi_basicRates;
extern uint8 _wifi_erpInfo;
extern uint32 _wifi_macRandom;

// mac_rate.c
extern int _wifi_rateTx;
extern int _wifi_rateBC;
extern int _wifi_rateMin;
extern uint8 _wifi_ratesBasic[];
extern int _wifi_rateTxCount;
extern int _wifi_rateErrorCount;


// Keep track of whether or not the ISR has been configured
extern int _wifi_isr_initialized;
/*** EndHeader */

/*** BeginHeader _wifi_assert_break */
int _wifi_assert_break(void);
/*** EndHeader */
__debug int _wifi_assert_break(void)
{
	// This function is merely for the purpose of putting a breakpoint to be hit
	// on any assertion failure.
	return 1;
}

/*** BeginHeader */
#endif // _WIFI_MAC_LIB
/*** EndHeader */

