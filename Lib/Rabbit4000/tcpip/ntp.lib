/* START LIBRARY DESCRIPTION *********************************************
ntp.lib

DESCRIPTION:
  Implementation of an SNTP protocol client according to RFC-1769 for
  Rabbit microprocessor. To use this library you must define the NTP
  servers used as in the following example:

    //Number of servers configured
    #define NSERVERS          4

    // Hostnames (or dotted quad IP addresses) of each time server to query.
    // You can "weight" some servers as being more reliable by mentioning the
    // same server in more than one entry.
    // NOTE: the following addresses were obtained from hosts that were
    // denoted as "open access" (see list at http://ntp.org)
    // to NTP.
    char* server_hosts[NSERVERS] =
    {
      "pool.ntp.org"
      ,"ntp1.cmc.ec.gc.ca"
      ,"time.chu.nrc.ca"
      ,"timelord.uregina.ca"
    };
    #use "ntp.lib"

END DESCRIPTION **********************************************************/

/*** BeginHeader */
/*
  If NTP_SET_TIMER is defined, the set_ntp_time function will change the
  SEC_TIMER counter directly. This can affect other tasks that are using
  DelaySec or IntervalSec functions.

  Otherwise the set_ntp_function will change only the real time clock.
*/
#define NTP_SET_TIMER

#undef DPRINTF
#ifdef NTP_VERBOSE
#define DPRINTF(A) printf A
#else
#define DPRINTF(A)
#endif

/*
  Seconds between RFC1769 epoch (Jan 1, 1900) and Rabbit epoch (Jan 1, 1980).
  There were lots of furry rabbits at that time but, strangely, no silicon ones.
*/
#define EPOCH_DIFF  2524521600UL

#define NTP_PACKET_SIZE   48
#define NTP_TIMEOUT       4000
#define NTP_PORT          123

/*** EndHeader */

/*** BeginHeader format_timestamp*/
char* format_timestamp (uint32 stamp);
/*** EndHeader */

char* format_timestamp (uint32 stamp)
{
  static char b[40];
  static char* const weekdays[7] =
    { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
  static char* const months[12] =
    { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
  struct tm daytime;

  mktm(&daytime, stamp);
  sprintf(b, "%s %s %d %02d:%02d:%02d %d",
    weekdays[daytime.tm_wday],
    months[daytime.tm_mon - 1],
    daytime.tm_mday,
    daytime.tm_hour,
    daytime.tm_min,
    daytime.tm_sec,
    daytime.tm_year + 1900);
  return b;
}

/*** BeginHeader set_ntp_time, ntp_query_server*/
int set_ntp_time (long *padj);
int ntp_query_server (char *server, uint32 *stamp, long *tdiff );
/*** EndHeader */


/* START FUNCTION DESCRIPTION ************************************************
ntp_query_server                                 <ntp.lib>

  Description:  Query an NTP server specified by name or IP address and get
                the timestamp as seconds from 1980 (Rabbit epoch).

  Syntax:       int ntp_query_server (char *server, uint32 *stamp, long *tdiff )

  Parameters:
      server    NTP server name or IP address
      stamp     Pointer to returned timestamp
      tdiff     Pointer to difference between server time and local time

  Return:       Round trip travel time in milliseconds or a negative value if
                an error occurs.

  Note that time difference value is not adjusted for timezone difference.

END DESCRIPTION *************************************************************/

int ntp_query_server (char *server, uint32 *stamp, long *tdiff )
{
  static char packet[NTP_PACKET_SIZE];
  static udp_Socket sock;
  static int sock_opened;
  uint32 rhost, rorig, cnt, lt;
  int rc, delay;
  uint16 rport;
  char serverip[64], tmp[64];

#GLOBAL_INIT { sock_opened = 0; }

  if (!sock_opened)
  {
    if (!(rc = udp_open (&sock, 0, -1, NTP_PORT, NULL)))
    {
      DPRINTF(("Cannot open UDP socket.\n"));
      return -4;
    }
    sock_opened = 1;
  }

  if (!(rhost = resolve(server)))
  {
    DPRINTF (("Cannot resolve host %s.\n", server));
    return -3;
  }
  DPRINTF (("Pooling %s (%s)... ", server, inet_ntoa (serverip, rhost)));

  // set all bytes in the buffer to 0
  memset(packet, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packet[0] = 0x0b;   // LI=0, Version=1, Mode=3
  packet[1] = 0;      // Stratum, or type of clock
  packet[2] = 6;      // Polling Interval
  packet[3] = 0xEC;   // Peer Clock Precision
  // packet+4 (4 bytes) Root Delay = 0
  // packet+8 (4 bytes) Root Dispersion = 0
  // packet+12 (4 bytes) Reference Identifier = 0
  // packet+16 (8 bytes) Reference Timestamp = 0
  cnt = MS_TIMER;
  *(uint32*)(packet+24) = htonl(cnt); //Originate timestamp
  // packet+32 (8 bytes) Receive timestamp = 0

  lt = SEC_TIMER;   //Get local time
  udp_sendto (&sock, packet, NTP_PACKET_SIZE, rhost, NTP_PORT);
  while (MS_TIMER - cnt < NTP_TIMEOUT)
  {
    tcp_tick (NULL);
    rc = udp_peek (&sock, NULL);
    if (rc > 0)
      break;
  }
  if (rc <= 0)
  {
    DPRINTF (("No reply.\n"));
    return -1;
  }
  rc = udp_recvfrom (&sock, packet, NTP_PACKET_SIZE, &rorig, &rport);
  delay = (int)(MS_TIMER - cnt);

  if (rc < NTP_PACKET_SIZE)
  {
    DPRINTF(("Reply too short (%d).\n", rc));
    return -1;
  }
  if (rorig != rhost)
  {
    DPRINTF(("Unexpected reply from %s.\n", inet_ntoa(tmp, rorig)));
    return -1;
  }
  //the timestamp starts at byte 40 of the received packet and is four bytes.
  *stamp = ntohl (*(uint32*)(packet+40));
  *stamp -= EPOCH_DIFF;
  *tdiff = *stamp-lt;
  DPRINTF(("Delay %dms time is %s UTC diff=%ld\n", delay, format_timestamp(*stamp), *tdiff));
  return delay;
}

//Differences between local time and servers' time (Rabbit epoch).
long tdiffs[NSERVERS];

// Flag to indicate whether valid result obtained from corresponding server.
int use_this[NSERVERS];

// Number of valid results remaining.
int nservers;

//Array of configured time servers
extern char* server_hosts[];

/*
  Check received timestamps and discard the worst preforming servers.

  In most cases this is snake oil as NTP servers are fairly reliable, network is
  fast pretty and our resolution (1 sec.) is too low to make any difference.
  The code was in the original TIME.C sample form ZWorld and I decided to keep for now.
*/
void discard_outliers(void)
{
  int i, j, k;
  int minservers;
  float diff;
  float wdiff;
  float mdiff;

  if (nservers >= 3)
    minservers = nservers + 1 >> 1; // Half (rounded up) of the successful servers
  else
    minservers = nservers;

  while (nservers > minservers)
  {
    // Throw away the worst outliers first, until minservers remain.  The
    // "worst outlier" is the one whose sum-of-squares distance from the others
    // is greatest.
    mdiff = 0.0;
    for (i = 0; i < NSERVERS; i++)
      if (!use_this[i])
        continue;
      else
      {
        wdiff = 0.0;
        for (j = 0; j < NSERVERS; j++)
        if (!use_this[j] || i == j)
          continue;
        else
        {
          diff = (long)(tdiffs[j] - tdiffs[i]);
          wdiff += diff * diff;
        }
        if (wdiff > mdiff)
        {
          mdiff = wdiff;
          k = i;
        }
      }
    if (sqrt(mdiff) / nservers < 60)
      // Don't discard any more if within about 60 seconds of each other
      break;
    use_this[k] = 0;
    DPRINTF(("Discarding server %d (%s)\n", k, server_hosts[k]));
    nservers--;
  }
}

/* START FUNCTION DESCRIPTION ************************************************
set_ntp_time                   <ntp.lib>

  Syntax:       int set_ntp_time (long *padj);

  Description:  Pool all configured NTP servers, find average offset between our
                clock and NTP time and adjust RTC clock to match NTP time.

  Parameters:
    padj        pointer to time adjustment. If not NULL the function returns
                the local clock adjustment.

  Return:       0 if successful.
END DESCRIPTION **************************************************************/

int set_ntp_time (long *padj)
{
  int i, rc;
  long tz, skew;
  uint32 timestamp;
  char zone[7];

#ifndef RTC_IS_UTC
  rc = rtc_timezone (&tz, zone);
  DPRINTF (("Got timezone from %s\n", (rc==0)?"DHCP":(rc==-1)?"TIMEZONE":"UNSET"));
#else
  tz = 0;
  strcpy (zone, "UTC");
#endif

  DPRINTF(("Starting time adjustment at: %s %s\n", format_timestamp(read_rtc()), zone));
  // Query all configured servers.
  nservers = 0;
  for (i = 0; i < NSERVERS; i++)
  {
    use_this[i] = 0;
    if ((rc = ntp_query_server (server_hosts[i], &timestamp, &tdiffs[i])) > 0)
    {
      tdiffs[i] += tz;    //Adjust difference for time zone
      use_this[i] = 1;    // Mark as OK so far
      nservers++;
    }
  }

  if (!nservers)
  {
    DPRINTF(("No servers could be found - using local clock\n"));
    return -1;
  }

  // Now that we have responses from hopefully all of the servers, determine the
  // set that we are going to average.
  discard_outliers();

  // Average the time differences of the remaining servers.  This can't be
  // done the obvious way, to avoid arithmetic overflow.
  skew = 0;    // Offset that we need to add to our SEC_TIMER to get the
               // correct averaged time.
  nservers = 0;
  for (i = 0; i < NSERVERS; i++)
  {
    if (use_this[i])
    {
      nservers++;
      skew += (tdiffs[i]-skew)/nservers;
    }
  }

  //Adjust RTC
  if (skew)
  {
    DPRINTF (("Adjusting RTC clock by %ld seconds.\n", skew));
#ifdef NTP_SET_TIMER
    SEC_TIMER += skew;
#endif
    write_rtc (SEC_TIMER);
  }
  if (padj)
    *padj = skew;

  DPRINTF(("The RTC date/time now is: %s %s\n\n", format_timestamp(read_rtc()), zone));
  return 0;
}

/*** BeginHeader dow*/
int dow (int y, int m, int d);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ************************************************
dow                   <ntp.lib>

  Syntax:       int dow (int year, int month, int day);

  Description:  Return day of the week for a given calendar date.

  Return:       day of the week (0=Sunday)
END DESCRIPTION **************************************************************/


int dow (int y, int m, int d)
{
  static char const t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
    y -= m < 3;
  return (y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
}

/*** BeginHeader nth_dow*/
int nth_dow (int y, int m, int weekday, int nth);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ************************************************
nth_dow                   <ntp.lib>

  Syntax:       int nth_dow (int year, int month, int weekday, int nth);

  Description:  Find day of the month for n-th day of the week. For instance
                2-nd Sunday in March 2015 is March, 8th.
                nth_dow (2015, 3, 0, 2) = 8;

                This is useful for determining if daylight saving time
                (also called summer time) is in effect or not.

                Many locales define the DST in terms like "from 2nd Sunday in
                March to 1st Sunday in November" (current US and Canada
                definition) or "from last Sunday in March to last Sunday in
                October" (Europe).

  Parameters:
    year        calendar year
    month       calendar month
    weekday     day of the week (0=Sunday)
    nth         week number in month (1 to 4) or 5 for last

  Return:       day of the month

END DESCRIPTION **************************************************************/
int nth_dow (int y, int m, int weekday, int nth)
{
  static char const mdays[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int tgt, start;
  tgt = 1;
  if (nth < 5)
  {
    start = dow(y, m, 1);
    while (start != weekday)
    {
      start = (start+1)%7;
      tgt++;
    }
    tgt += (nth-1)*7;   //Adjust for weeks
  }
  else
  {
    tgt = mdays[m-1];
    if (m == 2 && ((y % 4 == 0) && ((y%100 != 0) || (y%400 == 0))))
      tgt++;
    start = dow(y, m, tgt);
    while (start != weekday)
    {
      start = (start-1)%7;
      tgt--;
    }
  }

  return tgt;
}


