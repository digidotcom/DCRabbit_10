/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
SSL_ERROR.LIB
	SSL Module, v. 1.06

DESCRIPTION: Error handling for TLS. Due to the large number of
             potential errors for TLS, including memory-
             management issues and possible attacks, we collect the
             error codes here, and provide a global error number,
             similar to the filesystem error handling.

             Note that SSL error codes are listed in ERRNO.LIB, in the
             900-series.

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifndef __SSL_ERROR_LIB__
#define __SSL_ERROR_LIB__


/*** EndHeader */


/*** BeginHeader SSL_error, tls_error */
int SSL_error(ssl_Socket __far*, int);
int tls_error(ssl_Socket __far*, int, _tbuf __far *);
/*** EndHeader */
__SSL_DEBUG__
int SSL_error(ssl_Socket __far* state, int err_num)
{
	return tls_error(state, err_num, NULL);
}

// SSL error function.
// Depending on the state of the passed-in ssl_Socket,
// convert SSL error numbers to alerts of the appropriate type
// and send that alert to the other side.  The _tbuf parameter
// is the destination for any alert messages generated.
__SSL_DEBUG__
int tls_error(ssl_Socket __far* state, int err_num, _tbuf __far * out)
{
	auto int alert_num;

#if _SSL_PRINTF_DEBUG
	auto long emsg;
	printf("*** tls_error: code %d\n", err_num);
	emsg = error_message(err_num);
	if (emsg)
		printf("**** %ls\n", emsg);
#endif

	// Set the error number, we only want to set it the first time (so
	// we know what the original error was, it may get clobbered if we
	// do not have this check here)
	if (!state->ssl_errno)
		state->ssl_errno = err_num;

   switch(err_num) {
      case SSL_ALLOC_FAIL:
      case SSL_INIT_ALLOC_FAIL:
      case SSL_READ_USER_CANCEL:
      case SSL_READ_RECEIVED_ALERT:
      case SSL_EXCH_KEYS_PROTOCOL_VER:
      case SSL_COULD_NOT_SEND_ALERT:
      case SSL_BAD_STATE_CLI_HELLO:
      			alert_num = -1; // A value of -1 indicates no alert is to be sent
        			break;
      case SSL_HS_NO_RENEGOTIATION:
      			alert_num = TLS_ALRT_no_renegotiation;
               break;
      case SSL_READ_BLOCK_CIPHER_ERROR:
      case SSL_BAD_RECORD_MAC:
               alert_num = TLS_ALRT_bad_record_mac;
               break;
      case SSL_READ_REC_OVERFLOW:
           		alert_num = TLS_ALRT_record_overflow;
               break;
      case SSL_HS_CLI_PROTOCOL_ERROR:
      case SSL_READ_PROTOCOL_VER:
              	alert_num = TLS_ALRT_protocol_version;
               break;
      case SSL_PUB_KEY_DECRYPTION_FAIL:
      case SSL_PUB_KEY_ENCRYPTION_FAIL:
      case SSL_PRIV_KEY_DECRYPTION_FAIL:
      case SSL_PRIV_KEY_ENCRYPTION_FAIL:
		case SSL_PUB_KEY_INT_ERROR:
              	alert_num = TLS_ALRT_decrypt_error;
               break;
      case SSL_BAD_CERT :
              	alert_num = TLS_ALRT_bad_certificate;
               break;
      case SSL_VALIDATE_UNSUPPORTED_CERTIFICATE:
              	alert_num = TLS_ALRT_unsupported_certificate;
               break;
      case SSL_VALIDATE_CERTIFICATE_REVOKED:
              	alert_num = TLS_ALRT_certificate_revoked;
               break;
      case SSL_VALIDATE_CERTIFICATE_EXPIRED:
              	alert_num = TLS_ALRT_certificate_expired;
               break;
      case SSL_VALIDATE_CERTIFICATE_UNKNOWN:
              	alert_num = TLS_ALRT_certificate_unknown;
               break;
      case SSL_VALIDATE_UNKNOWN_CA:
              	alert_num = TLS_ALRT_unknown_ca;
               break;

      case SSL_CIPHER_CHOICE_ERROR:
      case SSL_FINISH_VERIFY_FAIL:
					alert_num = TLS_ALRT_handshake_failure;
               break;
      case SSL_UNKNOWN_IDENTITY:
					alert_num = TLS_ALRT_unknown_psk_identity;
               break;
      case SSL_HS_SESSION_ID_TOO_LONG:
      case SSL_HS_UNEXPECTED_MSG:
      case SSL_READ_UNEXPECTED_MSG:
      case SSL_READ_PROTOCOL_ERROR:
					alert_num = TLS_ALRT_unexpected_message;
               break;
      case SSL_ILLEGAL_PARAMETER_ERROR:
					alert_num = TLS_ALRT_illegal_parameter;
               break;
      case SSL_DECODE_ERROR:
      case SSL_HELLO_EXT_DECODE_ERROR:
					alert_num = TLS_ALRT_decode_error;
               break;
      case EACCES:
					alert_num = TLS_ALRT_access_denied;
               break;
      case SSL_SEQ_NUM_OVERFLOW:
      case SSL_READ_WRONG_LENGTH:
      case SSL_WRITE_REC_TOO_BIG:
      case SSL_WRITE_BLOCK_CIPHER_ERROR:
		default: alert_num = TLS_ALRT_internal_error;
      		   break;
   }

   // Send the alert determined above (only if not an internal error, and
   // not already sent fatal alert)
   if(alert_num >= 0 && !state->alerts_sent) {
   	tls_send_alert(state, alert_num, out, TLS_fatal);
	}

	state->tport && state->tport(state, TPORT_EVENT_ERROR, err_num);


   // Set the state machine to the error state
	state->cur_state = SSL_STATE_ERROR;
	return -state->ssl_errno;	// This is convenient for passing through as -ve return code
}

/*** BeginHeader */
#endif
/*** EndHeader */