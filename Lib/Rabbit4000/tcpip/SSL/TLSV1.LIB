/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
TLSV1.LIB
	SSL Module, v. 1.06

DESCRIPTION: This library provides TLS version 1 functionality

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifndef __TLSV1_LIB__
#define __TLSV1_LIB__

#ifdef TLS_V1_DEBUG
#define __TLS_V1_DEBUG__ __debug
#else
#define __TLS_V1_DEBUG__ __nodebug
#endif

// PRF profiling macro (uses printf)
#ifndef TLS_PRF_PROFILE
#define TLS_PRF_PROFILE 0
#endif


// ********************************************************
// *****               TLSv1 Defaults                 *****
// ********************************************************

// Key derivation labels
#define TLS_MASTER_SEC_LABEL "master secret"
#define TLS_KEY_EXPAND_LABEL "key expansion"

// Finish message verification labels
#define TLS_FINISHED_LAB_SER "server finished"
#define TLS_FINISHED_LAB_CLI "client finished"

#define TLS_VERIFY_DATA_SIZE	12 // Size of verify data for finish messages

// TLS warning level
enum {
	TLS_auto_level = 0,	// This is not sent in message; it indicates to automatically
								// select the alert level based on the message
	TLS_warning = 1,
   TLS_fatal = 2
};
typedef char TLS_AlertLevel_t;

// TLS alerts
enum {
	TLS_ALRT_close_notify = 0,
   TLS_ALRT_unexpected_message = 10,
   TLS_ALRT_bad_record_mac = 20,
   TLS_ALRT_decryption_failed = 21,
   TLS_ALRT_record_overflow = 22,
   TLS_ALRT_decompression_failure = 30,
   TLS_ALRT_handshake_failure = 40,
   TLS_ALRT_no_certificate = 41, // Only for SSLv3
   TLS_ALRT_bad_certificate = 42,
   TLS_ALRT_unsupported_certificate = 43,
   TLS_ALRT_certificate_revoked = 44,
   TLS_ALRT_certificate_expired = 45,
   TLS_ALRT_certificate_unknown = 46,
   TLS_ALRT_illegal_parameter = 47,
   TLS_ALRT_unknown_ca = 48,
   TLS_ALRT_access_denied = 49,
   TLS_ALRT_decode_error = 50,
   TLS_ALRT_decrypt_error = 51,
   TLS_ALRT_export_restriction = 60,
   TLS_ALRT_protocol_version = 70,
   TLS_ALRT_insufficient_security = 71,
   TLS_ALRT_internal_error = 80,
   TLS_ALRT_user_cancelled = 90,
   TLS_ALRT_no_renegotiation = 100,
   TLS_ALRT_unknown_psk_identity = 115,
};
typedef char TLS_AlertDescription_t;

// TLS Alert structure
typedef struct {
	TLS_AlertLevel_t level;
   TLS_AlertDescription_t description;
} TLS_Alert;

/*** EndHeader */


////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _tls_1_derive_keys */
int _tls_1_derive_keys(ssl_Socket __far*);
/*** EndHeader */

// Derive symmetric keys from the state's master secret
__TLS_V1_DEBUG__
int _tls_1_derive_keys(ssl_Socket __far* state) {
	auto SSL_CipherState __far* cipher;			// Pointers to state internals
   auto SSL_BulkCipherConfig __far* bulk_cipher;
	auto SSL_Secret __far* master_secret;
   auto SSL_byte_t output[SSL_KEY_BLOCK_SIZE];
   auto SSL_byte_t seeded_label[SSL_SEEDED_LABEL_MAX];
   auto SSL_byte_t __far*keys;
   auto unsigned int label_len;
   auto unsigned int key_block_size;
   auto int i;

   // Access to state internals
   cipher = state->cipher_state;
   bulk_cipher = cipher->bulk_cipher;
   master_secret = state->master_secret;

   // Set up the seeded label for the key derivation
   // Seeded label = KEY_EXPAND_LABEL + server random + client random
   label_len = sizeof(TLS_KEY_EXPAND_LABEL) - 1;
   memcpy(seeded_label, TLS_KEY_EXPAND_LABEL, label_len);

   // Check size of buffer against what we are putting into it
   _ssl_assert((label_len + (sizeof(SSL_Random) * 2)) < sizeof(seeded_label));

	_f_memcpy(seeded_label + label_len, &cipher->server_random,
	       sizeof(SSL_Random));
   label_len += sizeof(SSL_Random);
	_f_memcpy(seeded_label + label_len, &cipher->client_random,
          sizeof(SSL_Random));
   label_len += sizeof(SSL_Random);
   memset(seeded_label + label_len, 0, SSL_SEEDED_LABEL_MAX - label_len);

   // ***Derive the Key Block***
   key_block_size = cipher->client_mac_sec_size + cipher->server_mac_sec_size
   	+ 2 * bulk_cipher->key_size + 2 * bulk_cipher->block_size;
   _ssl_assert(key_block_size <= SSL_KEY_BLOCK_SIZE);
   memset(output, 0, key_block_size);
   
#if _SSL_USE_TLS10
	if (state->tls_ver_minor == TLS10_VER_MIN) {
		_tls_1_PRF(master_secret, seeded_label, label_len, output, key_block_size);
	} else
#endif
	{
		_SHA256_PRF(master_secret, seeded_label, label_len, output, key_block_size);
	}
	
#if _SSL_PRINTF_DEBUG > 2
   printf("\nKey material block (%u bytes):\n", key_block_size);
   mem_dump(output, key_block_size);
   printf("mac_size:%u  key_size:%u  block_size:%u\n", cipher->client_mac_sec_size,
   	bulk_cipher->key_size, bulk_cipher->block_size);
#endif

	// Temporary pointer for accessing key material output
  	keys = output;

   // Now we can set up our keys. The sizes for all these values are
   // determined in SSL_cipher_init (Watch pointer arithmetic with assertions)
   // 1) client_write_MAC_secret
   _f_memcpy(cipher->client_mac_sec, keys, cipher->client_mac_sec_size);
   keys += cipher->client_mac_sec_size;

   // 2) server_write_MAC_secret
   _f_memcpy(cipher->server_mac_sec, keys, cipher->server_mac_sec_size);
   keys += cipher->server_mac_sec_size;

   // 3) client_write_key
   _f_memcpy(bulk_cipher->client_key, keys, bulk_cipher->key_size);
   keys += bulk_cipher->key_size;

   // 4) server_write_key
   _f_memcpy(bulk_cipher->server_key, keys, bulk_cipher->key_size);
   keys += bulk_cipher->key_size;

   // Only set up initialization vectors if we have a block cipher
   // (bulk_cipher->block_size = 0 for stream ciphers)
   if(bulk_cipher->block_size > 0) {
	   // 5) client_write_IV
   	_f_memcpy(bulk_cipher->client_iv, keys, bulk_cipher->block_size);
   	keys += bulk_cipher->block_size;

   	// 6) server_write_IV
   	_f_memcpy(bulk_cipher->server_iv, keys, bulk_cipher->block_size);
   	keys += bulk_cipher->block_size;
   }

   // Clear the key material (for security)
   memset(output, 0, key_block_size);

   return 0;
}

////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _tls_1_generate_finish_mac */
int _tls_1_generate_finish_mac(ssl_Socket __far*, SSL_Finish_Hash_t __far*,
										 _ssl_MAC_sender_t, SSL_byte_t __far*);
/*** EndHeader */

__TLS_V1_DEBUG__
int _tls_1_generate_finish_mac(ssl_Socket __far* state, SSL_Finish_Hash_t __far* hash,
										 _ssl_MAC_sender_t sender, SSL_byte_t __far* mac)
{

	// This buffer needs to be big enough to hold the SHA256 (or MD5 and SHA-1)
   // handshake hash plus TLS_FINISHED_LAB_XXX concatenated
#if _SSL_USE_TLS10 && (HMAC_MD5_HASH_SIZE + HMAC_SHA_HASH_SIZE > HMAC_SHA256_HASH_SIZE)
	auto SSL_byte_t seeded_label[HMAC_MD5_HASH_SIZE + HMAC_SHA_HASH_SIZE + 16];
#else
	auto SSL_byte_t seeded_label[HMAC_SHA256_HASH_SIZE + 16];
#endif
   auto unsigned int seeded_label_len;

	// Complete the hash, generate seeded label
   if(SSL_FMAC_CLIENT == sender) {
	   seeded_label_len = sizeof(TLS_FINISHED_LAB_CLI) - 1;
	   memset(seeded_label, 0,  seeded_label_len);
	   memcpy(seeded_label, TLS_FINISHED_LAB_CLI, seeded_label_len);
	}
   else if(SSL_FMAC_SERVER == sender) {
	   seeded_label_len = sizeof(TLS_FINISHED_LAB_SER) - 1;
	   memset(seeded_label, 0,  seeded_label_len);
	   memcpy(seeded_label, TLS_FINISHED_LAB_SER, seeded_label_len);
   }

#if _SSL_USE_TLS10
	if (state->tls_ver_minor == TLS10_VER_MIN) {
		md5_finish(&hash->md5_hash, &seeded_label[seeded_label_len]);
		seeded_label_len += HMAC_MD5_HASH_SIZE;
		sha_finish(&hash->sha1_hash, &seeded_label[seeded_label_len]);
		seeded_label_len += HMAC_SHA_HASH_SIZE;
		
		// Do the final finished calculation
		_tls_1_PRF(state->master_secret, seeded_label, seeded_label_len, mac,
		           TLS_VERIFY_DATA_SIZE);
	} else
#endif
	{
	   sha256_finish(&hash->sha256_hash, &seeded_label[seeded_label_len]);
	   seeded_label_len += HMAC_SHA256_HASH_SIZE;

	   // Do the final finished calculation
	   _SHA256_PRF(state->master_secret, seeded_label, seeded_label_len, mac,
		            TLS_VERIFY_DATA_SIZE);
	}
	
#if _SSL_PRINTF_DEBUG > 2
	printf("Generated %s verify data:\n",
   	sender == SSL_FMAC_CLIENT ? "client" : "server");
   mem_dump(mac, TLS_VERIFY_DATA_SIZE);
   printf("\n");
#endif

   return 0;
}
////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _tls_1_PRF */
void _tls_1_PRF(SSL_Secret __far*, SSL_byte_t __far*, int, SSL_byte_t __far*, int);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_tls_1_PRF                               <TLSV1.LIB>

SYNTAX: void _tls_1_PRF(SSL_Secret far* secret, SSL_byte_t far* label,
                      int label_len, SSL_byte_t far* output1, int length);

DESCRIPTION: TLS Pseudo-Random Function for TLS 1.0 connections.
             Using a master secret, and an ASCII label, produce a
             pseudo-random number for key generation, etc...

PARAMETER 1: The secret
PARAMETER 2: An ASCII label
PARAMETER 3: Length of the label (NOT including NULL terminator)
PARAMETER 4: Primary output, of size length
PARAMETER 5: The length of the desired output (maximum of 256 bytes)

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__TLS_V1_DEBUG__
void _tls_1_PRF(SSL_Secret __far* secret, // The hash secret
   SSL_byte_t __far* label,   // label (used in hash)
   int label_len,       // Seed value for random number
   SSL_byte_t __far* output1, // Output data 1 (of size length)
   int length )         // length of output data
{
   auto SSL_uint16_t LS;		// Length of the split secret
   auto SSL_byte_t __far *S1, *S2;	// Pointers to the split secret
   auto HMAC_ctx_t md5;      // HMAC states for MD5 and SHA
   auto HMAC_ctx_t sha;
   auto int i;
#if TLS_PRF_PROFILE
	auto unsigned long t0, t1;
   t0 = MS_TIMER;
#endif
	auto SSL_byte_t output2[256];// Output data 2 (of size length)
	
#if _SSL_PRINTF_DEBUG > 2
	printf("Using TLS 1.0 PRF (MD5^SHA1) on %d bytes.\n", length);
#endif

   // Split the secret
   LS = secret->length / 2;
   S1 = &secret->data[0];

	// This is always at length/2 , even if length is odd (rounded down)
   S2 = &secret->data[LS];

   if(secret->length & 0x01 != 0) {
    	// Length is odd, round up
      LS += 1;
   }

   // Initialize HMAC hashes
   HMAC_init(&md5, HMAC_USE_MD5);
   HMAC_init(&sha, HMAC_USE_SHA);

   // Do the hashing
   P_HASH(&md5, S1, LS, label, label_len, output1, length);
   P_HASH(&sha, S2, LS, label, label_len, output2, length);

   // XOR the results
	for(i = 0; i < length; i++) {
		output1[i] ^= output2[i];
   }
#if TLS_PRF_PROFILE
   t1 = MS_TIMER;
   printf("TLS_PRF time: %dms\n", t1-t0);
#endif

}
/*** BeginHeader _SHA256_PRF */
void _SHA256_PRF(SSL_Secret __far*, SSL_byte_t __far*, int, SSL_byte_t __far*, int);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_SHA256_PRF                               <TLSV1.LIB>

SYNTAX: void _SHA256_PRF(SSL_Secret far* secret, SSL_byte_t far* label,
                      int label_len, SSL_byte_t far* output, int length);

DESCRIPTION: TLS Pseudo-Random Function for TLS 1.2 connections.
             Using a master secret, and an ASCII label, produce a
             pseudo-random number for key generation, etc...

PARAMETER 1: The secret
PARAMETER 2: An ASCII label
PARAMETER 3: Length of the label (NOT including NULL terminator)
PARAMETER 4: Output buffer, of size length
PARAMETER 5: The length of the desired output

RETURN VALUE: None

END DESCRIPTION **********************************************************/

__TLS_V1_DEBUG__
void _SHA256_PRF(SSL_Secret __far* secret, // The hash secret
   SSL_byte_t __far* label,   // label (used in hash)
   int label_len,       // Seed value for random number
   SSL_byte_t __far* output, // Output data (of size length)
   int length )         // length of output data
{
   auto HMAC_ctx_t hmac;
   auto int i;
#if TLS_PRF_PROFILE
	auto unsigned long t0, t1;
   t0 = MS_TIMER;
#endif

#if _SSL_PRINTF_DEBUG > 2
	printf("Using SHA256 PRF on %d bytes.\n", length);
#endif

   // Initialize HMAC hash
   HMAC_init(&hmac, HMAC_USE_SHA256);

   // Do the hashing
   P_HASH(&hmac, &secret->data[0], secret->length, label, label_len, output, length);

#if TLS_PRF_PROFILE
   t1 = MS_TIMER;
   printf("TLS_PRF time: %dms\n", t1-t0);
#endif

}

////////////////////////////////////////////////////////////////////////////////
/*** BeginHeader */
#endif // __TLSV1_LIB__
/*** EndHeader */