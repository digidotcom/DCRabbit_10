/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader rci_data_init */
/*
	RCI data structures.

	This is the "external view" of the Rabbit from an RCI perspective.

	NOTE:
	  - #ifdef TCPCONFIG is used to wrap sections of code which depend on
	    networking library.  For testing, it is possible to use RCI without
	    network support, hence the wrappers.
*/
#ifndef _RCI_DATA_INCL
#define _RCI_DATA_INCL

#ifndef IDIGI_PRODUCT
#define IDIGI_PRODUCT "Unknown"
#endif
#ifndef IDIGI_VENDOR
#define IDIGI_VENDOR "Unknown"
#endif
#ifndef IDIGI_VENDOR_ID
#define IDIGI_VENDOR_ID "0"
#endif
#ifndef IDIGI_FIRMWARE_ID
#define IDIGI_FIRMWARE_ID "1.00.00"
#endif
#ifndef IDIGI_CONTACT
#define IDIGI_CONTACT "None"
#endif
#ifndef IDIGI_LOCATION
#define IDIGI_LOCATION "Unknown"
#endif
#ifndef IDIGI_DESCRIPTION
#define IDIGI_DESCRIPTION "Unknown"
#endif

#ximport "lib/rabbit4000/tcpip/edp/RCI.json" RCI_json
#use "idblock_api.lib"

#define _IDIGI_NUM_IFACE	2

typedef struct {
		char name[6];
		int dhcp;
		unsigned long ip;
		unsigned long subnet;
		unsigned long gateway;
		int eth_speed;
		int eth_duplex;
		int autoip;
		int addp;
		int Static;
		unsigned channel;
		int protocol_mode;
		char ssid[33];
		unsigned rts_threshold;
		unsigned fragment_threshold;
		float max_txrate;
		int country_code;
		unsigned authentication;
		unsigned encrypt;
		unsigned long eap;
		unsigned options;
		char wpa_username[33];
		char wpa_password[33];
		char wpa_psk[65];
		int wepkey_index;
		char wepkey1[27];
		char wepkey2[27];
		char wepkey3[27];
		char wepkey4[27];
} _RCI_interface_t;

#ifdef IDIGI_PPP_IFACE
typedef struct {
		int enabled;
		int auth_method_local;
		int passive;
		unsigned long address_remote;
		unsigned long address_local;
		unsigned long address_mask;
		int default_gateway;
		int compression_protocol;
		int compression_address;
		unsigned long asyncmap;
		unsigned mru;
		unsigned mtu;
		char dial_script[193];
		char chap_id[34];
		char chap_key[17];
		char pap_id[34];
		char pap_password[17];
		unsigned redial_attempts;
		unsigned long redial_delay;
		unsigned long idle_timer_rx;
		unsigned long idle_timer_tx;
} _RCI_ppp_t;
#endif

#ifdef IDIGI_USE_XBEE
typedef struct {
		char		gateway_addr[8];
      unsigned long	caps;
      // Other items are conditional type=custom elements, and are
      // handled with special code.
} _RCI_zigbee_t;
#endif

typedef
struct {
	_RCI_interface_t  interface[_IDIGI_NUM_IFACE];
	struct {
		unsigned long dns1;
		unsigned long dns2;
	} dns;
	struct {
		char contact[65];
		char location[65];
		char description[65];
	} system;
	struct {
		char deviceId[35];
		int rciCompressionEnabled;
		int tcpNodelayEnabled;
		int tcpKeepalivesEnabled;
		unsigned connIdleTimeout;
		int dataServiceEnabled;
		unsigned dataServicePort;
		unsigned dataServiceSecurePort;
		char dataServiceURL[129];
		char dataServiceToken[51];
	} mgmtglobal;
	struct {
		int identityVerificationForm;
		char password[65];
	} devicesecurity;
	struct {
		int networkType;
		int connectMethod;	// only support auto, none, MT, MTSSL
		unsigned mtRxKeepAlive;
		unsigned mtTxKeepAlive;
		unsigned mtWaitCount;
		int sslValidatePeer;
	} mgmtnetwork[3];	// This is fixed to [PPP, Ethernet, Wifi] in that order.
	struct {
		int connectionType;	// 'client' (0)
		int connectionEnabled;
		int lastKnownAddressUpdateEnabled;
		struct {
			char serverAddress[129];
		} serverArray[2];
	} mgmtconnection[1];	// only 'client' supported
#ifdef IDIGI_PPP_IFACE
	// Only outbound supported (but may support more in future)
	_RCI_ppp_t	ppp[1];
#endif
#ifdef _RCI_ROUTER_FUNCTIONALITY_IMPLEMENTED
	struct {
		int ipForwardingEnabled;
		int natEnabled;
		struct {
			int protoXlateEnabled;
			unsigned protoXlateNumber;
			unsigned protoXlateType;
			unsigned long protoXlateIpAddress;
		} protoXlateArray[4];
		struct {
			int portXlateEnabled;
			int portXlateProto;
			unsigned portXlateExternalPort;
			unsigned portXlateInternalPort;
			unsigned long portXlateInternalIpAddress;
		} portXlateArray[16];
	} router;
#endif
#ifdef _RCI_KEEPALIVE_FUNCTIONALITY_IMPLEMENTED
	struct {
		int garbage_byte;
		int override_dhcp;
		unsigned probe_count;
		unsigned probe_interval;
		unsigned long idle;
	} tcpkeepalive;
#endif
#ifdef CUSTOM_RCI_SETTINGS
	CUSTOM_RCI_SETTINGS
#endif
} _RCI_Settings_t;

_RCI_Settings_t _RCI_Settings;
#web _RCI_Settings

_RCI_Settings_t __far * _RCI_Settings_stored;	// Stored settings (shadow)
_RCI_Settings_t __far * _RCI_Settings_fd;		// Factory defaults

#web _RCI_Settings.interface[@].eth_speed \
			select("auto", "10", "100")
#web _RCI_Settings.interface[@].eth_duplex \
			select("auto", "half", "full")
#web _RCI_Settings.interface[@].protocol_mode \
			select("bss_join", "ibss_join", "ibss_join_create", "any")
	// populated based on available country codes...
#web _RCI_Settings.interface[@].country_code \
			select("Americas", "Mexico Indoors", "Mexico Outdoors", \
			"Canada", "EMEA", "France", "Israel", "China", "Japan", \
			"Australia")
#web _RCI_Settings.interface[@].authentication \
			select("open"=0x01, "wpa_psk"=0x08, "wpa_auth"=0x10)
#web _RCI_Settings.interface[@].encrypt \
			select("open"=0x01, "wep"=0x02, "tkip"=0x04, "ccmp"=0x08)
#web _RCI_Settings.interface[@].eap \
			select("tls"=0x04, "peap"=0x02)
#web _RCI_Settings.interface[@].options \
			select("shortpreamble"=0x01, "verifycert"=0x02)

#web _RCI_Settings.mgmtnetwork[@].networkType \
			select("modemPPP", "ethernet", "802.11")
#web _RCI_Settings.mgmtnetwork[@].connectMethod \
			select("auto", "none", "mt", "mtssl")

#web _RCI_Settings.mgmtconnection[@].connectionType \
			select("client")	// Rabbit only supports client initiated, untimed.

#web _RCI_Settings.devicesecurity.identityVerificationForm \
			select("simple", "password")

#ifdef IDIGI_PPP_IFACE
#web _RCI_Settings.ppp[@].auth_method_local \
			select("none", "PAP")
#endif

#ifdef _RCI_ROUTER_FUNCTIONALITY_IMPLEMENTED
#web _RCI_Settings.router.portXlateArray[@].portXlateProto \
			select("tcp", "udp")
#endif

struct {
	struct {
		char mac[6];
		char product[25];
		char company[25];
		char vendorid[25];
		char firmware[25];
	} device_info;
	struct {
		unsigned long uptime;
		unsigned long totalmem;
		unsigned long usedmem;
		unsigned long freemem;
		unsigned long hwmmem;
		unsigned long totalmemApp;
		unsigned long usedmemApp;
		unsigned long freememApp;
		unsigned long hwmmemApp;
		unsigned configUsed;
	} device_stats;
	struct {
		int dhcp;
		unsigned long ip;
		unsigned long subnet;
		unsigned long gateway;
		int autoip;
		int Static;
		int eth_speed;
		int eth_duplex;
	} boot_stats;
	struct {
		int dhcp;
		unsigned long ip;
		unsigned long subnet;
		unsigned long gateway;
		int autoip;
		int Static;
		int state;
		char ssid[33];
		char bssid[6];
		float tx_rate;
		int rx_signal;
		unsigned channel;
		int protocol_mode;
	} wireless_stats;
#ifdef IDIGI_PPP_IFACE
	struct {
		int state;
		unsigned long ip_address;
		unsigned long dns_address_primary;
		unsigned long dns_address_secondary;
	} ppp_stats;
#endif
	struct {
		int ethernet;
		int wireless;
		int dhcp;
		int addp;
		int autoip;
		int tls;
		int ssl;
		int http;
		int https;
		int router;
		unsigned router_ports;
		unsigned router_protocols;
		int ppp;
		unsigned serial_ports;
		int tcp_keepalive;
	} device_registry;
#ifdef IDIGI_USE_XBEE
	_RCI_zigbee_t	zigbee_state;
#endif
#ifdef CUSTOM_RCI_STATE
	CUSTOM_RCI_STATE
#endif
} _RCI_State;
#web _RCI_State

#web _RCI_State.boot_stats.eth_speed \
			select("auto", "10", "100")
#web _RCI_State.boot_stats.eth_duplex \
			select("auto", "half", "full")

#web _RCI_State.wireless_stats.state \
			select("stopped", "scanning", "associated", "authenticated", \
			       "joined_ad_hoc", "started_ad_hoc")

#web _RCI_State.wireless_stats.protocol_mode \
			select("bss_join", "ibss_join", "ibss_join_create", "any")

#ifdef IDIGI_PPP_IFACE
#web _RCI_State.ppp_stats.state \
			select("inactive", "active")
#endif

#web _RCI_State.device_stats.configUsed \
			select("normal", "backup")


int _RCI_Reboot;
#web _RCI_Reboot;




int rci_data_init(void);

/*** EndHeader  */
_rci_debug
int rci_data_init(void)
{
	int i;
	WebCursor_t wc;

	_RCI_Reboot = 0;

	// Set up the constant part of _RCI_State.
	memset(&_RCI_State, 0, sizeof(_RCI_State));
	strcpy(_RCI_State.device_info.product, IDIGI_PRODUCT);
	strcpy(_RCI_State.device_info.company, IDIGI_VENDOR);
	strcpy(_RCI_State.device_info.vendorid, IDIGI_VENDOR_ID);
	strcpy(_RCI_State.device_info.firmware, IDIGI_FIRMWARE_ID);
#ifdef USE_DHCP
	_RCI_State.device_registry.dhcp = 1;
#endif
#ifdef EDP_USE_TLS
	_RCI_State.device_registry.tls = 1;
	// _RCI_State.device_registry.ssl = 1;   // support for SSL 3.0 disabled
#endif
#ifdef _HTTP_H
	_RCI_State.device_registry.http = 1;
	#ifdef HTTP_SSL_SOCKETS
		#if HTTP_SSL_SOCKETS > 0
			_RCI_State.device_registry.https = 1;
		#endif
	#endif
#endif
#ifdef IDIGI_USE_ADDP
	_RCI_State.device_registry.addp = 1;
#endif
	// There is only one entry for this (not per interface).
	memcpy(_RCI_State.device_info.mac, SysIDBlock.macAddr, 6);

	// Assume current settings will be used.  This is changed to 1 if
	// LKG (backup) settings are tried.
	_RCI_State.device_stats.configUsed = 0;

	// Locate the shadow and factory default structures
	web_cursor_start(&wc);
	web_cursor_down(&wc, "_RCI_Settings", 0);
	_RCI_Settings_stored = web_shadow(&wc);
	_RCI_Settings_fd = web_fd(&wc);

	// Initialize factory defaults based on TCPCONFIG-related macros.  They
	// are all set to binary zeros at this point.
	rci_set_factory_defaults(_RCI_Settings_fd);

	// Copy FDs to stored settings
	_f_memcpy(_RCI_Settings_stored, _RCI_Settings_fd, sizeof(_RCI_Settings));

	// Update the stored settings based on userID block (if any)
#ifndef _IDIGI_FORCE_FACTORY
	rci_get_stored(0);
#endif

#ifndef IDIGI_USE_TLS
	// If previously stored settings created when TLS used, but program
	// recompiled without TLS this time, then ignore the security setting
	// field otherwise will not be able to establish connection.
	for (i=0; i < 3; ++i)
		if (_RCI_Settings_stored->mgmtnetwork[i].connectMethod == 3)
			_RCI_Settings_stored->mgmtnetwork[i].connectMethod = 2;    //MT
#endif

	// Copy stored settings to current, and activate network
	_f_memcpy((void __far *)&_RCI_Settings,
				(void __far *)_RCI_Settings_stored, sizeof(_RCI_Settings));

#ifdef TCPCONFIG
	sock_init();
#endif
	// Configure network with current settings, but don't yet start it.
	rci_config_network(0xFFFF);

	return 0;
}



/*** BeginHeader rci_config_network, rci_config_test */
int rci_config_network(unsigned coldstart);
word rci_config_test(void);
/*** EndHeader  */

// These statics represent the actual ifconfig()'d state in the device.
// We compare with the desired value (in _RCI_Settings) to decide which
// ifconfig() parameters to change.
#if ETHERNET_ONBOARD
__far _RCI_interface_t _rci_eth_if;
#endif
#if WIFI_ONBOARD
__far _RCI_interface_t _rci_wifi_if;
#endif
#ifdef IDIGI_PPP_IFACE
__far _RCI_ppp_t _rci_ppp;
#endif

_rci_debug
word rci_config_test(void)
{
	_RCI_interface_t __far * old;
	_RCI_interface_t __far * new;
#ifdef IDIGI_PPP_IFACE
	_RCI_ppp_t __far * oldppp;
	_RCI_ppp_t __far * newppp;
#endif
	int iface = 0;
	int bounce;
	word retval = 0;

#ifdef TCPCONFIG
#if ETHERNET_ONBOARD
	old = &_rci_eth_if;
	new = _RCI_Settings.interface + iface;
	bounce = old->ip != new->ip ||
				old->subnet != new->subnet ||
				old->dhcp != new->dhcp
				;
	if (bounce) {
		retval |= 1 << IF_ETH0;
	}
	++iface;
#endif
#if WIFI_ONBOARD
	old = &_rci_wifi_if;
	new = _RCI_Settings.interface + iface;
	bounce = old->ip != new->ip ||
				old->subnet != new->subnet ||
				old->dhcp != new->dhcp ||
				old->encrypt != new->encrypt ||
				old->authentication != new->authentication ||
				old->eap != new->eap ||
				strcmp(old->ssid, new->ssid) ||
				old->country_code != new->country_code ||
				old->protocol_mode != new->protocol_mode ||
				old->channel != new->channel ||
				old->country_code != new->country_code
				;
	if (bounce) {
		retval |= 1 << IF_WIFI0;
	}
	++iface;
#endif
#ifdef IDIGI_PPP_IFACE
	oldppp = &_rci_ppp;
	newppp = _RCI_Settings.ppp;
	bounce = oldppp->auth_method_local != newppp->auth_method_local ||
				oldppp->address_remote != newppp->address_remote ||
				oldppp->address_local != newppp->address_local ||
				oldppp->mru != newppp->mru ||
				oldppp->mtu != newppp->mtu
				;
	if (bounce) {
		retval |= 1 << IDIGI_PPP_IFACE;
	}
#endif
#endif
	return retval;
}

_rci_debug
int rci_config_network(unsigned coldstart)
{
#ifdef TCPCONFIG
	// Actually configure the network with the specified settings.
	// If coldstart, ignore the values in _rci_eth_if etc.
	// Returns bitfield indicating those interfaces which were brought down
	// for the change.  The caller has to bring them back up if desired.
	_RCI_interface_t __far * old;
	_RCI_interface_t * new;	// must not be far, else passes bad parms to ifconfig
#ifdef IDIGI_PPP_IFACE
	_RCI_ppp_t __far * oldppp;
	_RCI_ppp_t * newppp;	// must not be far, else passes bad parms to ifconfig
#endif
	int iface = 0;
	int bounce;
	int retval = 0;
	word iface_mask;

	// Reset the reconfig request
	edp_globals.ding_network = 0;

	iface_mask = rci_config_test();

#if ETHERNET_ONBOARD
	old = &_rci_eth_if;
	new = _RCI_Settings.interface + iface++;
	bounce = (coldstart | iface_mask) & IDIGI_ETH_IFACE_MASK;
	if (bounce) {
		retval |= IDIGI_ETH_IFACE_MASK;
		ifdown(IF_ETH0);
		// Block until down (usually very short)
		while (ifpending(IF_ETH0) != IF_DOWN)
			tcp_tick(NULL);
	}
	#ifdef IDIGI_IFACE_VERBOSE
	printf("iDigi: configuring ethernet with\n");
	if (bounce) {
	   printf("  dhcp=%d\n", new->dhcp);
	   printf("  ip=0x%08lX\n", new->ip);
	   printf("  subnet=0x%08lX\n", new->subnet);
	}
	printf("  router=0x%08lX\n", new->gateway);
	#endif
	if (bounce)
	   ifconfig(IF_ETH0,
	      #ifdef USE_DHCP
	      IFS_DHCP, new->dhcp,
	      // Interpret "static" to mean allow fallback to static address.
	      IFS_DHCP_FALLBACK, new->Static,
	      IFS_DHCP_FB_IPADDR, new->ip,
	      #endif
	      IFS_IPADDR, new->ip,
	      IFS_NETMASK, new->subnet,
	      IFS_END);

   ifconfig(IF_ETH0,
      IFS_ROUTER_SET, new->gateway,
      IFS_END);

	_f_memcpy(old, new, sizeof(*old));

#endif

#if WIFI_ONBOARD
	old = &_rci_wifi_if;
	new = _RCI_Settings.interface + iface++;
	bounce = (coldstart | iface_mask) & IDIGI_WIFI_IFACE_MASK;
	if (bounce) {
		retval |= IDIGI_WIFI_IFACE_MASK;
		ifdown(IF_WIFI0);
		// Block until down (usually very short)
		while (ifpending(IF_WIFI0) != IF_DOWN)
			tcp_tick(NULL);
	}

	#ifdef IDIGI_IFACE_VERBOSE
	printf("iDigi: bringing up WiFi with\n");
	if (bounce) {
	   printf("  dhcp=%d\n", new->dhcp);
	   printf("  ip=0x%08lX\n", new->ip);
	   printf("  subnet=0x%08lX\n", new->subnet);
	   printf("  ssid=%s\n", new->ssid);
	   printf("  encrypt=0x%X\n", new->encrypt);
	   printf("  authentication=0x%X\n", new->authentication);
	}
	printf("  router=0x%08lX\n", new->gateway);
	#endif

	if (bounce)
	   ifconfig(IF_WIFI0,
	      #ifdef USE_DHCP
	      IFS_DHCP, new->dhcp,
	      // Interpret "static" to mean allow fallback to static address.
	      IFS_DHCP_FALLBACK, new->Static,
	      IFS_DHCP_FB_IPADDR, new->ip,
	      #endif
	      IFS_IPADDR, new->ip,
	      IFS_NETMASK, new->subnet,
	      IFS_WIFI_SSID, 0, new->ssid,
	      IFS_WIFI_MODE, new->protocol_mode == 0 ?
	            IFPARAM_WIFI_INFRASTRUCTURE : IFPARAM_WIFI_ADHOC,
	      IFS_WIFI_CHANNEL, new->channel,
	      IFS_WIFI_ENCRYPTION, new->encrypt,
	      IFS_WIFI_AUTHENTICATION, new->authentication,
      	IFS_WIFI_REGION, new->country_code,
	   #ifdef WIFI_USE_WPA
	      #ifdef WPA_USE_EAP
	      IFS_WIFI_EAP_METHODS, new->eap,
	      #endif
	   #endif
	      IFS_END);

   ifconfig(IF_WIFI0,
      IFS_WIFI_TX_RATE, (int)(new->max_txrate * 10),
      IFS_WIFI_FRAG_THRESHOLD, new->fragment_threshold,
      IFS_WIFI_RTS_THRESHOLD, new->rts_threshold,
      IFS_WIFI_WEP_KEYNUM, new->wepkey_index-1,
      IFS_WIFI_WEP_KEY_HEXSTR, 0, new->wepkey1,
      IFS_WIFI_WEP_KEY_HEXSTR, 1, new->wepkey2,
      IFS_WIFI_WEP_KEY_HEXSTR, 2, new->wepkey3,
      IFS_WIFI_WEP_KEY_HEXSTR, 3, new->wepkey4,
	   #ifdef WIFI_USE_WPA
	      #ifdef WPA_USE_EAP
	      IFS_WIFI_IDENTITY, new->wpa_username,
	      IFS_WIFI_PASSWORD, new->wpa_password,
	      #endif
	      strlen(new->wpa_psk) == 64 ?
	         IFS_WIFI_WPA_PSK_HEXSTR :
	         IFS_WIFI_WPA_PSK_PASSPHRASE, new->wpa_psk,
	   #endif
      IFS_ROUTER_SET, new->gateway,
      IFS_END);

	_f_memcpy(old, new, sizeof(*old));
#endif

#ifdef IDIGI_PPP_IFACE
	oldppp = &_rci_ppp;
	newppp = _RCI_Settings.ppp;
	bounce = (coldstart | iface_mask) & IDIGI_PPP_IFACE_MASK;
	if (bounce) {
		retval |= IDIGI_PPP_IFACE_MASK;
		ifdown(IDIGI_PPP_IFACE);
		// Block until down (usually very short)
		while (ifpending(IDIGI_PPP_IFACE) != IF_DOWN)
			tcp_tick(NULL);
	}
	#ifdef IDIGI_IFACE_VERBOSE
	printf("iDigi: configuring PPP\n");
	#endif
	if (bounce)
	   //configure PPP for dialing in to ISP and bring it up

	   ifconfig(IDIGI_PPP_IFACE,
	   			// These things fixed...
	            IFS_PPP_SPEED, (long)IDIGI_PPP_SPEED,
      #if defined IDIGI_PPP_USE_PORTD
               IFS_PPP_USEPORTD, 1,
      #elif defined IDIGI_PPP_USE_PORTE
               IFS_PPP_USEPORTE, 1,
      #endif
	   #ifdef IDIGI_PPP_USE_DMA
	            IFS_USE_DMA, IDIGI_PPP_USE_DMA, 0,
	   #endif
	            IFS_PPP_RTSPIN, IDIGI_PPP_RTS_PORT, NULL, IDIGI_PPP_RTS_PIN,
	            IFS_PPP_CTSPIN, IDIGI_PPP_CTS_PORT, IDIGI_PPP_CTS_PIN,
	            IFS_PPP_FLOWCONTROL, IDIGI_PPP_FLOWCONTROL,
	            IFS_PPP_HANGUP, IDIGI_PPP_HANGUP,
	            IFS_PPP_MODEMESCAPE, IDIGI_PPP_MODEMESCAPE,
	            IFS_PPP_ACCEPTIP, IDIGI_PPP_ACCEPTIP,
	            IFS_PPP_ACCEPTDNS, IDIGI_PPP_ACCEPTDNS,
	            // These alterable by iDigi user interface...
	            IFS_PPP_SENDEXPECT, newppp->dial_script,
	            IFS_PPP_REMOTEAUTH, newppp->pap_id, newppp->pap_password,
	            IFS_END);

	_f_memcpy(oldppp, newppp, sizeof(*oldppp));

#endif


#ifdef TCPCONFIG
	// This affects only the predefined ("static") nameservers
	if (_RCI_Settings.dns.dns1) {
	   #ifdef IDIGI_IFACE_VERBOSE
	   if (_RCI_Settings.dns.dns1 || _RCI_Settings.dns.dns2) {
	      printf("iDigi: setting static namesevers:\n");
	      printf("  dns1=0x%08lX\n", _RCI_Settings.dns.dns1);
	      printf("  dns2=0x%08lX\n", _RCI_Settings.dns.dns2);
	   }
	   #endif
	   // Note that "adding" will replace an existing entry with same address
	   // so is always the best thing to do.
	   if (_RCI_Settings.dns.dns1)
	   	ifconfig(IF_ANY, IFS_NAMESERVER_ADD, _RCI_Settings.dns.dns1, IFS_END);
	   if (_RCI_Settings.dns.dns2)
	   	ifconfig(IF_ANY, IFS_NAMESERVER_ADD, _RCI_Settings.dns.dns2, IFS_END);
	}
#endif
	return retval;
#else
	// no network
	return 0;
#endif
}


/*** BeginHeader rci_iface_callback */
void rci_iface_callback(int iface, int up);
/*** EndHeader  */
void rci_iface_callback(int iface, int up)
{
#ifdef IDIGI_IFACE_VERBOSE
	printf("iDigi: Interface %d now %s\n", iface, up ? "UP" : "DOWN");
	ip_print_ifs();
	router_printall();
   printf("Nameserver list:\n");
   servlist_print(&_dns_server_table);
#endif
}

/*** BeginHeader rci_get_stored, _rci_get_json, rci_have_stored */
char __far * _rci_get_json(int lkg, word * plen);
int rci_get_stored(int lkg);
int rci_have_stored(int lkg);

#ifdef IDIGI_USERBLOCK_OFFSET
typedef struct _RCI_SavedSettings
{
	long		magic;		// Magic number to indicate validity in flash
#define _RSS_MAGIC	0xD12901F3
	long		alloc_len;	// Actual total length of area.  This will be set
								// to the value of IDIGI_USERBLOCK_MAX_LEN when the
								// settings are first stored.
	long		offs;			// Offset from start of this struct to the start of
								// the JSON string for the last saved settings.
	long		len;			// Length of the above string
	int		lkg;			// TRUE if last known good valid
	long		offs_lkg;	// If lkg, this is offset to start of LKG string
	long		len_lkg;		// Length of LKG string.
	long		reserved[4];
} _RCI_SavedSettings_t;
#endif

/*** EndHeader  */
_rci_debug
int rci_have_stored(int lkg)
{
	int rc;
#ifdef IDIGI_USERBLOCK_OFFSET
	_RCI_SavedSettings_t rss;
	while ((rc = readUserBlock(&rss, IDIGI_USERBLOCK_OFFSET, sizeof(rss))) > 0) {
	         idigi_block_tick();
	}
	if (rss.magic != _RSS_MAGIC ||
		 rss.alloc_len < 4096 ||
		 rss.alloc_len > 32767 ||
		 rss.offs != sizeof(rss) ||
	    rss.offs + rss.len != rss.offs_lkg ||
	    rss.offs_lkg + rss.len_lkg > rss.alloc_len ||
	    rss.len < 0 ||
	    rss.len_lkg < 0
	    ) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_have_stored: no stored settings\n");
	#endif
		return 0;
	}
	if (lkg) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_have_stored: %s backup settings\n",
			rss.len_lkg != 0 ? "have" : "don't have");
	#endif
		return rss.len_lkg != 0;
	}
	#ifdef IDIGI_IFACE_VERBOSE
   printf("rci_have_stored: %s normal settings\n",
      rss.len != 0 ? "have" : "don't have");
	#endif
	return rss.len != 0;
#else
	#ifdef IDIGI_USE_SUBFS
	while ((rc = (int)subfs_len(lkg ? IDIGI_SUBFS_BACKUP : IDIGI_SUBFS_CURRENT)) == -EAGAIN) {
	         idigi_block_tick();
	}
	return rc > 0;
	#else
	return 0;
	#endif
#endif
}

_rci_debug
char __far * _rci_get_json(int lkg, word * plen)
{
#ifdef IDIGI_USERBLOCK_OFFSET
	_RCI_SavedSettings_t rss;
#endif
	char __far * json = NULL;
	word len;
	unsigned long alen;
	int rc;

	*plen = 0;
#ifdef IDIGI_USERBLOCK_OFFSET
	readUserBlock(&rss, IDIGI_USERBLOCK_OFFSET, sizeof(rss));
	if (rss.magic != _RSS_MAGIC ||
		 rss.alloc_len < 4096 ||
		 rss.alloc_len > 32767 ||
		 rss.offs != sizeof(rss) ||
	    rss.offs + rss.len != rss.offs_lkg ||
	    rss.offs_lkg + rss.len_lkg > rss.alloc_len ||
	    rss.len < 0 ||
	    rss.len_lkg < 0
	    ) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("_rci_get_json: userID area uninitialized\n");
	#endif
		return NULL;	// No data or inconsistent, just use factory defaults
	}
	if (lkg)
		len = (word)rss.len_lkg;
	else
		len = (word)rss.len;
	json = _web_malloc(len+1);
	if (!json) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("_rci_get_json: could not allocate\n");
	#endif
		return NULL;
	}
	readUserBlock(json,
			IDIGI_USERBLOCK_OFFSET + (word)(lkg ? rss.offs_lkg : rss.offs), len);
	json[len] = 0;
	*plen = len;
#else
	#ifdef IDIGI_USE_SUBFS
	while ((rc = (int)subfs_len(lkg ? IDIGI_SUBFS_BACKUP : IDIGI_SUBFS_CURRENT)) == -EAGAIN) {
	         idigi_block_tick();
	}
	if (rc < 0) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("_rci_get_json: userID area uninitialized\n");
	#endif
		return NULL;	// No data or inconsistent, just use factory defaults
	}
	len = rc;
	json = _web_malloc(len+1);
	if (!json) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("_rci_get_json: could not allocate\n");
	#endif
		return NULL;
	}
	alen = len;
	while ((rc = subfs_read(lkg ? IDIGI_SUBFS_BACKUP : IDIGI_SUBFS_CURRENT,
							json, 0, &alen)) == -EAGAIN) {
	         idigi_block_tick();
	}
	if (rc < 0) {
		_web_free(json);
		return NULL;
	}
	json[len] = 0;
	*plen = (word)len;
	#endif
#endif

	return json;
}


_rci_debug
int rci_get_stored(int lkg)
{
	WebTrans_t wt;
	WebIteratorFilter_t wif;
	char __far * json;
	word len;
	long rc;
	/* Override any stored settings based on userid block.  Currently, there is
	   a macro (IDIGI_USERBLOCK_OFFSET) which defines the offset into the
	   userID block at which an _RCI_SavedSettings_t is stored.
	   This struct is a prefix for
	   the actual data, which is stored as JSON string which reflects the
	   data in _RCI_Settings.  There is also saved data for the "last known
	   good" settings, where "good" is defined as being able to connect to
	   the iDigi server and get to the _EDP_RUN state in idigi_tick().
	*/
	json = _rci_get_json(lkg, &len);
	if (json) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_get_stored(%s): found settings, length %u\n",
			lkg ? "LKG" : "normal", len);
	#endif
		// Parse the JSON string and set "stored settings".
		_f_memset(&wif, 0, sizeof(wif));
		wt = NULL;
		rc = web_parse_json(json, len, &wt, &wif);
		if (rc < 0) {
	#ifdef IDIGI_IFACE_VERBOSE
			printf("rci_get_stored(%s): web_parse_json rc=%ld\n",
				lkg ? "LKG" : "normal", rc);
	#endif
			_web_free(json);
			return (int)rc;
		}
		// Execute the transaction.  Apply unchanged, otherwise it does
		// an incorrect comparison with "current" (which might not be
		// initialized at this point).  We also ignore errors that were
		// detected above when adding items to the transaction.  This is
		// so that minor errors do not cause the entire transaction to be
		// rejected.  Minor errors include new fields that may not have been
		// initialized correctly (according to metadata specification) or
		// existing fields which have more restrictive metadata applied.
		// In general, we want this function to succeed as much as possible.
		rc = web_transaction_execute(&wt,
					WTE_NO_GUARD_FUNC | WTE_NO_CURRENT |
					WTE_SET_SHADOW | WTE_APPLY_UNCHANGED |
					WTE_IGNORE_ADD_ERRORS);
	#ifdef IDIGI_IFACE_VERBOSE
		if (rc < 0)
			printf("rci_get_stored(%s): web_transaction_execute rc=%ld\n",
				lkg ? "LKG" : "normal", rc);
	#endif
		_web_free(json);
		web_transaction_free(&wt);
	}
#ifdef IDIGI_IFACE_VERBOSE
	else
		printf("rci_get_stored(%s): no JSON string\n", lkg ? "LKG" : "normal");
#endif
	return 0;
}

/*** BeginHeader rci_save_stored */
int rci_save_stored(int lkg);
/*** EndHeader  */
char __far * rootlist[] =
{
	"_RCI_Settings",
	NULL
};

_rci_debug
int rci_save_stored(int lkg)
{
	/* Write given settings to userID block as a struct _RCI_SavedSettings.
	*/
#ifdef IDIGI_USERBLOCK_OFFSET
	WebIteratorFilter_t wif;
	_RCI_SavedSettings_t rss;
	char __far * json = NULL;
	long len;
	char __far * alt = NULL;
	word alt_len;
	int rc;
	word nba[3];
	const void __far * src[3];



	memset(&wif, 0, sizeof(wif));
	wif.varlist = rootlist;
	len = web_gen_json(&wif, &json,
				WGJ_SQUASH_KEY|WGJ_NUMERIC|WGJ_HEX|WGJ_SHADOW);
	if (len < 0) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_save_stored(%s): Error code %ld\n", lkg ? "LKG" : "normal", len);
	#endif
		rc = (int)len;
		goto _ret;
	}

	#ifdef IDIGI_IFACE_VERBOSE
   printf("rci_save_stored(%s): --- length %ld ---\n", lkg ? "LKG" : "normal", len);
   //mem_dump(json, (word)len);
	#endif

	while ((rc = readUserBlock(&rss, IDIGI_USERBLOCK_OFFSET, sizeof(rss))) > 0) {
	         idigi_block_tick();
	}
	if (rss.magic != _RSS_MAGIC || rss.alloc_len < IDIGI_USERBLOCK_MAX_LEN)
		rss.alloc_len = IDIGI_USERBLOCK_MAX_LEN;
	alt = _rci_get_json(!lkg, &alt_len);
	if (alt_len + len + sizeof(rss) > rss.alloc_len) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_save_stored(%s): Error code %ld\n", lkg ? "LKG" : "normal", len);
	#endif
		rc = -E2BIG;
		goto _ret;
	}

	rss.magic = _RSS_MAGIC;
	rss.offs = sizeof(rss);
	memset(rss.reserved, 0, sizeof(rss.reserved));
	nba[0] = sizeof(rss);
	src[0] = &rss;
	if (lkg) {
		rss.len = alt_len;
		rss.offs_lkg = rss.offs + rss.len;
		rss.len_lkg = len;
		nba[1] = alt_len;
		src[1] = alt;
		nba[2] = (word)len;
		src[2] = json;
	}
	else {
		rss.len = len;
		rss.offs_lkg = rss.offs + rss.len;
		rss.len_lkg = alt_len;
		nba[1] = (word)len;
		src[1] = json;
		nba[2] = alt_len;
		src[2] = alt;
	}
	while ((rc = _f_writeUserBlockArray(IDIGI_USERBLOCK_OFFSET,
				src, nba, 3)) > 0) {
	         idigi_block_tick();
	}


_ret:
	web_free_json(&json);
	if (alt)
		_web_free(alt);
	return rc;
#else
	#ifdef IDIGI_USE_SUBFS
	WebIteratorFilter_t wif;
	char __far * json = NULL;
	const char __far * fn = lkg ? IDIGI_SUBFS_BACKUP : IDIGI_SUBFS_CURRENT;
	long len;
	int rc;

	memset(&wif, 0, sizeof(wif));
	wif.varlist = rootlist;
	len = web_gen_json(&wif, &json,
				WGJ_SQUASH_KEY|WGJ_NUMERIC|WGJ_HEX|WGJ_SHADOW);
	if (len < 0) {
	#ifdef IDIGI_IFACE_VERBOSE
		printf("rci_save_stored(%s): Error code %ld\n", lkg ? "LKG" : "normal", len);
	#endif
		rc = (int)len;
		goto _ret;
	}

	#ifdef IDIGI_IFACE_VERBOSE
   printf("rci_save_stored(%s): --- length %ld ---\n", lkg ? "LKG" : "normal", len);
   //mem_dump(json, (word)len);
	#endif

	while ((rc = subfs_create(fn, json, len)) == -EAGAIN) {
	         idigi_block_tick();
	}
	#ifdef IDIGI_IFACE_VERBOSE
	if (rc) {
   	printf("rci_save_stored(%s): ### Failed, rc=%d ###\n", lkg ? "LKG" : "normal", rc);
	}
	#endif

_ret:
	web_free_json(&json);
	return rc;
	#endif
#endif

	return 0;
}



/*** BeginHeader rci_set_factory_defaults */
int rci_set_factory_defaults(_RCI_Settings_t __far * fd);
/*** EndHeader  */


_rci_debug
int rci_set_factory_defaults(_RCI_Settings_t __far * fd)
{
	int iface, i;


	iface = 0;
	#if ETHERNET_ONBOARD
	_f_strcpy(fd->interface[iface].name, "eth0");
	#ifdef TCPCONFIG
	#ifdef _ETH_STATIC_IP
	fd->interface[iface].ip = aton(_ETH_STATIC_IP);
	#else
	fd->interface[iface].ip = 0;
	#endif
	#ifdef _ETH_NETMASK
	fd->interface[iface].subnet = aton(_ETH_NETMASK);
	#else
	fd->interface[iface].subnet = 0xFFFFFF00;
	#endif
	#ifdef MY_GATEWAY
	fd->interface[iface].gateway = aton(MY_GATEWAY);
	#else
	fd->interface[iface].gateway = 0;
	#endif
	#else	// !defined(TCPCONFIG)...
	// This is only the case when compiling without network (test harness mode)
	fd->interface[iface].ip = 0x0A0A0606;
	fd->interface[iface].subnet = 0xFFFFFF00;
	fd->interface[iface].gateway = 0x0A0A0601;
	#endif
	#ifdef USE_DHCP
	fd->interface[iface].dhcp = 1;
	#else
	fd->interface[iface].Static = 1;
	#endif
	#ifdef USE_LINKLOCAL
	fd->interface[iface].autoip = 1;
	#endif
	#ifdef IDIGI_USE_ADDP
	fd->interface[iface].addp = 1;
	#endif

	++iface;
	#endif	//...if ETHERNET_ONBOARD

	#if WIFI_ONBOARD
	_f_strcpy(fd->interface[iface].name, "wln0");
	#ifdef TCPCONFIG
	#ifdef _WIFI_STATIC_IP
	fd->interface[iface].ip = aton(_WIFI_STATIC_IP);
	#else
	fd->interface[iface].ip = 0;
	#endif
	#ifdef _WIFI_NETMASK
	fd->interface[iface].subnet = aton(_WIFI_NETMASK);
	#else
	fd->interface[iface].subnet = 0xFFFFFF00;
	#endif
	#ifdef MY_GATEWAY
	fd->interface[iface].gateway = aton(MY_GATEWAY);
	#else
	fd->interface[iface].gateway = 0;
	#endif
	#else	// !defined(TCPCONFIG)...
	fd->interface[iface].ip = 0x0A0A0A0A;
	fd->interface[iface].subnet = 0xFFFFFF00;
	fd->interface[iface].gateway = 0x0A0A0A01;
	#endif
	#ifdef USE_DHCP
	fd->interface[iface].dhcp = 1;
	#else
	fd->interface[iface].Static = 1;
	#endif
	#ifdef USE_LINKLOCAL
	fd->interface[iface].autoip = 1;
	#endif
	#ifdef IDIGI_USE_ADDP
	fd->interface[iface].addp = 1;
	#endif

	#ifdef TCPCONFIG
	_f_strcpy(fd->interface[iface].ssid, IFC_WIFI_SSID);
	fd->interface[iface].protocol_mode =
		IFC_WIFI_MODE == IFPARAM_WIFI_INFRASTRUCTURE ? 0 : 2;
	fd->interface[iface].channel = IFC_WIFI_CHANNEL;
	fd->interface[iface].rts_threshold = IFC_WIFI_RTS_THRESHOLD;
#if IFC_WIFI_FRAG_THRESHOLD >= 256 && IFC_WIFI_FRAG_THRESHOLD <= 2346
	fd->interface[iface].fragment_threshold = IFC_WIFI_FRAG_THRESHOLD;
#else
	fd->interface[iface].fragment_threshold = 2346;
#endif
	fd->interface[iface].max_txrate = 54.0; // No macro for this
	fd->interface[iface].country_code = IFC_WIFI_REGION;
	fd->interface[iface].authentication = IFC_WIFI_AUTHENTICATION;
	fd->interface[iface].encrypt = IFC_WIFI_ENCRYPTION;

	#ifdef IFC_WIFI_WEP_KEY0_HEXSTR
	_f_strcpy(fd->interface[iface].wepkey1, IFC_WIFI_WEP_KEY0_HEXSTR);
	#endif
	#ifdef IFC_WIFI_WEP_KEY1_HEXSTR
	_f_strcpy(fd->interface[iface].wepkey2, IFC_WIFI_WEP_KEY1_HEXSTR);
	#endif
	#ifdef IFC_WIFI_WEP_KEY2_HEXSTR
	_f_strcpy(fd->interface[iface].wepkey3, IFC_WIFI_WEP_KEY2_HEXSTR);
	#endif
	#ifdef IFC_WIFI_WEP_KEY3_HEXSTR
	_f_strcpy(fd->interface[iface].wepkey4, IFC_WIFI_WEP_KEY3_HEXSTR);
	#endif
	fd->interface[iface].wepkey_index = IFC_WIFI_WEP_KEYNUM+1;
	#ifdef WIFI_USE_WPA
		#ifdef WPA_USE_EAP
		fd->interface[iface].eap = IFC_WIFI_EAP_METHODS;
		_f_strcpy(fd->interface[iface].wpa_username, IFC_WIFI_IDENTITY);
		_f_strcpy(fd->interface[iface].wpa_password, IFC_WIFI_PASSWORD);
		#endif
		#ifdef IFC_WIFI_WPA_PSK_HEXSTR
		_f_strcpy(fd->interface[iface].wpa_psk, IFC_WIFI_WPA_PSK_HEXSTR);
		#else
			#ifdef IFC_WIFI_WPA_PSK_PASSPHRASE
		_f_strcpy(fd->interface[iface].wpa_psk, IFC_WIFI_WPA_PSK_PASSPHRASE);
			#endif
		#endif
	#endif
	#endif // if TCPCONFIG

	++iface;
	#endif	//...if WIFI_ONBOARD

	#ifdef IDIGI_PPP_IFACE
	if (iface < _IDIGI_NUM_IFACE) {
		_f_strcpy(fd->interface[iface].name, "ppp0");
		fd->interface[iface].subnet = -1;
		++iface;
	}

	{
		_RCI_ppp_t __far * p = fd->ppp;

		p->enabled = 1;
		p->auth_method_local = 1;
		p->address_mask = -1;
		p->default_gateway = 1;
		p->compression_protocol = 1;
		p->compression_address = 1;
		p->mru = PPP_MTU;
		p->mtu = PPP_MTU;
		_f_strncpy(p->dial_script, IDIGI_PPP_SENDEXPECT, sizeof(p->dial_script)-1);
		_f_strncpy(p->pap_id, IDIGI_PPP_PAP_ID, sizeof(p->pap_id)-1);
		_f_strncpy(p->pap_password, IDIGI_PPP_PAP_PASSWORD, sizeof(p->pap_password)-1);

	}
	#endif



#ifdef MY_NAMESERVER
	fd->dns.dns1 = aton(MY_NAMESERVER);
#else
	fd->dns.dns1 = 0;
#endif

	_f_strcpy(fd->system.contact, IDIGI_CONTACT);
	_f_strcpy(fd->system.location, IDIGI_LOCATION);
	_f_strcpy(fd->system.description, IDIGI_DESCRIPTION);

	// If no ethernet or wifi, then the MAC address must still be filled in
	// to a valid globally unique identifier in order to use iDigi.  Rabbit
	// modules without eth or wifi will need a MAC address to be assigned
	// by the end-user.  FIXME: need callback?
	sprintf(fd->mgmtglobal.deviceId,
		"0x0000000000000000%02X%02X%02XFFFF%02X%02X%02X",
		SysIDBlock.macAddr[0], SysIDBlock.macAddr[1], SysIDBlock.macAddr[2],
		SysIDBlock.macAddr[3], SysIDBlock.macAddr[4], SysIDBlock.macAddr[5]
		);
#ifdef IDIGI_USE_DS
	fd->mgmtglobal.dataServiceEnabled = 1;
#endif
	fd->mgmtglobal.dataServicePort = 80;
	fd->mgmtglobal.dataServiceSecurePort = 443;
	_f_strcpy(fd->mgmtglobal.dataServiceURL, "/ws/device");
	_f_strcpy(fd->mgmtglobal.dataServiceToken, "cwm_ds");

	for (i = 0; i < 3; ++i) {
	   fd->mgmtnetwork[i].networkType = i;
#ifdef EDP_USE_TLS
	   fd->mgmtnetwork[i].connectMethod = 3;    //MTSSL
	   fd->mgmtnetwork[i].sslValidatePeer = 1;
#else
	   fd->mgmtnetwork[i].connectMethod = 2;    //MT
#endif
#ifdef HAVE_EDP
	   fd->mgmtnetwork[i].mtTxKeepAlive = EDP_KEEPALIVE_INTERVAL_FROM_SVR;
	   fd->mgmtnetwork[i].mtRxKeepAlive = EDP_KEEPALIVE_INTERVAL;
	   fd->mgmtnetwork[i].mtWaitCount = EDP_KEEPALIVE_WAIT;
#endif
	}

#ifdef IDIGI_SERVER_PASSWORD
	_f_strcpy(fd->devicesecurity.password, IDIGI_SERVER_PASSWORD);
#endif

#ifdef HAVE_EDP
	fd->mgmtconnection[0].connectionEnabled = 1;
#endif
#ifdef IDIGI_SERVER
	_f_strcpy(fd->mgmtconnection[0].serverArray[0].serverAddress,
			IDIGI_SERVER);
#endif

	return 0;
}



/*** BeginHeader _rci_data_update_state */
void _rci_data_update_state(void);
/*** EndHeader */
_rci_debug
void _rci_data_update_state(void)
{
	int iface, i;
	longword ipaddr, subnet, router;
	int dhcp_ok, dhcp_fellback, ssid_len, proto_mode, txrate;
#if WIFI_ONBOARD
	#ifdef NET_H
	wifi_status wstate;
	#endif
#endif
#ifdef IDIGI_USE_XBEE
	sxa_node_t __far * sxa;
#endif

	// query_state requires state data to be set acording to current conditions.
	//DEVIDEA: really should use RTC.
	_RCI_State.device_stats.uptime = TICK_TIMER >> 10;

	// Malloc memory stats...
	_RCI_State.device_stats.totalmem = ((mstate)_sys_mem_space)->seg.Size;
	#ifdef _MALLOC_HWM_STATS
	_RCI_State.device_stats.usedmem = ((mstate)_sys_mem_space)->curr;
	_RCI_State.device_stats.hwmmem = ((mstate)_sys_mem_space)->hwm;
	_RCI_State.device_stats.freemem =
		((mstate)_sys_mem_space)->seg.Size - ((mstate)_sys_mem_space)->curr;
	#endif
	_init_app_mem_space();
	_RCI_State.device_stats.totalmemApp = ((mstate)_app_mem_space)->seg.Size;
	#ifdef _MALLOC_HWM_STATS
	_RCI_State.device_stats.usedmemApp = ((mstate)_app_mem_space)->curr;
	_RCI_State.device_stats.hwmmemApp = ((mstate)_app_mem_space)->hwm;
	_RCI_State.device_stats.freememApp =
		((mstate)_app_mem_space)->seg.Size - ((mstate)_app_mem_space)->curr;
	#endif

#ifdef NET_H
	#if ETHERNET_ONBOARD
	_RCI_State.boot_stats.dhcp = 0;
	_RCI_State.device_registry.ethernet = 1;
   ifconfig(IF_ETH0,
      IFG_IPADDR, &_RCI_State.boot_stats.ip,
      IFG_NETMASK, &_RCI_State.boot_stats.subnet,
      IFG_ROUTER_DEFAULT, &_RCI_State.boot_stats.gateway,
      #ifdef USE_DHCP
      IFG_DHCP, &_RCI_State.boot_stats.dhcp,
      IFG_DHCP_OK, &dhcp_ok,
      IFG_DHCP_FELLBACK, &dhcp_fellback,
      #endif
      IFS_END);
	_RCI_State.boot_stats.Static = !_RCI_State.boot_stats.dhcp
		 || !dhcp_ok || dhcp_fellback;
	//DEVIDEA: get proper speed/duplex, also test for LINKLOCAL assignment
	_RCI_State.boot_stats.eth_speed = 2;
	_RCI_State.boot_stats.eth_duplex = 2;
	#endif

	#if WIFI_ONBOARD
	_RCI_State.wireless_stats.dhcp = 0;
	_RCI_State.device_registry.wireless = 1;
   ifconfig(IF_WIFI0,
      IFG_IPADDR, &_RCI_State.wireless_stats.ip,
      IFG_NETMASK, &_RCI_State.wireless_stats.subnet,
      IFG_ROUTER_DEFAULT, &_RCI_State.wireless_stats.gateway,
      IFG_WIFI_MODE, &proto_mode,
      IFG_WIFI_CHANNEL, &_RCI_State.wireless_stats.channel,
      IFG_WIFI_STATUS, &wstate,
      #ifdef USE_DHCP
      IFG_DHCP, &_RCI_State.wireless_stats.dhcp,
      IFG_DHCP_OK, &dhcp_ok,
      IFG_DHCP_FELLBACK, &dhcp_fellback,
      #endif
      IFS_END);
	_RCI_State.wireless_stats.protocol_mode = proto_mode == IFPARAM_WIFI_ADHOC ?
		2 : 0;
	_RCI_State.wireless_stats.Static = !_RCI_State.wireless_stats.dhcp
		 || !dhcp_ok || dhcp_fellback;
	_RCI_State.wireless_stats.state = wstate.state;
	_RCI_State.wireless_stats.tx_rate = 0.1 * wstate.tx_rate;
	_RCI_State.wireless_stats.rx_signal = wstate.rx_signal;
	memcpy(_RCI_State.wireless_stats.bssid, wstate.bss_addr, 6);
	memcpy(_RCI_State.wireless_stats.ssid, wstate.ssid, 32);
	#endif

	#ifdef IDIGI_PPP_IFACE
	_RCI_State.device_registry.ppp = 1;
	_RCI_State.device_registry.serial_ports = 1;
   ifconfig(IDIGI_PPP_IFACE,
      IFG_IPADDR, &_RCI_State.ppp_stats.ip_address,
      IFG_PPP_REMOTEDNS,
      	&_RCI_State.ppp_stats.dns_address_primary,
      	&_RCI_State.ppp_stats.dns_address_secondary,
      IFS_END);
	_RCI_State.ppp_stats.state = ifpending(IDIGI_PPP_IFACE) == IF_UP;
	#endif


#endif // NET_H

#ifdef IDIGI_USE_XBEE
	sxa = sxa_local_table;	// Get first local (gateway) node
   _f_memcpy(_RCI_State.zigbee_state.gateway_addr,
   			&sxa->address.ieee,
            sizeof(_RCI_State.zigbee_state.gateway_addr));
	_RCI_State.zigbee_state.caps = sxa->caps;
#endif

}


/*** BeginHeader */
#endif
/*** EndHeader */


