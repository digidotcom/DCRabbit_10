/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
	Rabbit implementation of <do_command target="zigbee">.
*/
/*** BeginHeader _rci_xbee */
#ifndef _RCI_ZIGBEE_INCL
#define _RCI_ZIGBEE_INCL

#ximport "lib/rabbit4000/tcpip/edp/rci_xbee.json" RCI_xbee


struct
{
	struct
   {
   	int option;
      int start;
      int size;
      struct
      {
			int type;
         char ext_addr[8];
         unsigned net_addr;
         unsigned parent_addr;
         unsigned profile_id;
         unsigned mfg_id;
			unsigned long device_type;
         char node_id[21];
      } device[2];
   } discover;
	struct
   {
   	char file[100];
      char target[8];
      char updater[8];
   } fw_update;
	struct
   {
      char addr[8];
      struct
      {
   		int dummy;
      } radio;
   } query_setting;
	struct
   {
      char addr[8];
      struct
      {
   		int dummy;
      } radio;
   } query_state;
	struct
   {
      char addr[8];
      struct
      {
   		int dummy;
      } radio;
   } set_setting;
} _RCI_Xbee;
#web _RCI_Xbee




extern xbee_dev_t _rci_xbee;


/*** EndHeader */

xbee_dev_t _rci_xbee;

/*** BeginHeader _rci_find_reg_descr_by_name */
const _xbee_reg_descr_t FAR * _rci_find_reg_descr_by_name(
		const char FAR * name,
      int is_state,
      int is_setting,
      unsigned zb_mask);
/*** EndHeader */
_xbee_sxa_debug
const _xbee_reg_descr_t FAR * _rci_find_reg_descr_by_name(
		const char FAR * name,
      int is_state,
      int is_setting,
      unsigned zb_mask)
{
	const _xbee_reg_descr_t FAR * zb;

   for (zb = _xbee_reg_table; zb->rci_element; ++zb) {
   	if (is_state != zb->is_state)
      	continue;
      if ((zb->cxval & zb_mask) != zb_mask)
      	continue;
   	if (!strcmp(zb->rci_element, name))
      	return zb;
   }
   if (is_setting) {
   	// If setting, search again and ignore the mask.  This allows return
      // of most specific entry, or the first one otherwise.

	   for (zb = _xbee_reg_table; zb->rci_element; ++zb) {
	      if (is_state != zb->is_state)
	         continue;
	      if (!strcmp(zb->rci_element, name))
	         return zb;
	   }
   }
   return NULL;
}

/*** BeginHeader _rci_xbee_custom */
int _rci_xbee_custom(WebCursor_t __far * wc, int type, xmlCtx __far * gen, int for_state);
/*** EndHeader */
_rci_debug
int _rci_xbee_custom(WebCursor_t __far * wc, int type, xmlCtx __far * gen, int for_state)
{
	char val[20];
   _xbee_reg_descr_t const __far * zt;

   xmlGenBeginElement(gen, "descriptor", 1,
      (char __far *)"element", (char __far *)"radio",
      (char __far *)"desc", (char __far *)"XBee radio parameters",
      (char __far *)"access", (char __far *)(for_state ? "read_only" : NULL),
      (char __far *)NULL);

	if (type == RR_QUERY_DESCRIPTOR) {
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_custom: generating query %s descriptor response.\n",
      	for_state ? "state" : "settings");
      #endif
   	for (zt = _xbee_reg_table; zt->rci_element; ++zt) {
      	if (for_state != zt->is_state)
         	continue;
      	sprintf(val, "0x%X", zt->cxval);
	      xmlGenBeginElement(gen, "conditional", 1,
	         (char __far *)"type", (char __far *)"custom",
	         (char __far *)"name", (char __far *)"xbee_type",
	         (char __far *)"value", (char __far *)val,
	         (char __far *)NULL);
	      xmlGenBeginEnd(gen, "element", 1, NULL,
	         (char __far *)"type", (char __far *)_xbee_rci_types[zt->rci_type],
	         (char __far *)"name", (char __far *)zt->rci_element,
	         (char __far *)"desc", (char __far *)zt->desc,
	         (char __far *)"alias", (char __far *)zt->alias,
	         (char __far *)"units", zt->units && *zt->units ? (char __far *)zt->units : (char __far *)NULL,
	         (char __far *)"min", zt->min && *zt->min ? (char __far *)zt->min : (char __far *)NULL,
	         (char __far *)"max", zt->max && *zt->max ? (char __far *)zt->max : (char __far *)NULL,
	         (char __far *)NULL);

			xmlGenEndElement(gen, NULL); // conditional
      }
   }
	xmlGenEndElement(gen, NULL); // descriptor element=radio
   return 0;
}

/*** BeginHeader _rci_xbee_custom_qset */
int _rci_xbee_custom_qset(WebCursor_t __far * wc, int type, xmlCtx __far * gen);
/*** EndHeader */
_rci_debug
int _rci_xbee_custom_qset(WebCursor_t __far * wc, int type, xmlCtx __far * gen)
{
	return _rci_xbee_custom(wc, type, gen, 0);
}

/*** BeginHeader _rci_xbee_custom_qstate */
int _rci_xbee_custom_qstate(WebCursor_t __far * wc, int type, xmlCtx __far * gen);
/*** EndHeader */
_rci_debug
int _rci_xbee_custom_qstate(WebCursor_t __far * wc, int type, xmlCtx __far * gen)
{
	return _rci_xbee_custom(wc, type, gen, 1);
}


/*** BeginHeader _rci_xbee_gen_query_response */
void _rci_xbee_gen_query_response(rciRequest __far * rr, int sched_upd);
/*** EndHeader */
void _rci_xbee_gen_query_response(rciRequest __far * rr, int sched_upd)
{
   char buf[80];
   char * p;
	xmlCtx __far * gen = &rr->gen;
   sxa_node_t __far * sxa = rr->sxa;
   const _xbee_reg_descr_t __far * zb = rr->zb;
   void __far * bin;
   unsigned bin_len;
   uint32_t val;
   sxa_cache_flags_t cached;

   // For query, generate the response from cache if available,
   // otherwise omit the element.
   bin = sxa_cached_value_ptr(sxa, zb);
   bin_len = sxa_cached_value_len(sxa, zb);
   cached = sxa_cache_status(sxa, zb, zb->sxa_cache_group);

   if (sched_upd && (!cached || cached == _SXA_CACHED_ERROR)) {
   	// Never been cached, or error.  Try getting the value
      if (sxa_schedule_update_cache(sxa, zb) && rr->zb_nqueued < _SXA_MAX_QUEUED) {
			rr->zb_queued[rr->zb_nqueued++] = zb;
      }
   }
   else if (cached == _SXA_CACHED_OK) {
      if (zb->rci_type == XBEE_RCI_TYPE_BIN) {
      	strcpy(buf, "0x");
         p = buf + 2;
         while (bin_len) {
         	sprintf(p, "%02X", *(char __far *)bin);
            p += 2;
            bin = (char __far *)bin + 1;
            --bin_len;
         }
         *p = 0;
         xmlGenBeginEndSimple(gen, zb->rci_element, buf);
      }
      else if (zb->rci_type == XBEE_RCI_TYPE_STRING)
         xmlGenBeginEndSimple(gen, zb->rci_element, bin);
      else if (zb->rci_type == XBEE_RCI_TYPE_ADDR64) {
         _web_b2s_xea(NULL, buf, sizeof(buf), bin);
         xmlGenBeginEndSimple(gen, zb->rci_element, buf);
      }
      else {
         // All others are unsigned numeric
         if (bin_len == 4)
            val = *(uint32_t __far *)bin;
         else if (bin_len == 2)
            val = *(uint16_t __far *)bin;
         else
            val = *(uint8_t __far *)bin;
         if (zb->rci_type == XBEE_RCI_TYPE_UINT32)
            xmlGenBeginEndSimpleUInt(gen, zb->rci_element, val);
         else
            // Must be 0x_hex32
            xmlGenBeginEndSimple0xInt(gen, zb->rci_element, val);
      }
   }
   else if (cached == _SXA_CACHED_ERROR && rr->zb_nchild) {
   	// We don't generate error elements if this is a general query (i.e.
      // rr->zb_nchild == 0).
   	rci_base_error(rr, RCIERR_QUERY, 1, NULL, zb->rci_element);
   }
}


/*** BeginHeader _rci_xbee_chars */
void _rci_xbee_chars(xmlCtx __far * ctx, xmlSE __far * se,
   							char __far * ch, long len);
/*** EndHeader */

void _rci_xbee_set_cmd_cb(
	const xbee_cmd_response_t FAR 		*response,
   const struct xbee_atcmd_reg_t FAR	*reg,
	void FAR										*base
	)
{
	// Callback for set setting command updates
   rciZBData_t __far * ubase = base;
	rciRequest __far * rr = ubase->rr;
   const _xbee_reg_descr_t __far * zb = rr->zb_queued[reg->flags];
   sxa_node_t __far * sxa = rr->sxa;
	xmlCtx __far * gen = &rr->gen;
   void __far * nbin;
   void __far * obin;
   unsigned bin_len;

   if ((response->flags & XBEE_CMD_RESP_MASK_STATUS)
                                             != XBEE_AT_RESP_SUCCESS)
   	rci_base_error(rr, RCIERR_SETTING, 1, NULL, zb->rci_element);
   else {
   	// Move new value to cached value, and set status
		nbin = (char __far *)base + reg->offset;
      bin_len = reg->bytes;
		obin = sxa_cached_value_ptr(sxa, zb);
      _f_memcpy(obin, nbin, bin_len);
      _sxa_set_cache_status(sxa, zb, zb->sxa_cache_group, _SXA_CACHED_OK);
      rr->zb = zb;
		_rci_xbee_gen_query_response(rr, 0);
   }
}


void _rci_xbee_set_dhdl_cb(
	const xbee_cmd_response_t FAR 		*response,
   const struct xbee_atcmd_reg_t FAR	*reg,
	void FAR										*base
	)
{
	// Callback for set setting command updates
   rciZBData_t __far * ubase = base;
	rciRequest __far * rr = ubase->rr;
   const _xbee_reg_descr_t __far * zb = rr->zb_queued[reg->flags];
   sxa_node_t __far * sxa = rr->sxa;
	xmlCtx __far * gen = &rr->gen;
   void __far * nbin;
   void __far * obin;
   unsigned bin_len;

   if ((response->flags & XBEE_CMD_RESP_MASK_STATUS)
                                             != XBEE_AT_RESP_SUCCESS)
   	rci_base_error(rr, RCIERR_SETTING, 1, NULL, zb->rci_element);
   else {
   	// DH was obtained without callback, now we are being called for DL.
      // The DH offset is 4 before that for DL.
		nbin = (char __far *)base + reg->offset - 4;
      bin_len = 8;
		obin = sxa_cached_value_ptr(sxa, zb);
      _f_memcpy(obin, nbin, bin_len);
      _sxa_set_cache_status(sxa, zb, zb->sxa_cache_group, _SXA_CACHED_OK);
      rr->zb = zb;
		_rci_xbee_gen_query_response(rr, 0);
   }
}

void _rci_xbee_chars(xmlCtx __far * ctx, xmlSE __far * se,
   							char __far * ch, long len)
{
	rciRequest __far * rr = (rciRequest __far *)ctx->userData;
   const _xbee_reg_descr_t __far * zb = rr->zb;
   sxa_node_t __far * sxa = rr->sxa;
   void __far * bin;
   unsigned bin_len;
   unsigned nfree;
   unsigned q;
   unsigned digit, v;
   uint32_t val;
   xbee_atcmd_reg_t __far * cmd;

   while (isspace(*ch) && len) {
      ++ch;
      --len;
   }

   if (sxa && zb) {
   	// Have a valid target and a valid RCI element.
      q = rr->zb_nqueued;
      // Note that we require at least 3 free entries, since this might be a
      // DH/DL command, and we need WR at end.
      if (q >= _SXA_MAX_QUEUED-2)
      	goto _nospc;	// Can't add any more AT commands
   	bin_len = sxa_cached_value_len(sxa, zb);
      nfree = RCI_ZIGBEE_MAX_UPDATE_DATA - rr->ubase->ndata;
		if (nfree < bin_len)
      	goto _nospc;
      // Have space for this update.
      ++rr->zb_nqueued;
      rr->zb_queued[q] = zb;
      bin = rr->ubase->data + rr->ubase->ndata;
      rr->ubase->ndata += bin_len;

		cmd = rr->clist + q;

      // Parse into binary value
      if (zb->rci_type == XBEE_RCI_TYPE_BIN || zb->rci_type == XBEE_RCI_TYPE_ADDR64) {
      	// Liberal parsing of hex binary strings:
         //  skip an initial '0x' if present.
         //  then, take pairs of hex chars and convert to successive bytes.
         // Allow any delimiter other than alphanumeric chars.
         if (len >= 2 && ch[0] == '0' && toupper(ch[1]) == 'X') {
         	ch += 2;
            len -= 2;
         }
	      for (digit = 0; digit < bin_len*2; ++digit) {
	         while (len && !isalnum(*ch)) ++ch, --len;
	         if (len && isxdigit(*ch)) {
	            if (isdigit(*ch)) v = *ch - '0';
	            else v = toupper(*ch) - ('A' - 10);
	            ((char __far *)bin)[digit>>1] |= v<<4*!(digit&1);
	            ++ch, --len;
	         }
	         else
	            break;
	      }
      	cmd->type = XBEE_CLT_SET;
      }
      else if (zb->rci_type == XBEE_RCI_TYPE_STRING) {
      	if (len > bin_len-1)
         	len = bin_len - 1;
         _f_memcpy(bin, ch, len);
         ((char __far *)bin)[len] = 0;
      	cmd->type = XBEE_CLT_SET_STR;
      }
      else {
         // All others are unsigned numeric
         val = _f_strtoul(ch, NULL, 0);
         if (bin_len == 4)
            *(uint32_t __far *)bin = val;
         else if (bin_len == 2)
            *(uint16_t __far *)bin = (uint16_t)val;
         else
            *(uint8_t __far *)bin = (uint8_t)val;
      	cmd->type = XBEE_CLT_SET_BE;
      }


      cmd->command.w = *(uint16_t __far *)zb->alias;
      cmd->flags = (uint8_t)q;	// This allows the callback to relate back to
      									// all the relevant data
      cmd->callback = _rci_xbee_set_cmd_cb;
      cmd->bytes = bin_len;
      cmd->offset = (uint16_t)((char __far *)bin - (char __far *)rr->ubase);

      if (!strcmp(zb->rci_element, "dest_addr")) {
	      // Horror! Special processing for DH/DL.  The above set up for DH, now
         // add another command for DL...  Why ever did they split a 64 bit
         // command into two 32 bits?
      	cmd->bytes = 4;	// Wasn't 8 for DH, but 4.
         cmd->callback = NULL;	// Suppress callback for DH
         v = cmd->offset;
	      ++rr->zb_nqueued;
	      ++q;
	      rr->zb_queued[q] = zb;
	      cmd = rr->clist + q;
	      cmd->command.str[0] = 'D';
	      cmd->command.str[1] = 'L';
      	cmd->type = XBEE_CLT_SET;
	      cmd->flags = (uint8_t)q;
	      cmd->callback = _rci_xbee_set_dhdl_cb;
	      cmd->bytes = 4;
	      cmd->offset = v + 4;
      }

   }

   return;
_nospc:
	rci_base_error(rr, RCIERR_PERM_RESOURCE, 1, NULL, zb->rci_element);

}




/*** BeginHeader _rci_xbee_start_query */
void _rci_xbee_start_query(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */
void _rci_xbee_start_query(xmlCtx __far * ctx, xmlSE __far * se)
{
	// Start of element inside query_setting, query_state or set_setting
   // (rr->type defines)
	rciRequest __far * rr = (rciRequest __far *)ctx->userData;

   if (!strcmp(se->element, "radio")) {
   	// Is the inner wrapper element.  Just reset to same handlers.
      // This is not strictly correct, since we could have arbitrary nested
      // <radio> elements.  Not a real problem in practice.
      se->startElement = _rci_xbee_start_query;
      se->endElement = _rci_xbee_end_query;
   	if (rr->type == RR_SET_SETTING)
	      se->characters = _rci_xbee_chars;
      return;
	}



   ++rr->zb_nchild;

   rr->zb = _rci_find_reg_descr_by_name(se->element,
   					rr->type == RR_QUERY_STATE,
                  rr->type == RR_SET_SETTING,
                  rr->zb_mask);

   if (rr->zb) {
   	if (rr->type != RR_SET_SETTING)
      	_rci_xbee_gen_query_response(rr, 1);
   }
	else {
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_start_query: no field %ls.\n", se->element);
      #endif
		rci_base_error(rr, RCIERR_FIELD_NOT_EXIST, 1, NULL, se->element);
   }
}


/*** BeginHeader _rci_xbee_end_query */
void _rci_xbee_end_query(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */
void _rci_xbee_end_query(xmlCtx __far * ctx, xmlSE __far * se)
{
	rciRequest __far * rr = (rciRequest __far *)ctx->userData;

}



/*** BeginHeader _rci_xbee_get_type */
int _rci_xbee_get_type(xmlSE __far * se);

#define _RCI_XBEE_COMMANDS 5
static const struct {
	char * name;
	int type;
} _rci_xbee_commands[_RCI_XBEE_COMMANDS] =
{
	{ "query_setting", RR_QUERY_SETTING },
	{ "query_state", RR_QUERY_STATE },
	{ "set_setting", RR_SET_SETTING },
	{ "discover", RR_DISCOVER },
	{ "fw_update", RR_FW_UPDATE }
};

/*** EndHeader  */
_rci_debug
int _rci_xbee_get_type(xmlSE __far * se)
{
	int i;

	for (i = 0; i < _RCI_XBEE_COMMANDS; ++i)
		if (!strcmp(se->element, _rci_xbee_commands[i].name)) {
			return _rci_xbee_commands[i].type;
		}
	return 0;
}




/*** BeginHeader _rci_xbee_start */
void _rci_xbee_start(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */

const FAR xbee_atcmd_reg_t _rci_xbee_nd_command[] = {
   XBEE_ATCMD_REG_END_CMD('N', 'D')
};

void _rci_xbee_start(xmlCtx __far * ctx, xmlSE __far * se)
{
	rciRequest __far * rr = (rciRequest __far *)ctx->userData;
	xmlCtx __far * gen = &rr->gen;
	const char __far * av;
	const char __far * addr_attr = NULL;
   addr64 addr;
   int radio = 0;

  	rr->type = _rci_xbee_get_type(se);
	if (!rr->type) {
		rci_base_error(rr, RCIERR_BAD_CMD, 1, NULL, se->element);
		return;
	}

   rr->zb_nchild = 0;
   rr->zb_nqueued = 0;

   switch (rr->type) {
   case RR_SET_SETTING:
   	// For set, process when we read the element character content
      se->characters = _rci_xbee_chars;
      // fall through...
   case RR_QUERY_SETTING:
   case RR_QUERY_STATE:
   	radio = 1;
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_start: %s\n",
      	rr->type == RR_SET_SETTING ? "set_setting" :
         rr->type == RR_QUERY_SETTING ? "query_setting" :
         "query_state");
      #endif

		addr_attr = xmlAttrValue(se, "addr");
      if (addr_attr) {
			if (_web_s2b_xea(NULL, (char __far *)addr_attr, strlen(addr_attr), &addr)) {
	         rci_base_error(rr, RCIERR_INVALID_FORMAT, 1, NULL, se->element);
	         return;
         }
         rr->sxa = sxa_node_by_addr(&addr);
         rr->zb_mask = 0;
         if (rr->sxa == sxa_local_node(&_rci_xbee))
         	rr->zb_mask = 0x8000u;
      }
      else {
      	rr->zb_mask = 0x8000u;
      	rr->sxa = sxa_local_node(&_rci_xbee);
      }
      if (!rr->sxa) {
         rci_base_error(rr, RCIERR_NO_MATCH, 1, NULL, se->element);
         return;
      }
      // Map the known device type to the custom type=xbee value.  This allows
      // the appropriate AT commands subset to be extracted from the full
      // table.  Documentation for this algorithm is in the RCI specification
      // rev F, section 7.12.
      // (Note that we already initialized the mask with the gateway i.e. local bit).
      if (sxa_cache_status(rr->sxa, NULL, SXA_CACHED_DEVICE_INFO) == _SXA_CACHED_OK) {
      	// Have device type info (DD, HV and VR, which are necessary to compute
         // this value.

         // Check for Freescale ZigBee module
			if ((rr->sxa->dd & 0xFFFF0000uL) == MS_MOD_SERIES1 &&
            rr->sxa->caps & ZB_CAP_ZIGBEE)
				rr->zb_mask |= 0x0001;
         // Else check for Smart Energy product
			else if ((rr->sxa->dd & 0xFFFF0000uL) == MS_MOD_ZB &&
            rr->sxa->caps & ZB_CAP_SE)
				rr->zb_mask |= 0x0100;
         // Else set module flag
			else
				rr->zb_mask |= 1u << (unsigned)(rr->sxa->dd >> 16);
         // Remote device but no DDO?  Then can't do anything
         if (!(rr->zb_mask & 0x8000u) && !(rr->sxa->caps & ZB_CAP_REMOTE_DDO))
         	rr->zb_mask = 0xFFFFu;
      }
      else {
      	// Unknown DD value
         rr->zb_mask = 0xFFFF;
      }

     	rr->zb_queued = _sys_malloc(sizeof(void __far *) * _SXA_MAX_QUEUED);


      if (rr->type == RR_SET_SETTING) {
      	rr->clist = _sys_calloc(
         		sizeof(xbee_atcmd_reg_t) * (_SXA_MAX_QUEUED+1) +
               sizeof(rciZBData_t)
               );
         if (!rr->clist) {
	         rci_base_error(rr, RCIERR_TEMP_RESOURCE, 1, NULL, se->element);
	         return;
	      }
         rr->ubase = (rciZBData_t __far *)((char __far *)rr->clist +
         			sizeof(xbee_atcmd_reg_t) * (_SXA_MAX_QUEUED+1));
         rr->ubase->rr = rr;
      }


      se->startElement = _rci_xbee_start_query;
      se->endElement = _rci_xbee_end_query;

   	break;
   case RR_DISCOVER:
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_start: discover\n");
      #endif
		av = xmlAttrValue(se, "option");
      if (av && !strcmp(av, "clear")) {
         // We can issue an ATND right now.  It will not block, however
         // the results won't be available for several seconds.  Since we don't
         // want to delay the RCI response, the old cached list will be
         // returned.  Thus, we don't quite obey the specified semantics for
         // option=clear, but it's not really that useful for the Rabbit
         // which never clears the discovered node list anyway.
			//xbee_cmd_list_execute(&_rci_xbee,
   		//						&rr->clc,
			//						_rci_xbee_nd_command,
         //                  NULL,
         //                  NULL);
      }

      rr->zb_start = 1;
		av = xmlAttrValue(se, "start");
      if (av)
      	rr->zb_start = _f_strtol(av, NULL, 0);
      if (rr->zb_start < 1)
      	rr->zb_start = 1;
      else if (rr->zb_start > 16000)
      	rr->zb_start = 16000;

      rr->zb_size = 65536L;
		av = xmlAttrValue(se, "size");
      if (av)
      	rr->zb_size = _f_strtol(av, NULL, 0);
      if (rr->zb_size < 1)
      	rr->zb_size = 1;
      else if (rr->zb_size > 16000)
      	rr->zb_size = 16000;

      // Ignore any nested elements
      se->startElement = NULL;
      se->endElement = NULL;

   	break;
   case RR_FW_UPDATE:
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_start: fw_update\n");
      #endif
   	break;
   }
   xmlGenBeginElement(gen, se->element, se->index,
   		(char __far *)"addr", addr_attr,
   		(char __far *)NULL);
   if (radio)
	   xmlGenBeginElement(gen, "radio", 1,
	         (char __far *)NULL);
}

/*** BeginHeader _rci_xbee_end */
void _rci_xbee_end(xmlCtx __far * ctx, xmlSE __far * se);
/*** EndHeader */

void _rci_xbee_add_wr(rciRequest __far * rr)
{
   xbee_atcmd_reg_t __far * cmd = rr->clist + rr->zb_nqueued++;

   cmd->command.w = *(uint16_t *)"WR";
}



void _rci_xbee_end(xmlCtx __far * ctx, xmlSE __far * se)
{
	char buf[25];
	rciRequest __far * rr = (rciRequest __far *)ctx->userData;
	xmlCtx __far * gen = &rr->gen;
   sxa_node_t __far * sxa;
   int i;
   unsigned u;
   const char * a = "";
   unsigned T;
   int radio = 0;


   switch (rr->type) {
   case RR_QUERY_SETTING:
   case RR_QUERY_STATE:
   	radio = 1;
	   if (!rr->zb_nchild) {
	      #ifdef RCI_ZIGBEE_VERBOSE
	      printf( "_rci_xbee_end: query full result\n");
	      #endif
	      // Query with no child elements: return everything.
	      for (rr->zb = _xbee_reg_table; rr->zb->rci_element; ++rr->zb) {
	         if ((rr->type == RR_QUERY_STATE) != rr->zb->is_state)
	            continue;
	         if ((rr->zb->cxval & rr->zb_mask) != rr->zb_mask)
	            continue;
	         if (!strcmp(a, rr->zb->alias))
	            continue;
	         _rci_xbee_gen_query_response(rr, 1);
	         a = rr->zb->alias;
	      }
	   }
		// If we queued any cache update requests, release them and wait
	   if (rr->zb_nqueued) {
      #ifdef RCI_ZIGBEE_VERBOSE
      	printf("_rci_xbee_end: query queued %u regs\n", rr->zb_nqueued);
      #endif
	      // We can block for a short time to wait for the result.  This is not nice,
	      // since application will be blocked for an indeterminate amount of time
	      // if there are multiple queries.  Unfortunately we have no way of
	      // returning control to app in the middle of the query, so the only
	      // solution is to either force results to be from cache only, or code
	      // time-critical parts of the application as ISRs (or use uC/OS).  We
	      // take the latter approach, so that Device Cloud works as expected.
	      T = _SET_SHORT_TIMEOUT(2000);  // not too much time
	      do {
	         cloud_block_tick();
	      } while (rr->sxa->queued &&
                  !_CHK_SHORT_TIMEOUT(T));

         // Hopefully something was updated.  Loop through queued table and
         // add reply elements if appropriate.  Don't re-queue if there was
         // an error or the result was still not known.
         for (u = 0; u < rr->zb_nqueued; ++u) {
         	rr->zb = rr->zb_queued[u];
	         _rci_xbee_gen_query_response(rr, 0);

         }
	   }

      break;
   case RR_SET_SETTING:
   	radio = 1;
      #ifdef RCI_ZIGBEE_VERBOSE
      printf( "_rci_xbee_end: set_setting %u queued\n", rr->zb_nqueued);
      #endif
   	if (!rr->zb_nqueued)
      	break;
      // Have some queued set commands
      // Since this is setting values, we always issue ATWR to make them
      // permanent in the device.  This is what NDS does.
      _rci_xbee_add_wr(rr);
      xbee_cmd_list_execute(sxa_xbee(rr->sxa),
                        &rr->clc,
                        rr->clist,
                        rr->ubase,
                        rr->sxa->addr_ptr);
      //FIXME: add timeout/cancel
      do {
	   	cloud_block_tick();
      } while (xbee_cmd_list_status(&rr->clc) == XBEE_COMMAND_LIST_RUNNING);
      // The cmd list callback moves the new value to the cached value if
      // successful, and generates the reply XML

      #ifdef RCI_ZIGBEE_VERBOSE
      printf( "_rci_xbee_end: set_setting completed\n");
      #endif
   	break;
   case RR_DISCOVER:
   	// Initially wait for discover command to complete.  This will be
      // short compared with the 6 seconds or so for the actual responses to
      // be available.
      //do {
	   //	cloud_block_tick();
      //} while (xbee_cmd_list_status(&rr->clc) == XBEE_COMMAND_LIST_RUNNING);
		for (i = (int)(rr->zb_start-1); i < (int)(rr->zb_start-1+rr->zb_size); ++i) {
      	sxa = sxa_node_by_index(i);
         if (!sxa)
         	break;
	      #ifdef RCI_ZIGBEE_VERBOSE
	      printf( "_rci_xbee_end: discover replying node #%u\n", i);
	      #endif
         // Bug in Device Cloud server requires explicit "index=1".  Normally,
         // we suppress this since it's the default.  So, we make it an
         // explicit attribute here.
         sprintf(buf, "%d", i+1);
	      xmlGenBeginElement(gen, "device", 1,
         	(char __far *)"index", (char __far *)buf,
	         (char __far *)NULL);

         xmlGenBeginEndSimpleInt(gen, "type", sxa->id.device_type);
         _web_b2s_xea(NULL, buf, 25, &sxa->id.ieee_addr_be);
         xmlGenBeginEndSimple(gen, "ext_addr", buf);
         xmlGenBeginEndSimple0xInt(gen, "net_addr", sxa->id.network_addr);
         if (sxa->id.parent_addr != 0xFFFE)
         	xmlGenBeginEndSimple0xInt(gen, "parent_addr", sxa->id.parent_addr);
         // profile and mfg are hard-coded at present, since SXA only
         // supports XBee at present.
         xmlGenBeginEndSimple0xInt(gen, "profile_id", 0xC105);
         xmlGenBeginEndSimple0xInt(gen, "mfg_id", 0x101E);
         if (sxa_cache_status(sxa, NULL, SXA_CACHED_DEVICE_INFO) == _SXA_CACHED_OK)
         	xmlGenBeginEndSimple0xInt(gen, "device_type", sxa->dd);
         if (sxa->id.node_info[0] && !isspace(sxa->id.node_info[0]))
         	xmlGenBeginEndSimple(gen, "node_id", sxa->id.node_info);

			xmlGenEndElement(gen, NULL); // device
      }
   	break;
   case RR_FW_UPDATE:
   	break;
   }

}

/*** BeginHeader _rci_xbee_gen_reply */
int _rci_xbee_gen_reply(rciRequest __far * rr, xmlSE __far * se);
/*** EndHeader */
int _rci_xbee_gen_reply(rciRequest __far * rr, xmlSE __far * se)
{
	xmlCtx __far * gen = &rr->gen;
	return 0;
}

/*** BeginHeader _rci_xbee_handler */
int _rci_xbee_handler(struct rciRequest __far * rr, xmlSE __far * se, int type);
/*** EndHeader */
int _rci_xbee_handler(struct rciRequest __far * rr, xmlSE __far * se, int type)
{
	switch (type) {
   case RCIDCT_START:
      se->startElement = _rci_xbee_start;
      se->endElement = _rci_xbee_end;
      break;
	case RCIDCT_END:
		return _rci_xbee_gen_reply(rr, se);

   // Indicate don't want automatic transaction or reply generation.  This
   // callback handles the request and reply XML without using RabbitWeb.
   case RCIDCT_ASK_REQUEST:
   	return 0;
   case RCIDCT_ASK_REPLY:
   	return 0;
   }
	return 0;
}

/*** BeginHeader _rci_xbee_init */
int _rci_xbee_init(void);
/*** EndHeader */

/*
	Add fixed set of cluster IDs in order to handle discovery and I/O samples,
   no matter what the ATAO setting in the attached XBee.
*/

#ifndef XBEE_DIGI_DATA_CLUSTERS
	#define XBEE_DIGI_DATA_CLUSTERS _rci_digi_data_clusters
	const wpan_cluster_table_entry_t _rci_digi_data_clusters[] = {

	   /* Other clusters can go here, sorted by cluster ID... */
	   XBEE_IO_CLIENT_CLUST_ENTRY,
	   XBEE_DISC_CLIENT_CLUST_ENTRY,
	   WPAN_CLUST_ENTRY_LIST_END
	};
#endif
/* Used to track ZDO transactions in order to match responses to requests
   (#ZDO_MATCH_DESC_RESP). */
wpan_ep_state_t _rci_zdo_ep_state = { 0 };

const wpan_endpoint_table_entry_t _rci_xbee_endpoints_table[] = {
	/* Add your endpoints here */

	ZDO_ENDPOINT(_rci_zdo_ep_state),

	/* Digi endpoints */
	{
	   WPAN_ENDPOINT_DIGI_DATA,  // endpoint
	   WPAN_PROFILE_DIGI,        // profile ID
	   NULL,                     // endpoint handler
	   NULL,                     // ep_state
	   0x0000,                   // device ID
	   0x00,                     // version
		XBEE_DIGI_DATA_CLUSTERS
	},

#ifdef XBEE_ENDPOINTS
	XBEE_ENDPOINTS
#endif

	{ WPAN_ENDPOINT_END_OF_LIST }
};

/*
	Define frame dispatch table.  Library currently requires the
	frame dispatch table to be set up at compile-time.
*/
const xbee_dispatch_table_entry_t xbee_frame_handlers[] =
{
	// Standard handlers (required) for AT command processing
	XBEE_FRAME_HANDLE_LOCAL_AT,
   XBEE_FRAME_HANDLE_REMOTE_AT,

	// Standard handlers (required) for SXA to work properly
	XBEE_FRAME_HANDLE_IS_RESPONSE,
   XBEE_FRAME_HANDLE_ND_RESPONSE,
   XBEE_FRAME_HANDLE_RX_EXPLICIT,

#ifdef XBEE_FRAME_HANDLERS
	XBEE_FRAME_HANDLERS
#endif

	XBEE_FRAME_TABLE_END
};



_rci_debug
int _rci_xbee_init(void)
{
   web_register_metadata(RCI_xbee);
   web_register_custom("xbee_type_qset", _rci_xbee_custom_qset);
   web_register_custom("xbee_type_qstate", _rci_xbee_custom_qstate);
	_rci_register_target("zigbee", "_RCI_Xbee", "_RCI_Xbee", _rci_xbee_handler);

   // Required local device initialization
	if (xbee_dev_init( &_rci_xbee, &XBEE_SERPORT, xbee_awake_pin, xbee_reset_pin)) {
      #ifdef RCI_ZIGBEE_VERBOSE
		printf( "_rci_xbee_init: Failed to initialize XBee device.\n");
      #endif
		return -EIO;
	}

   // Initialize the Simple XBee API layer.  SXA handles a lot of the
   // book-keeping for multiple remote nodes and XBee on-module I/Os.
   // It also helps to hide the difference between local and remote nodes.
   if (!sxa_init_or_exit(&_rci_xbee, _rci_xbee_endpoints_table, 1)) {
      #ifdef RCI_ZIGBEE_VERBOSE
   	printf("_rci_xbee_init: Failed to initialize Simple XBee API!\n");
      #endif
      return -EPERM;
   }

   #ifdef RCI_ZIGBEE_VERBOSE
   printf( "_rci_xbee_init: OK\n");
   #endif


	return 0;
}

/*** BeginHeader */
#endif
/*** EndHeader */

